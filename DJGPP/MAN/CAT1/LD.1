


LD(1)                 GNU Development Tools                 LD(1)


NNAAMMEE
       ld - Using LD, the GNU linker

SSYYNNOOPPSSIISS
       ld [ooppttiioonnss] _o_b_j_f_i_l_e ...

DDEESSCCRRIIPPTTIIOONN
       lldd   combines  a  number  of  object  and  archive  files,
       relocates  their  data  and  ties  up  symbol  references.
       Usually the last step in compiling a program is to run lldd.

       lldd accepts Linker Command  Language  files  written  in  a
       superset of AT&T's Link Editor Command Language syntax, to
       provide  explicit  and  total  control  over  the  linking
       process.

       This  man page does not describe the command language; see
       the lldd entry in "info", or the manual ld: the GNU  linker,
       for  full  details  on  the  command language and on other
       aspects of the GNU linker.

       This version of lldd uses the general purpose BFD  libraries
       to  operate  on  object  files.  This  allows  lldd to read,
       combine,  and  write  object  files  in   many   different
       formats---for example, COFF or "a.out".  Different formats
       may be linked together to produce any  available  kind  of
       object file.

       Aside from its flexibility, the GNU linker is more helpful
       than other linkers in  providing  diagnostic  information.
       Many    linkers   abandon   execution   immediately   upon
       encountering an error;  whenever  possible,  lldd  continues
       executing,  allowing  you to identify other errors (or, in
       some cases, to get an output file in spite of the  error).

       The  GNU  linker  lldd  is  meant  to cover a broad range of
       situations, and to be as compatible as possible with other
       linkers.   As  a  result, you have many choices to control
       its behavior.

OOPPTTIIOONNSS
       The linker supports a plethora  of  command-line  options,
       but  in  actual  practice  few  of  them  are  used in any
       particular context.  For instance, a frequent use of lldd is
       to   link  standard  Unix  object  files  on  a  standard,
       supported Unix system.  On such a system, to link  a  file
       "hello.o":

               ld -o <output> /lib/crt0.o hello.o -lc

       This  tells  lldd  to  produce  a  file called _o_u_t_p_u_t as the
       result of linking the file  "/lib/crt0.o"  with  "hello.o"
       and  the  library  "libc.a",  which  will  come  from  the
       standard search directories.  (See the discussion  of  the



binutils-2.17               2006-06-23                          1





LD(1)                 GNU Development Tools                 LD(1)


       --ll option below.)

       Some of the command-line options to lldd may be specified at
       any point in the command  line.   However,  options  which
       refer  to  files,  such  as --ll or --TT, cause the file to be
       read at the point at  which  the  option  appears  in  the
       command  line, relative to the object files and other file
       options.  Repeating  non-file  options  with  a  different
       argument  will  either have no further effect, or override
       prior occurrences  (those  further  to  the  left  on  the
       command  line)  of  that  option.   Options  which  may be
       meaningfully specified more than once  are  noted  in  the
       descriptions below.

       Non-option  arguments  are  object files or archives which
       are to be linked together.  They may follow,  precede,  or
       be  mixed  in  with  command-line  options, except that an
       object file argument may not be placed between  an  option
       and its argument.

       Usually  the  linker  is  invoked with at least one object
       file, but you can specify  other  forms  of  binary  input
       files  using  --ll, --RR, and the script command language.  If
       _n_o binary input files at all  are  specified,  the  linker
       does  not  produce  any  output, and issues the message NNoo
       iinnppuutt ffiilleess.

       If the linker cannot recognize the  format  of  an  object
       file, it will assume that it is a linker script.  A script
       specified in this way augments the main linker script used
       for  the link (either the default linker script or the one
       specified by using --TT).  This feature permits  the  linker
       to link against a file which appears to be an object or an
       archive, but actually merely defines some  symbol  values,
       or  uses  "INPUT"  or "GROUP" to load other objects.  Note
       that specifying a script in this way merely  augments  the
       main  linker  script;  use  the  --TT  option to replace the
       default linker script entirely.

       For options  whose  names  are  a  single  letter,  option
       arguments  must  either  follow  the option letter without
       intervening whitespace, or be given as separate  arguments
       immediately following the option that requires them.

       For  options  whose names are multiple letters, either one
       dash or two can precede  the  option  name;  for  example,
       --ttrraaccee--ssyymmbbooll    and    ----ttrraaccee--ssyymmbbooll   are   equivalent.
       Note---there is one  exception  to  this  rule.   Multiple
       letter  options  that start with a lower case 'o' can only
       be preceeded by two dashes.  This is to  reduce  confusion
       with  the  --oo  option.   So  for  example --oommaaggiicc sets the
       output file name to mmaaggiicc whereas ----oommaaggiicc sets the NMAGIC
       flag on the output.




binutils-2.17               2006-06-23                          2





LD(1)                 GNU Development Tools                 LD(1)


       Arguments   to  multiple-letter  options  must  either  be
       separated from the option name by an equals  sign,  or  be
       given  as  separate  arguments  immediately  following the
       option that requires them.   For  example,  ----ttrraaccee--ssyymmbbooll
       ffoooo   and   ----ttrraaccee--ssyymmbbooll==ffoooo   are  equivalent.   Unique
       abbreviations of the names of multiple-letter options  are
       accepted.

       Note---if  the  linker  is being invoked indirectly, via a
       compiler driver (e.g. ggcccc) then  all  the  linker  command
       line  options  should  be prefixed by --WWll,, (or whatever is
       appropriate for the particular compiler driver) like this:

                 gcc -Wl,--startgroup foo.o bar.o -Wl,--endgroup

       This  is  important, because otherwise the compiler driver
       program may silently drop the linker options, resulting in
       a bad link.

       Here  is  a  table  of  the  generic command line switches
       accepted by the GNU linker:

       @@_f_i_l_e
           Read command-line options from _f_i_l_e.  The options read
           are  inserted  in  place of the original @_f_i_l_e option.
           If _f_i_l_e does not exist, or cannot be  read,  then  the
           option will be treated literally, and not removed.

           Options  in  _f_i_l_e  are  separated  by  whitespace.   A
           whitespace character may be included in an  option  by
           surrounding  the  entire  option  in  either single or
           double quotes.  Any character (including a  backslash)
           may  be  included  by  prefixing  the  character to be
           included  with  a  backslash.   The  _f_i_l_e  may  itself
           contain  additional  @_f_i_l_e  options;  any such options
           will be processed recursively.

       --aa_k_e_y_w_o_r_d
           This option is supported for HP/UX compatibility.  The
           _k_e_y_w_o_r_d  argument  must be one of the strings aarrcchhiivvee,
           sshhaarreedd,  or  ddeeffaauulltt.    --aaaarrcchhiivvee   is   functionally
           equivalent to --BBssttaattiicc, and the other two keywords are
           functionally equivalent to --BBddyynnaammiicc.  This option may
           be used any number of times.

       --AA_a_r_c_h_i_t_e_c_t_u_r_e
       ----aarrcchhiitteeccttuurree==_a_r_c_h_i_t_e_c_t_u_r_e
           In  the  current  release of lldd, this option is useful
           only for the Intel 960 family  of  architectures.   In
           that   lldd  configuration,  the  _a_r_c_h_i_t_e_c_t_u_r_e  argument
           identifies the  particular  architecture  in  the  960
           family,  enabling  some  safeguards  and modifying the
           archive-library search path.




binutils-2.17               2006-06-23                          3





LD(1)                 GNU Development Tools                 LD(1)


           Future   releases   of   lldd   may   support    similar
           functionality for other architecture families.

       --bb _i_n_p_u_t_-_f_o_r_m_a_t
       ----ffoorrmmaatt==_i_n_p_u_t_-_f_o_r_m_a_t
           lldd  may be configured to support more than one kind of
           object file.  If your lldd is configured this  way,  you
           can use the --bb option to specify the binary format for
           input object files that  follow  this  option  on  the
           command  line.   Even when lldd is configured to support
           alternative object formats, you don't usually need  to
           specify  this, as lldd should be configured to expect as
           a default input format the most usual format  on  each
           machine.  _i_n_p_u_t_-_f_o_r_m_a_t is a text string, the name of a
           particular format  supported  by  the  BFD  libraries.
           (You  can  list  the  available  binary  formats  with
           oobbjjdduummpp --ii.)

           You may want to use this option  if  you  are  linking
           files with an unusual binary format.  You can also use
           --bb to switch formats explicitly (when  linking  object
           files  of  different  formats), by including --bb _i_n_p_u_t_-
           _f_o_r_m_a_t  before  each  group  of  object  files  in   a
           particular format.

           The  default  format  is  taken  from  the environment
           variable "GNUTARGET".

           You can also define the input format  from  a  script,
           using the command "TARGET";

       --cc _M_R_I_-_c_o_m_m_a_n_d_f_i_l_e
       ----mmrrii--ssccrriipptt==_M_R_I_-_c_o_m_m_a_n_d_f_i_l_e
           For  compatibility  with  linkers  produced by MRI, lldd
           accepts  script  files  written   in   an   alternate,
           restricted  command  language,  described  in  the MRI
           Compatible   Script   Files   section   of   GNU    ld
           documentation.   Introduce  MRI  script files with the
           option --cc; use the --TT option  to  run  linker  scripts
           written  in the general-purpose lldd scripting language.
           If _M_R_I_-_c_m_d_f_i_l_e does not exist, lldd looks for it in  the
           directories specified by any --LL options.

       --dd
       --ddcc
       --ddpp These three options are equivalent; multiple forms are
           supported for compatibility with other linkers.   They
           assign  space  to common symbols even if a relocatable
           output  file  is  specified  (with  --rr).   The  script
           command "FORCE_COMMON_ALLOCATION" has the same effect.

       --ee _e_n_t_r_y
       ----eennttrryy==_e_n_t_r_y
           Use  _e_n_t_r_y  as  the  explicit  symbol  for   beginning



binutils-2.17               2006-06-23                          4





LD(1)                 GNU Development Tools                 LD(1)


           execution  of  your  program,  rather than the default
           entry point.  If there is no symbol named  _e_n_t_r_y,  the
           linker  will  try  to parse _e_n_t_r_y as a number, and use
           that  as  the  entry  address  (the  number  will   be
           interpreted  in  base 10; you may use a leading 00xx for
           base 16, or a leading 00 for base 8).

       ----eexxcclluuddee--lliibbss _l_i_b,,_l_i_b,,......
           Specifies a  list  of  archive  libraries  from  which
           symbols  should  not  be  automatically  exported. The
           library names may be delimited by  commas  or  colons.
           Specifying  "--exclude-libs  ALL"  excludes symbols in
           all archive libraries  from  automatic  export.   This
           option is available only for the i386 PE targeted port
           of the linker and for ELF targeted  ports.   For  i386
           PE, symbols explicitly listed in a .def file are still
           exported, regardless of this option.  For ELF targeted
           ports, symbols affected by this option will be treated
           as hidden.

       --EE
       ----eexxppoorrtt--ddyynnaammiicc
           When creating a dynamically linked executable, add all
           symbols  to  the  dynamic  symbol  table.  The dynamic
           symbol table is the set of symbols which  are  visible
           from dynamic objects at run time.

           If  you  do  not  use  this option, the dynamic symbol
           table will normally contain only those  symbols  which
           are referenced by some dynamic object mentioned in the
           link.

           If you use "dlopen" to load  a  dynamic  object  which
           needs  to  refer  back  to  the symbols defined by the
           program, rather than some other dynamic  object,  then
           you will probably need to use this option when linking
           the program itself.

           You can also use the version script  to  control  what
           symbols should be added to the dynamic symbol table if
           the output format supports it.  See the description of
           ----vveerrssiioonn--ssccrriipptt in VVEERRSSIIOONN.

       --EEBB Link  big-endian  objects.   This  affects the default
           output format.

       --EELL Link little-endian objects.  This affects the  default
           output format.

       --ff
       ----aauuxxiilliiaarryy _n_a_m_e
           When  creating  an ELF shared object, set the internal
           DT_AUXILIARY field to the specified name.  This  tells
           the dynamic linker that the symbol table of the shared



binutils-2.17               2006-06-23                          5





LD(1)                 GNU Development Tools                 LD(1)


           object should be used as an auxiliary  filter  on  the
           symbol table of the shared object _n_a_m_e.

           If  you  later  link  a  program  against  this filter
           object, then, when you run the  program,  the  dynamic
           linker  will  see  the  DT_AUXILIARY  field.   If  the
           dynamic linker resolves any symbols  from  the  filter
           object,  it  will  first  check  whether  there  is  a
           definition in the shared object  _n_a_m_e.   If  there  is
           one,  it will be used instead of the definition in the
           filter object.  The shared object _n_a_m_e need not exist.
           Thus  the shared object _n_a_m_e may be used to provide an
           alternative  implementation  of   certain   functions,
           perhaps   for   debugging   or  for  machine  specific
           performance.

           This option may be  specified  more  than  once.   The
           DT_AUXILIARY  entries  will be created in the order in
           which they appear on the command line.

       --FF _n_a_m_e
       ----ffiilltteerr _n_a_m_e
           When creating an ELF shared object, set  the  internal
           DT_FILTER field to the specified name.  This tells the
           dynamic linker that the symbol  table  of  the  shared
           object  which  is  being  created  should be used as a
           filter on the symbol table of the shared object  _n_a_m_e.

           If  you  later  link  a  program  against  this filter
           object, then, when you run the  program,  the  dynamic
           linker  will  see  the  DT_FILTER  field.  The dynamic
           linker will resolve symbols according  to  the  symbol
           table  of  the  filter  object  as  usual, but it will
           actually link to the definitions found in  the  shared
           object  _n_a_m_e.   Thus  the filter object can be used to
           select a subset of the symbols provided by the  object
           _n_a_m_e.

           Some  older  linkers  used  the --FF option throughout a
           compilation  toolchain  for   specifying   object-file
           format  for  both  input and output object files.  The
           GNU linker uses other mechanisms for this purpose: the
           --bb,  ----ffoorrmmaatt, ----ooffoorrmmaatt options, the "TARGET" command
           in linker scripts,  and  the  "GNUTARGET"  environment
           variable.   The  GNU  linker will ignore the --FF option
           when not creating an ELF shared object.

       --ffiinnii _n_a_m_e
           When creating an ELF executable or shared object, call
           NAME when the executable or shared object is unloaded,
           by setting DT_FINI to the address of the function.  By
           default,  the  linker  uses "_fini" as the function to
           call.




binutils-2.17               2006-06-23                          6





LD(1)                 GNU Development Tools                 LD(1)


       --gg  Ignored.  Provided for compatibility with other tools.

       --GG_v_a_l_u_e
       ----ggppssiizzee==_v_a_l_u_e
           Set  the maximum size of objects to be optimized using
           the GP register to _s_i_z_e.  This is only meaningful  for
           object  file formats such as MIPS ECOFF which supports
           putting  large  and  small  objects   into   different
           sections.   This  is  ignored  for  other  object file
           formats.

       --hh_n_a_m_e
       --ssoonnaammee==_n_a_m_e
           When creating an ELF shared object, set  the  internal
           DT_SONAME  field  to  the  specified  name.   When  an
           executable is linked with a shared object which has  a
           DT_SONAME  field,  then when the executable is run the
           dynamic linker will attempt to load the shared  object
           specified by the DT_SONAME field rather than the using
           the file name given to the linker.

       --ii  Perform an incremental link (same as option --rr).

       --iinniitt _n_a_m_e
           When creating an ELF executable or shared object, call
           NAME  when  the executable or shared object is loaded,
           by setting DT_INIT to the address of the function.  By
           default,  the  linker  uses "_init" as the function to
           call.

       --ll_a_r_c_h_i_v_e
       ----lliibbrraarryy==_a_r_c_h_i_v_e
           Add archive file _a_r_c_h_i_v_e to the list of files to link.
           This  option may be used any number of times.  lldd will
           search its path-list for occurrences of "libarchive.a"
           for every _a_r_c_h_i_v_e specified.

           On systems which support shared libraries, lldd may also
           search for libraries with extensions other than  ".a".
           Specifically, on ELF and SunOS systems, lldd will search
           a directory for a library with an extension  of  ".so"
           before  searching  for  one with an extension of ".a".
           By convention, a ".so" extension  indicates  a  shared
           library.

           The  linker  will  search an archive only once, at the
           location where it is specified on  the  command  line.
           If the archive defines a symbol which was undefined in
           some object which appeared before the archive  on  the
           command  line, the linker will include the appropriate
           file(s)  from  the  archive.   However,  an  undefined
           symbol  in  an  object  appearing later on the command
           line will not cause the linker to search  the  archive
           again.



binutils-2.17               2006-06-23                          7





LD(1)                 GNU Development Tools                 LD(1)


           See  the  --((  option  for a way to force the linker to
           search archives multiple times.

           You may list the same archive multiple  times  on  the
           command line.

           This  type  of  archive searching is standard for Unix
           linkers.  However, if you are using lldd  on  AIX,  note
           that  it  is  different  from the behaviour of the AIX
           linker.

       --LL_s_e_a_r_c_h_d_i_r
       ----lliibbrraarryy--ppaatthh==_s_e_a_r_c_h_d_i_r
           Add path _s_e_a_r_c_h_d_i_r to the list of paths that  lldd  will
           search  for  archive libraries and lldd control scripts.
           You may use this option  any  number  of  times.   The
           directories  are  searched  in the order in which they
           are  specified  on  the  command  line.    Directories
           specified  on the command line are searched before the
           default directories.  All --LL options apply to  all  --ll
           options,  regardless of the order in which the options
           appear.

           If _s_e_a_r_c_h_d_i_r begins with "=", then  the  "="  will  be
           replaced  by the _s_y_s_r_o_o_t _p_r_e_f_i_x, a path specified when
           the linker is configured.

           The default  set  of  paths  searched  (without  being
           specified  with --LL) depends on which emulation mode lldd
           is using, and  in  some  cases  also  on  how  it  was
           configured.

           The  paths can also be specified in a link script with
           the "SEARCH_DIR" command.  Directories specified  this
           way  are  searched  at  the  point in which the linker
           script appears in the command line.

       --mm_e_m_u_l_a_t_i_o_n
           Emulate  the  _e_m_u_l_a_t_i_o_n  linker.   You  can  list  the
           available emulations with the ----vveerrbboossee or --VV options.

           If the --mm option is not used, the emulation  is  taken
           from  the  "LDEMULATION" environment variable, if that
           is defined.

           Otherwise, the default emulation depends upon how  the
           linker was configured.

       --MM
       ----pprriinntt--mmaapp
           Print  a  link map to the standard output.  A link map
           provides information about  the  link,  including  the
           following:




binutils-2.17               2006-06-23                          8





LD(1)                 GNU Development Tools                 LD(1)


           *   Where object files are mapped into memory.

           *   How common symbols are allocated.

           *   All  archive  members included in the link, with a
               mention of the symbol  which  caused  the  archive
               member to be brought in.

           *   The values assigned to symbols.

               Note  -  symbols  whose  values are computed by an
               expression  which  involves  a  reference   to   a
               previous  value  of  the  same symbol may not have
               correct result displayed in the link map.  This is
               because  the  linker discards intermediate results
               and only retains the final value of an expression.
               Under  such  circumstances the linker will display
               the final value enclosed by square brackets.  Thus
               for example a linker script containing:

                          foo = 1
                          foo = foo * 4
                          foo = foo + 8

               will  produce the following output in the link map
               if the --MM option is used:

                          0x00000001                foo = 0x1
                          [0x0000000c]                foo = (foo * 0x4)
                          [0x0000000c]                foo = (foo + 0x8)

               See  EExxpprreessssiioonnss  for   more   information   about
               expressions in linker scripts.

       --nn
       ----nnmmaaggiicc
           Turn  off  page  alignment  of  sections, and mark the
           output as "NMAGIC" if possible.

       --NN
       ----oommaaggiicc
           Set the text and data  sections  to  be  readable  and
           writable.   Also,  do not page-align the data segment,
           and disable linking against shared libraries.  If  the
           output  format supports Unix style magic numbers, mark
           the output as "OMAGIC". Note: Although a writable text
           section  is  allowed  for PE-COFF targets, it does not
           conform  to  the  format  specification  published  by
           Microsoft.

       ----nnoo--oommaaggiicc
           This  option  negates  most  of  the effects of the --NN
           option.  It sets the text section to be read-only, and
           forces  the  data  segment to be page-aligned.  Note -



binutils-2.17               2006-06-23                          9





LD(1)                 GNU Development Tools                 LD(1)


           this option does not  enable  linking  against  shared
           libraries.  Use --BBddyynnaammiicc for this.

       --oo _o_u_t_p_u_t
       ----oouuttppuutt==_o_u_t_p_u_t
           Use _o_u_t_p_u_t as the name for the program produced by lldd;
           if this option is not specified,  the  name  _a_._o_u_t  is
           used by default.  The script command "OUTPUT" can also
           specify the output file name.

       --OO _l_e_v_e_l
           If _l_e_v_e_l is a numeric  values  greater  than  zero  lldd
           optimizes  the  output.  This might take significantly
           longer and therefore probably should only  be  enabled
           for the final binary.

       --qq
       ----eemmiitt--rreellooccss
           Leave relocation sections and contents in fully linked
           exececutables.  Post link  analysis  and  optimization
           tools  may  need  this information in order to perform
           correct modifications of executables.  This results in
           larger executables.

           This   option  is  currently  only  supported  on  ELF
           platforms.

       ----ffoorrccee--ddyynnaammiicc
           Force the output file to have dynamic sections.   This
           option is specific to VxWorks targets.

       --rr
       ----rreellooccaattaabbllee
           Generate relocatable output---i.e., generate an output
           file that can in turn serve as input to lldd.   This  is
           often  called  _p_a_r_t_i_a_l  _l_i_n_k_i_n_g.  As a side effect, in
           environments that support standard Unix magic numbers,
           this  option  also sets the output file's magic number
           to "OMAGIC".  If this  option  is  not  specified,  an
           absolute file is produced.  When linking C++ programs,
           this   option   _w_i_l_l   _n_o_t   resolve   references   to
           constructors; to do that, use --UUrr.

           When  an  input  file does not have the same format as
           the output file, partial linking is only supported  if
           that  input  file  does  not  contain any relocations.
           Different   output   formats    can    have    further
           restrictions;  for  example some "a.out"-based formats
           do not support partial linking  with  input  files  in
           other formats at all.

           This option does the same thing as --ii.





binutils-2.17               2006-06-23                         10





LD(1)                 GNU Development Tools                 LD(1)


       --RR _f_i_l_e_n_a_m_e
       ----jjuusstt--ssyymmbboollss==_f_i_l_e_n_a_m_e
           Read  symbol  names and their addresses from _f_i_l_e_n_a_m_e,
           but do not relocate it or include it  in  the  output.
           This  allows your output file to refer symbolically to
           absolute  locations  of  memory   defined   in   other
           programs.  You may use this option more than once.

           For  compatibility  with  other ELF linkers, if the --RR
           option is followed by a directory name, rather than  a
           file name, it is treated as the --rrppaatthh option.

       --ss
       ----ssttrriipp--aallll
           Omit all symbol information from the output file.

       --SS
       ----ssttrriipp--ddeebbuugg
           Omit debugger symbol information (but not all symbols)
           from the output file.

       --tt
       ----ttrraaccee
           Print the names of the input  files  as  lldd  processes
           them.

       --TT _s_c_r_i_p_t_f_i_l_e
       ----ssccrriipptt==_s_c_r_i_p_t_f_i_l_e
           Use  _s_c_r_i_p_t_f_i_l_e  as  the  linker  script.  This script
           replaces  lldd's  default  linker  script  (rather  than
           adding  to it), so _c_o_m_m_a_n_d_f_i_l_e must specify everything
           necessary  to  describe   the   output   file.      If
           _s_c_r_i_p_t_f_i_l_e  does  not  exist in the current directory,
           "ld" looks for it in the directories specified by  any
           preceding --LL options.  Multiple --TT options accumulate.

       --uu _s_y_m_b_o_l
       ----uunnddeeffiinneedd==_s_y_m_b_o_l
           Force _s_y_m_b_o_l to be entered in the output  file  as  an
           undefined   symbol.   Doing  this  may,  for  example,
           trigger linking of additional  modules  from  standard
           libraries.   --uu  may be repeated with different option
           arguments to enter additional undefined symbols.  This
           option  is  equivalent  to  the "EXTERN" linker script
           command.

       --UUrr For anything other than C++ programs, this  option  is
           equivalent    to    --rr:   it   generates   relocatable
           output---i.e., an output file that can in  turn  serve
           as  input  to lldd.  When linking C++ programs, --UUrr _d_o_e_s
           resolve references to  constructors,  unlike  --rr.   It
           does not work to use --UUrr on files that were themselves
           linked with --UUrr; once the constructor table  has  been
           built,  it  cannot  be added to.  Use --UUrr only for the



binutils-2.17               2006-06-23                         11





LD(1)                 GNU Development Tools                 LD(1)


           last partial link, and --rr for the others.

       ----uunniiqquuee[[==_S_E_C_T_I_O_N]]
           Creates a separate  output  section  for  every  input
           section  matching _S_E_C_T_I_O_N, or if the optional wildcard
           _S_E_C_T_I_O_N argument is missing, for  every  orphan  input
           section.   An  orphan  section is one not specifically
           mentioned in a linker script.  You may use this option
           multiple  times  on the command line;  It prevents the
           normal merging of input sections with the  same  name,
           overriding  output  section  assignments  in  a linker
           script.

       --vv
       ----vveerrssiioonn
       --VV  Display the version number for lldd.  The --VV option also
           lists the supported emulations.

       --xx
       ----ddiissccaarrdd--aallll
           Delete all local symbols.

       --XX
       ----ddiissccaarrdd--llooccaallss
           Delete all temporary local symbols.  For most targets,
           this is all local symbols whose names begin with LL.

       --yy _s_y_m_b_o_l
       ----ttrraaccee--ssyymmbbooll==_s_y_m_b_o_l
           Print the name of each linked  file  in  which  _s_y_m_b_o_l
           appears.   This  option  may  be  given  any number of
           times.  On many systems it is necessary to prepend  an
           underscore.

           This  option  is  useful  when  you  have an undefined
           symbol in your link but don't know where the reference
           is coming from.

       --YY _p_a_t_h
           Add  _p_a_t_h  to  the  default library search path.  This
           option exists for Solaris compatibility.

       --zz _k_e_y_w_o_r_d
           The recognized keywords are:

           ccoommbbrreelloocc
               Combines multiple reloc sections and sorts them to
               make dynamic symbol lookup caching possible.

           ddeeffss
               Disallows   undefined  symbols  in  object  files.
               Undefined symbols in shared  libraries  are  still
               allowed.




binutils-2.17               2006-06-23                         12





LD(1)                 GNU Development Tools                 LD(1)


           eexxeeccssttaacckk
               Marks the object as requiring executable stack.

           iinniittffiirrsstt
               This  option  is  only  meaningful when building a
               shared object.  It marks the object  so  that  its
               runtime   initialization  will  occur  before  the
               runtime  initialization  of  any   other   objects
               brought   into  the  process  at  the  same  time.
               Similarly the runtime finalization of  the  object
               will  occur  after the runtime finalization of any
               other objects.

           iinntteerrppoossee
               Marks the object that its symbol table  interposes
               before all symbols but the primary executable.

           llooaaddffllttrr
               Marks   the  object  that its filters be processed
               immediately at runtime.

           mmuullddeeffss
               Allows multiple definitions.

           nnooccoommbbrreelloocc
               Disables multiple reloc sections combining.

           nnooccooppyyrreelloocc
               Disables production of copy relocs.

           nnooddeeffaauullttlliibb
               Marks the object that the search for  dependencies
               of  this  object  will  ignore any default library
               search paths.

           nnooddeelleettee
               Marks the object shouldn't be unloaded at runtime.

           nnooddllooppeenn
               Marks the object not available to "dlopen".

           nnoodduummpp
               Marks the object can not be dumped by "dldump".

           nnooeexxeeccssttaacckk
               Marks  the  object  as  not  requiring  executable
               stack.

           nnoorreellrroo
               Don't create an ELF "PT_GNU_RELRO" segment  header
               in the object.

           nnooww When  generating  an executable or shared library,
               mark it to tell the dynamic linker to resolve  all



binutils-2.17               2006-06-23                         13





LD(1)                 GNU Development Tools                 LD(1)


               symbols  when  the program is started, or when the
               shared library is linked to using dlopen,  instead
               of deferring function call resolution to the point
               when the function is first called.

           oorriiggiinn
               Marks the object may contain $ORIGIN.

           rreellrroo
               Create an ELF "PT_GNU_RELRO" segment header in the
               object.

           Other  keywords are ignored for Solaris compatibility.

       --(( _a_r_c_h_i_v_e_s --))
       ----ssttaarrtt--ggrroouupp _a_r_c_h_i_v_e_s ----eenndd--ggrroouupp
           The _a_r_c_h_i_v_e_s should be a list of archive files.   They
           may be either explicit file names, or --ll options.

           The  specified  archives are searched repeatedly until
           no new undefined references are created.  Normally, an
           archive  is searched only once in the order that it is
           specified on the command line.  If a  symbol  in  that
           archive  is  needed  to  resolve  an  undefined symbol
           referred to by an object in an  archive  that  appears
           later  on  the  command  line, the linker would not be
           able to  resolve  that  reference.   By  grouping  the
           archives,  they  all  be searched repeatedly until all
           possible references are resolved.

           Using this option has a significant performance  cost.
           It  is  best to use it only when there are unavoidable
           circular references between two or more archives.

       ----aacccceepptt--uunnkknnoowwnn--iinnppuutt--aarrcchh
       ----nnoo--aacccceepptt--uunnkknnoowwnn--iinnppuutt--aarrcchh
           Tells  the  linker  to  accept   input   files   whose
           architecture  cannot be recognised.  The assumption is
           that  the  user  knows  what  they   are   doing   and
           deliberately  wants  to  link  in  these unknown input
           files.  This was the default behaviour of the  linker,
           before  release  2.14.   The  default  behaviour  from
           release 2.14 onwards is to reject  such  input  files,
           and so the ----aacccceepptt--uunnkknnoowwnn--iinnppuutt--aarrcchh option has been
           added to restore the old behaviour.

       ----aass--nneeeeddeedd
       ----nnoo--aass--nneeeeddeedd
           This option affects ELF  DT_NEEDED  tags  for  dynamic
           libraries  mentioned  on  the  command  line after the
           ----aass--nneeeeddeedd option.  Normally, the linker will  add  a
           DT_NEEDED  tag  for  each dynamic library mentioned on
           the command line, regardless of whether the library is
           actually needed.  ----aass--nneeeeddeedd causes DT_NEEDED tags to



binutils-2.17               2006-06-23                         14





LD(1)                 GNU Development Tools                 LD(1)


           only be emitted for libraries that satisfy some symbol
           reference  from  regular objects which is undefined at
           the point that the library was linked.  ----nnoo--aass--nneeeeddeedd
           restores the default behaviour.

       ----aadddd--nneeeeddeedd
       ----nnoo--aadddd--nneeeeddeedd
           This option affects the treatment of dynamic libraries
           from ELF DT_NEEDED tags in dynamic libraries mentioned
           on  the command line after the ----nnoo--aadddd--nneeeeddeedd option.
           Normally, the linker will add a DT_NEEDED tag for each
           dynamic  library from DT_NEEDED tags.  ----nnoo--aadddd--nneeeeddeedd
           causes DT_NEEDED tags will never be emitted for  those
           libraries  from  DT_NEEDED tags. ----aadddd--nneeeeddeedd restores
           the default behaviour.

       --aasssseerrtt _k_e_y_w_o_r_d
           This option is ignored for SunOS compatibility.

       --BBddyynnaammiicc
       --ddyy
       --ccaallll__sshhaarreedd
           Link  against  dynamic  libraries.    This   is   only
           meaningful on platforms for which shared libraries are
           supported.  This option is  normally  the  default  on
           such platforms.  The different variants of this option
           are for compatibility with various systems.   You  may
           use this option multiple times on the command line: it
           affects library searching for --ll options which  follow
           it.

       --BBggrroouupp
           Set the "DF_1_GROUP" flag in the "DT_FLAGS_1" entry in
           the dynamic section.  This causes the  runtime  linker
           to  handle lookups in this object and its dependencies
           to   be   performed    only    inside    the    group.
           ----uunnrreessoollvveedd--ssyymmbboollss==rreeppoorrtt--aallll   is   implied.   This
           option is  only  meaningful  on  ELF  platforms  which
           support shared libraries.

       --BBssttaattiicc
       --ddnn
       --nnoonn__sshhaarreedd
       --ssttaattiicc
           Do  not  link  against shared libraries.  This is only
           meaningful on platforms for which shared libraries are
           supported.   The different variants of this option are
           for compatibility with various systems.  You  may  use
           this  option  multiple  times  on the command line: it
           affects library searching for --ll options which  follow
           it.         This       option       also       implies
           ----uunnrreessoollvveedd--ssyymmbboollss==rreeppoorrtt--aallll.  This option  can  be
           used  with  --sshhaarreedd.   Doing  so  means  that a shared
           library is being created but that all of the library's



binutils-2.17               2006-06-23                         15





LD(1)                 GNU Development Tools                 LD(1)


           external  references  must  be  resolved by pulling in
           entries from static libraries.

       --BBssyymmbboolliicc
           When creating a shared  library,  bind  references  to
           global  symbols  to  the  definition within the shared
           library, if any.   Normally,  it  is  possible  for  a
           program  linked  against  a shared library to override
           the definition within the shared library.  This option
           is  only  meaningful  on  ELF  platforms which support
           shared libraries.

       ----cchheecckk--sseeccttiioonnss
       ----nnoo--cchheecckk--sseeccttiioonnss
           Asks the linker _n_o_t to check section  addresses  after
           they  have  been  assigned  to  see  if  there are any
           overlaps.   Normally  the  linker  will  perform  this
           check,  and  if  it finds any overlaps it will produce
           suitable error messages.  The linker does know  about,
           and  does  make  allowances  for sections in overlays.
           The default behaviour can be  restored  by  using  the
           command line switch ----cchheecckk--sseeccttiioonnss.

       ----ccrreeff
           Output  a cross reference table.  If a linker map file
           is being  generated,  the  cross  reference  table  is
           printed  to the map file.  Otherwise, it is printed on
           the standard output.

           The format of the table is  intentionally  simple,  so
           that  it  may  be  easily  processed  by  a  script if
           necessary.  The symbols are  printed  out,  sorted  by
           name.  For each symbol, a list of file names is given.
           If the symbol is defined, the first file listed is the
           location  of  the  definition.   The  remaining  files
           contain references to the symbol.

       ----nnoo--ddeeffiinnee--ccoommmmoonn
           This option inhibits the assignment  of  addresses  to
           common      symbols.       The      script     command
           "INHIBIT_COMMON_ALLOCATION" has the same effect.

           The ----nnoo--ddeeffiinnee--ccoommmmoonn option  allows  decoupling  the
           decision  to  assign  addresses to Common symbols from
           the choice of the output file type; otherwise  a  non-
           Relocatable  output type forces assigning addresses to
           Common  symbols.   Using   ----nnoo--ddeeffiinnee--ccoommmmoonn   allows
           Common  symbols  that  are  referenced  from  a shared
           library to be assigned  addresses  only  in  the  main
           program.   This  eliminates the unused duplicate space
           in the shared library, and also prevents any  possible
           confusion  over  resolving to the wrong duplicate when
           there are many dynamic modules with specialized search
           paths for runtime symbol resolution.



binutils-2.17               2006-06-23                         16





LD(1)                 GNU Development Tools                 LD(1)


       ----ddeeffssyymm _s_y_m_b_o_l==_e_x_p_r_e_s_s_i_o_n
           Create  a global symbol in the output file, containing
           the absolute address given by _e_x_p_r_e_s_s_i_o_n.  You may use
           this  option  as  many  times  as  necessary to define
           multiple symbols in the command line.  A limited  form
           of  arithmetic is supported for the _e_x_p_r_e_s_s_i_o_n in this
           context: you may give a hexadecimal  constant  or  the
           name  of an existing symbol, or use "+" and "-" to add
           or subtract hexadecimal constants or symbols.  If  you
           need  more  elaborate  expressions, consider using the
           linker command language from a  script.   _N_o_t_e_:  there
           should  be  no  white space between _s_y_m_b_o_l, the equals
           sign ("=="), and _e_x_p_r_e_s_s_i_o_n.

       ----ddeemmaannggllee[[==_s_t_y_l_e]]
       ----nnoo--ddeemmaannggllee
           These options control whether to demangle symbol names
           in  error  messages and other output.  When the linker
           is told to demangle, it tries to present symbol  names
           in  a  readable fashion: it strips leading underscores
           if they are  used  by  the  object  file  format,  and
           converts  C++  mangled symbol names into user readable
           names.  Different compilers  have  different  mangling
           styles.  The optional demangling style argument can be
           used to choose an  appropriate  demangling  style  for
           your  compiler.   The  linker will demangle by default
           unless the environment variable CCOOLLLLEECCTT__NNOO__DDEEMMAANNGGLLEE is
           set.   These  options  may  be  used  to  override the
           default.

       ----ddyynnaammiicc--lliinnkkeerr _f_i_l_e
           Set the name of the  dynamic  linker.   This  is  only
           meaningful  when  generating  dynamically  linked  ELF
           executables.  The default dynamic linker  is  normally
           correct;  don't  use this unless you know what you are
           doing.

       ----ffaattaall--wwaarrnniinnggss
           Treat all warnings as errors.

       ----ffoorrccee--eexxee--ssuuffffiixx
           Make sure that an output file has a .exe suffix.

           If a successfully built fully linked output file  does
           not have a ".exe" or ".dll" suffix, this option forces
           the linker to copy the output file to one of the  same
           name  with a ".exe" suffix. This option is useful when
           using unmodified Unix makefiles on a Microsoft Windows
           host,  since  some  versions  of  Windows won't run an
           image unless it ends in a ".exe" suffix.

       ----nnoo--ggcc--sseeccttiioonnss
       ----ggcc--sseeccttiioonnss
           Enable garbage collection of  unused  input  sections.



binutils-2.17               2006-06-23                         17





LD(1)                 GNU Development Tools                 LD(1)


           It  is  ignored  on  targets  that do not support this
           option.  This option is not compatible  with  --rr.  The
           default  behaviour  (of  not  performing  this garbage
           collection)   can   be    restored    by    specifying
           ----nnoo--ggcc--sseeccttiioonnss on the command line.

       ----hheellpp
           Print  a  summary  of  the command-line options on the
           standard output and exit.

       ----ttaarrggeett--hheellpp
           Print a summary of all target specific options on  the
           standard output and exit.

       --MMaapp _m_a_p_f_i_l_e
           Print  a  link  map  to  the  file  _m_a_p_f_i_l_e.   See the
           description of the --MM option, above.

       ----nnoo--kkeeeepp--mmeemmoorryy
           lldd normally optimizes for speed over memory  usage  by
           caching  the  symbol  tables of input files in memory.
           This option tells lldd to instead  optimize  for  memory
           usage,  by  rereading  the symbol tables as necessary.
           This may be required if lldd runs out  of  memory  space
           while linking a large executable.

       ----nnoo--uunnddeeffiinneedd
       --zz ddeeffss
           Report   unresolved  symbol  references  from  regular
           object files.  This is done  even  if  the  linker  is
           creating  a  non-symbolic  shared library.  The switch
           ----[[nnoo--]]aallllooww--sshhlliibb--uunnddeeffiinneedd  controls  the  behaviour
           for  reporting  unresolved  references found in shared
           libraries being linked in.

       ----aallllooww--mmuullttiippllee--ddeeffiinniittiioonn
       --zz mmuullddeeffss
           Normally when a symbol is defined multiple times,  the
           linker  will report a fatal error. These options allow
           multiple definitions and the first definition will  be
           used.

       ----aallllooww--sshhlliibb--uunnddeeffiinneedd
       ----nnoo--aallllooww--sshhlliibb--uunnddeeffiinneedd
           Allows (the default) or disallows undefined symbols in
           shared  libraries.   This   switch   is   similar   to
           ----nnoo--uunnddeeffiinneedd except that it determines the behaviour
           when the undefined symbols are  in  a  shared  library
           rather than a regular object file.  It does not affect
           how undefined symbols  in  regular  object  files  are
           handled.

           The reason that ----aallllooww--sshhlliibb--uunnddeeffiinneedd is the default
           is that the shared library  being  specified  at  link



binutils-2.17               2006-06-23                         18





LD(1)                 GNU Development Tools                 LD(1)


           time  may not be the same as the one that is available
           at  load  time,  so  the  symbols  might  actually  be
           resolvable at load time.  Plus there are some systems,
           (eg BeOS) where undefined symbols in shared  libraries
           is  normal.   (The kernel patches them at load time to
           select which function  is  most  appropriate  for  the
           current  architecture.   This  is  used for example to
           dynamically select an  appropriate  memset  function).
           Apparently it is also normal for HPPA shared libraries
           to have undefined symbols.

       ----nnoo--uunnddeeffiinneedd--vveerrssiioonn
           Normally when a symbol has an undefined  version,  the
           linker  will  ignore it. This option disallows symbols
           with undefined version  and  a  fatal  error  will  be
           issued instead.

       ----ddeeffaauulltt--ssyymmvveerr
           Create  and  use a default symbol version (the soname)
           for unversioned exported symbols.

       ----ddeeffaauulltt--iimmppoorrtteedd--ssyymmvveerr
           Create and use a default symbol version  (the  soname)
           for unversioned imported symbols.

       ----nnoo--wwaarrnn--mmiissmmaattcchh
           Normally  lldd  will  give  an  error if you try to link
           together input files  that  are  mismatched  for  some
           reason,  perhaps  because  they have been compiled for
           different processors or  for  different  endiannesses.
           This  option  tells  lldd that it should silently permit
           such possible errors.  This option should only be used
           with  care,  in cases when you have taken some special
           action  that  ensures  that  the  linker  errors   are
           inappropriate.

       ----nnoo--wwhhoollee--aarrcchhiivvee
           Turn  off the effect of the ----wwhhoollee--aarrcchhiivvee option for
           subsequent archive files.

       ----nnooiinnhhiibbiitt--eexxeecc
           Retain the executable output file whenever it is still
           usable.   Normally,  the  linker  will  not produce an
           output file if it encounters errors  during  the  link
           process;  it exits without writing an output file when
           it issues any error whatsoever.

       --nnoossttddlliibb
           Only search library directories  explicitly  specified
           on the command line.  Library directories specified in
           linker scripts (including linker scripts specified  on
           the command line) are ignored.





binutils-2.17               2006-06-23                         19





LD(1)                 GNU Development Tools                 LD(1)


       ----ooffoorrmmaatt _o_u_t_p_u_t_-_f_o_r_m_a_t
           lldd  may be configured to support more than one kind of
           object file.  If your lldd is configured this  way,  you
           can  use  the  ----ooffoorrmmaatt  option to specify the binary
           format for the output object file.  Even  when  lldd  is
           configured  to support alternative object formats, you
           don't usually need to specify this, as  lldd  should  be
           configured  to  produce as a default output format the
           most usual format on each machine.  _o_u_t_p_u_t_-_f_o_r_m_a_t is a
           text string, the name of a particular format supported
           by the BFD libraries.  (You  can  list  the  available
           binary  formats  with oobbjjdduummpp --ii.)  The script command
           "OUTPUT_FORMAT" can also specify  the  output  format,
           but this option overrides it.

       --ppiiee
       ----ppiicc--eexxeeccuuttaabbllee
           Create  a  position  independent  executable.  This is
           currently only supported on ELF  platforms.   Position
           independent   executables   are   similar   to  shared
           libraries in that they are relocated  by  the  dynamic
           linker  to the virtual address the OS chooses for them
           (which can vary  between  invocations).   Like  normal
           dynamically  linked  executables  they can be executed
           and  symbols  defined  in  the  executable  cannot  be
           overridden by shared libraries.

       --qqmmaaggiicc
           This option is ignored for Linux compatibility.

       --QQyy This option is ignored for SVR4 compatibility.

       ----rreellaaxx
           An option with machine dependent effects.  This option
           is only supported on a few targets.

           On some platforms, the ----rreellaaxx option performs  global
           optimizations  that  become  possible  when the linker
           resolves addressing in the program, such  as  relaxing
           address modes and synthesizing new instructions in the
           output object file.

           On some platforms these link time global optimizations
           may   make   symbolic   debugging   of  the  resulting
           executable impossible.  This is known to be  the  case
           for  the  Matsushita  MN10200  and  MN10300  family of
           processors.

           On platforms where this is not supported,  ----rreellaaxx  is
           accepted, but ignored.

       ----rreettaaiinn--ssyymmbboollss--ffiillee _f_i_l_e_n_a_m_e
           Retain  _o_n_l_y  the symbols listed in the file _f_i_l_e_n_a_m_e,
           discarding all others.   _f_i_l_e_n_a_m_e  is  simply  a  flat



binutils-2.17               2006-06-23                         20





LD(1)                 GNU Development Tools                 LD(1)


           file,  with  one symbol name per line.  This option is
           especially useful in environments  (such  as  VxWorks)
           where  a  large  global  symbol  table  is accumulated
           gradually, to conserve run-time memory.

           ----rreettaaiinn--ssyymmbboollss--ffiillee  does  _n_o_t   discard   undefined
           symbols, or symbols needed for relocations.

           You may only specify ----rreettaaiinn--ssyymmbboollss--ffiillee once in the
           command line.  It overrides --ss and --SS.

       --rrppaatthh _d_i_r
           Add a directory to the runtime  library  search  path.
           This  is  used  when  linking  an  ELF executable with
           shared objects.  All --rrppaatthh arguments are concatenated
           and  passed  to the runtime linker, which uses them to
           locate shared objects at runtime.  The  --rrppaatthh  option
           is  also  used  when locating shared objects which are
           needed by shared objects explicitly  included  in  the
           link;  see  the description of the --rrppaatthh--lliinnkk option.
           If --rrppaatthh is not used when linking an ELF  executable,
           the contents of the environment variable "LD_RUN_PATH"
           will be used if it is defined.

           The --rrppaatthh option may  also  be  used  on  SunOS.   By
           default,  on  SunOS,  the  linker  will form a runtime
           search patch out of all the --LL options  it  is  given.
           If  a  --rrppaatthh  option is used, the runtime search path
           will be formed exclusively using the  --rrppaatthh  options,
           ignoring  the  --LL  options.   This  can be useful when
           using gcc, which adds many --LL options which may be  on
           NFS mounted filesystems.

           For  compatibility  with  other ELF linkers, if the --RR
           option is followed by a directory name, rather than  a
           file name, it is treated as the --rrppaatthh option.

       --rrppaatthh--lliinnkk _D_I_R
           When  using  ELF  or  SunOS,  one  shared  library may
           require another.  This happens when  an  "ld  -shared"
           link  includes  a  shared  library as one of the input
           files.

           When the linker  encounters  such  a  dependency  when
           doing  a  non-shared,  non-relocatable  link,  it will
           automatically  try  to  locate  the  required   shared
           library  and  include  it  in  the  link, if it is not
           included explicitly.  In such a case, the  --rrppaatthh--lliinnkk
           option  specifies  the  first  set  of  directories to
           search.  The --rrppaatthh--lliinnkk option may specify a sequence
           of  directory  names  either  by  specifying a list of
           names separated by colons, or  by  appearing  multiple
           times.




binutils-2.17               2006-06-23                         21





LD(1)                 GNU Development Tools                 LD(1)


           This   option  should  be  used  with  caution  as  it
           overrides the search path  that  may  have  been  hard
           compiled  into  a shared library. In such a case it is
           possible to use  unintentionally  a  different  search
           path than the runtime linker would do.

           The  linker  uses the following search paths to locate
           required shared libraries.

           1.  Any directories specified by --rrppaatthh--lliinnkk  options.

           2.  Any  directories specified by --rrppaatthh options.  The
               difference between --rrppaatthh and --rrppaatthh--lliinnkk is  that
               directories   specified   by  --rrppaatthh  options  are
               included in the executable and  used  at  runtime,
               whereas  the  --rrppaatthh--lliinnkk option is only effective
               at link time. It is for the native linker only.

           3.  On an ELF system, if the --rrppaatthh  and  "rpath-link"
               options  were not used, search the contents of the
               environment variable "LD_RUN_PATH". It is for  the
               native linker only.

           4.  On  SunOS,  if  the  --rrppaatthh  option  was not used,
               search any directories specified using --LL options.

           5.  For   a   native   linker,  the  contents  of  the
               environment variable "LD_LIBRARY_PATH".

           6.  For  a  native  ELF  linker,  the  directories  in
               "DT_RUNPATH" or "DT_RPATH" of a shared library are
               searched for shared libraries needed  by  it.  The
               "DT_RPATH"  entries  are  ignored  if "DT_RUNPATH"
               entries exist.

           7.  The  default  directories,   normally   _/_l_i_b   and
               _/_u_s_r_/_l_i_b.

           8.  For  a native linker on an ELF system, if the file
               _/_e_t_c_/_l_d_._s_o_._c_o_n_f exists, the  list  of  directories
               found in that file.

           If  the  required  shared  library  is  not found, the
           linker will issue a  warning  and  continue  with  the
           link.

       --sshhaarreedd
       --BBsshhaarreeaabbllee
           Create  a  shared  library.   This  is  currently only
           supported on  ELF,  XCOFF  and  SunOS  platforms.   On
           SunOS,  the  linker will automatically create a shared
           library if the --ee option is not  used  and  there  are
           undefined symbols in the link.




binutils-2.17               2006-06-23                         22





LD(1)                 GNU Development Tools                 LD(1)


       ----ssoorrtt--ccoommmmoonn
           This  option  tells  lldd  to sort the common symbols by
           size when it places them  in  the  appropriate  output
           sections.   First  come all the one byte symbols, then
           all the two byte, then all the  four  byte,  and  then
           everything  else.   This  is  to  prevent gaps between
           symbols due to alignment constraints.

       ----ssoorrtt--sseeccttiioonn nnaammee
           This option will apply "SORT_BY_NAME" to all  wildcard
           section patterns in the linker script.

       ----ssoorrtt--sseeccttiioonn aalliiggnnmmeenntt
           This  option  will  apply  "SORT_BY_ALIGNMENT"  to all
           wildcard section patterns in the linker script.

       ----sspplliitt--bbyy--ffiillee [[_s_i_z_e]]
           Similar to ----sspplliitt--bbyy--rreelloocc but creates a  new  output
           section  for  each  input  file  when _s_i_z_e is reached.
           _s_i_z_e defaults to a size of 1 if not given.

       ----sspplliitt--bbyy--rreelloocc [[_c_o_u_n_t]]
           Tries to creates extra sections in the output file  so
           that  no  single  output  section in the file contains
           more than _c_o_u_n_t  relocations.   This  is  useful  when
           generating huge relocatable files for downloading into
           certain real time kernels with the  COFF  object  file
           format;  since  COFF  cannot represent more than 65535
           relocations in a single section.  Note that this  will
           fail  to  work  with  object file formats which do not
           support arbitrary sections.  The linker will not split
           up individual input sections for redistribution, so if
           a  single  input  section  contains  more  than  _c_o_u_n_t
           relocations  one output section will contain that many
           relocations.  _c_o_u_n_t defaults to a value of 32768.

       ----ssttaattss
           Compute and display statistics about the operation  of
           the linker, such as execution time and memory usage.

       ----ssyyssrroooott==_d_i_r_e_c_t_o_r_y
           Use   _d_i_r_e_c_t_o_r_y   as  the  location  of  the  sysroot,
           overriding the configure-time default.  This option is
           only  supported  by linkers that were configured using
           ----wwiitthh--ssyyssrroooott.

       ----ttrraaddiittiioonnaall--ffoorrmmaatt
           For some targets, the output of  lldd  is  different  in
           some  ways  from  the  output of some existing linker.
           This switch requests lldd to use the traditional  format
           instead.

           For  example,  on SunOS, lldd combines duplicate entries
           in the symbol string table.  This can reduce the  size



binutils-2.17               2006-06-23                         23





LD(1)                 GNU Development Tools                 LD(1)


           of  an  output file with full debugging information by
           over  30  percent.   Unfortunately,  the  SunOS  "dbx"
           program  can not read the resulting program ("gdb" has
           no trouble).  The ----ttrraaddiittiioonnaall--ffoorrmmaatt switch tells lldd
           to not combine duplicate entries.

       ----sseeccttiioonn--ssttaarrtt _s_e_c_t_i_o_n_n_a_m_e==_o_r_g
           Locate  a  section  in the output file at the absolute
           address given by _o_r_g.  You may use this option as many
           times  as necessary to locate multiple sections in the
           command  line.   _o_r_g  must  be  a  single  hexadecimal
           integer; for compatibility with other linkers, you may
           omit  the   leading   00xx   usually   associated   with
           hexadecimal  values.   _N_o_t_e_:  there should be no white
           space between _s_e_c_t_i_o_n_n_a_m_e, the equals sign ("=="),  and
           _o_r_g.

       --TTbbssss _o_r_g
       --TTddaattaa _o_r_g
       --TTtteexxtt _o_r_g
           Same  as  --section-start,  with  ".bss",  ".data"  or
           ".text" as the _s_e_c_t_i_o_n_n_a_m_e.

       ----uunnrreessoollvveedd--ssyymmbboollss==_m_e_t_h_o_d
           Determine how to handle unresolved symbols.  There are
           four possible values for mmeetthhoodd:

           iiggnnoorree--aallll
               Do not report any unresolved symbols.

           rreeppoorrtt--aallll
               Report   all  unresolved  symbols.   This  is  the
               default.

           iiggnnoorree--iinn--oobbjjeecctt--ffiilleess
               Report unresolved symbols that  are  contained  in
               shared  libraries,  but  ignore  them if they come
               from regular object files.

           iiggnnoorree--iinn--sshhaarreedd--lliibbss
               Report unresolved symbols that come  from  regular
               object  files,  but  ignore them if they come from
               shared  libraries.   This  can  be   useful   when
               creating a dynamic binary and it is known that all
               the shared libraries that it should be referencing
               are included on the linker's command line.

           The  behaviour  for  shared libraries on their own can
           also be controlled by the ----[[nnoo--]]aallllooww--sshhlliibb--uunnddeeffiinneedd
           option.

           Normally the linker will generate an error message for
           each  reported  unresolved  symbol  but   the   option
           ----wwaarrnn--uunnrreessoollvveedd--ssyymmbboollss   can   change   this  to  a



binutils-2.17               2006-06-23                         24





LD(1)                 GNU Development Tools                 LD(1)


           warning.

       ----ddllll--vveerrbboossee
       ----vveerrbboossee
           Display the version number for lldd and list the  linker
           emulations  supported.   Display which input files can
           and cannot be opened.  Display the linker script being
           used by the linker.

       ----vveerrssiioonn--ssccrriipptt==_v_e_r_s_i_o_n_-_s_c_r_i_p_t_f_i_l_e
           Specify  the  name  of a version script to the linker.
           This is typically used when creating shared  libraries
           to  specify  additional  information about the version
           hierarchy for the library being created.  This  option
           is  only  meaningful  on  ELF  platforms which support
           shared libraries.

       ----wwaarrnn--ccoommmmoonn
           Warn when a common symbol  is  combined  with  another
           common  symbol  or  with  a  symbol  definition.  Unix
           linkers  allow  this  somewhat  sloppy  practise,  but
           linkers  on some other operating systems do not.  This
           option allows you  to  find  potential  problems  from
           combining   global  symbols.   Unfortunately,  some  C
           libraries use this  practise,  so  you  may  get  some
           warnings  about symbols in the libraries as well as in
           your programs.

           There are three kinds of global  symbols,  illustrated
           here by C examples:

           iinntt ii == 11;;
               A  definition,  which goes in the initialized data
               section of the output file.

           eexxtteerrnn iinntt ii;;
               An undefined reference, which  does  not  allocate
               space.   There  must  be  either a definition or a
               common symbol for the variable somewhere.

           iinntt ii;;
               A common symbol.  If there are only (one or  more)
               common  symbols  for  a  variable,  it goes in the
               uninitialized data area of the output  file.   The
               linker merges multiple common symbols for the same
               variable into a single symbol.   If  they  are  of
               different  sizes,  it picks the largest size.  The
               linker turns a common symbol into  a  declaration,
               if there is a definition of the same variable.

           The  ----wwaarrnn--ccoommmmoonn  option  can  produce five kinds of
           warnings.  Each warning consists of a pair  of  lines:
           the  first  describes the symbol just encountered, and
           the second describes the previous  symbol  encountered



binutils-2.17               2006-06-23                         25





LD(1)                 GNU Development Tools                 LD(1)


           with  the  same  name.  One or both of the two symbols
           will be a common symbol.

           1.  Turning a common symbol into a reference,  because
               there is already a definition for the symbol.

                       <file>(<section>): warning: common of `<symbol>'
                          overridden by definition
                       <file>(<section>): warning: defined here

           2.  Turning  a common symbol into a reference, because
               a later definition for the symbol is  encountered.
               This is the same as the previous case, except that
               the symbols are encountered in a different  order.

                       <file>(<section>): warning: definition of `<symbol>'
                          overriding common
                       <file>(<section>): warning: common is here

           3.  Merging a common symbol with a previous same-sized
               common symbol.

                       <file>(<section>): warning: multiple common
                          of `<symbol>'
                       <file>(<section>): warning: previous common is here

           4.  Merging a common symbol  with  a  previous  larger
               common symbol.

                       <file>(<section>): warning: common of `<symbol>'
                          overridden by larger common
                       <file>(<section>): warning: larger common is here

           5.  Merging  a  common  symbol with a previous smaller
               common symbol.  This is the same as  the  previous
               case, except that the symbols are encountered in a
               different order.

                       <file>(<section>): warning: common of `<symbol>'
                          overriding smaller common
                       <file>(<section>): warning: smaller common is here

       ----wwaarrnn--ccoonnssttrruuccttoorrss
           Warn if any global constructors  are  used.   This  is
           only  useful  for  a  few  object  file  formats.  For
           formats like COFF or ELF, the linker  can  not  detect
           the use of global constructors.

       ----wwaarrnn--mmuullttiippllee--ggpp
           Warn if multiple global pointer values are required in
           the output file.  This is only meaningful for  certain
           processors,  such  as  the  Alpha.  Specifically, some
           processors put large-valued  constants  in  a  special
           section.   A  special  register  (the  global pointer)



binutils-2.17               2006-06-23                         26





LD(1)                 GNU Development Tools                 LD(1)


           points into  the  middle  of  this  section,  so  that
           constants  can  be  loaded  efficiently  via  a  base-
           register relative addressing mode.  Since  the  offset
           in base-register relative mode is fixed and relatively
           small (e.g., 16 bits), this limits the maximum size of
           the  constant  pool.   Thus,  in large programs, it is
           often necessary to use multiple global pointer  values
           in order to be able to address all possible constants.
           This option causes a warning  to  be  issued  whenever
           this case occurs.

       ----wwaarrnn--oonnccee
           Only  warn once for each undefined symbol, rather than
           once per module which refers to it.

       ----wwaarrnn--sseeccttiioonn--aalliiggnn
           Warn if the address of an output  section  is  changed
           because  of  alignment.  Typically, the alignment will
           be set by an input section.  The address will only  be
           changed  if  it  not explicitly specified; that is, if
           the  "SECTIONS"  command  does  not  specify  a  start
           address for the section.

       ----wwaarrnn--sshhaarreedd--tteexxttrreell
           Warn  if  the  linker  adds  a  DT_TEXTREL to a shared
           object.

       ----wwaarrnn--uunnrreessoollvveedd--ssyymmbboollss
           If the linker is going to report an unresolved  symbol
           (see the option ----uunnrreessoollvveedd--ssyymmbboollss) it will normally
           generate an error.  This option makes  it  generate  a
           warning instead.

       ----eerrrroorr--uunnrreessoollvveedd--ssyymmbboollss
           This   restores  the  linker's  default  behaviour  of
           generating errors  when  it  is  reporting  unresolved
           symbols.

       ----wwhhoollee--aarrcchhiivvee
           For  each  archive mentioned on the command line after
           the ----wwhhoollee--aarrcchhiivvee option, include every object  file
           in  the archive in the link, rather than searching the
           archive  for  the  required  object  files.   This  is
           normally  used  to  turn an archive file into a shared
           library, forcing every object to be  included  in  the
           resulting  shared  library.   This  option may be used
           more than once.

           Two notes when using this option from gcc: First,  gcc
           doesn't  know  about  this  option, so you have to use
           --WWll,,--wwhhoollee--aarrcchhiivvee.   Second,  don't  forget  to   use
           --WWll,,--nnoo--wwhhoollee--aarrcchhiivvee  after  your  list  of archives,
           because gcc will add its own list of archives to  your
           link and you may not want this flag to affect those as



binutils-2.17               2006-06-23                         27





LD(1)                 GNU Development Tools                 LD(1)


           well.

       ----wwrraapp _s_y_m_b_o_l
           Use a wrapper  function  for  _s_y_m_b_o_l.   Any  undefined
           reference    to    _s_y_m_b_o_l    will   be   resolved   to
           "__wrap_symbol".    Any   undefined    reference    to
           "__real_symbol" will be resolved to _s_y_m_b_o_l.

           This  can  be  used  to provide a wrapper for a system
           function.   The  wrapper  function  should  be  called
           "__wrap_symbol".   If  it  wishes  to  call the system
           function, it should call "__real_symbol".

           Here is a trivial example:

                   void *
                   __wrap_malloc (size_t c)
                   {
                     printf ("malloc called with %zu\n", c);
                     return __real_malloc (c);
                   }

           If you link other code with  this  file  using  ----wwrraapp
           mmaalllloocc,  then  all  calls  to  "malloc"  will call the
           function  "__wrap_malloc"  instead.    The   call   to
           "__real_malloc"  in "__wrap_malloc" will call the real
           "malloc" function.

           You may wish to provide a "__real_malloc" function  as
           well,  so  that  links  without the ----wwrraapp option will
           succeed.  If you do  this,  you  should  not  put  the
           definition  of  "__real_malloc"  in  the  same file as
           "__wrap_malloc"; if you do, the assembler may  resolve
           the  call before the linker has a chance to wrap it to
           "malloc".

       ----eehh--ffrraammee--hhddrr
           Request creation of ".eh_frame_hdr"  section  and  ELF
           "PT_GNU_EH_FRAME" segment header.

       ----eennaabbllee--nneeww--ddttaaggss
       ----ddiissaabbllee--nneeww--ddttaaggss
           This  linker  can  create the new dynamic tags in ELF.
           But the older ELF systems may not understand them.  If
           you  specify ----eennaabbllee--nneeww--ddttaaggss, the dynamic tags will
           be   created    as    needed.     If    you    specify
           ----ddiissaabbllee--nneeww--ddttaaggss,  no  new  dynamic  tags  will  be
           created. By default, the  new  dynamic  tags  are  not
           created.  Note  that  those options are only available
           for ELF systems.

       ----hhaasshh--ssiizzee==_n_u_m_b_e_r
           Set the default size of the linker's hash tables to  a
           prime  number  close to _n_u_m_b_e_r.  Increasing this value



binutils-2.17               2006-06-23                         28





LD(1)                 GNU Development Tools                 LD(1)


           can reduce the length of time it takes the  linker  to
           perform  its  tasks,  at the expense of increasing the
           linker's memory requirements.  Similarly reducing this
           value  can  reduce  the  memory  requirements  at  the
           expense of speed.

       ----rreedduuccee--mmeemmoorryy--oovveerrhheeaaddss
           This option reduces memory requirements at ld runtime,
           at  the expense of linking speed.  This was introduced
           to select the old O(n^2) algorithm for link  map  file
           generation,  rather  than the new O(n) algorithm which
           uses about 40% more memory for symbol storage.

           Another effect of the switch is  to  set  the  default
           hash  table  size to 1021, which again saves memory at
           the cost of lengthening the linker's run  time.   This
           is not done however if the ----hhaasshh--ssiizzee switch has been
           used.

           The ----rreedduuccee--mmeemmoorryy--oovveerrhheeaaddss switch may  be  also  be
           used  to  enable other tradeoffs in future versions of
           the linker.

       The i386 PE linker  supports  the  --sshhaarreedd  option,  which
       causes the output to be a dynamically linked library (DLL)
       instead of a  normal  executable.   You  should  name  the
       output "*.dll" when you use this option.  In addition, the
       linker fully supports the standard  "*.def"  files,  which
       may be specified on the linker command line like an object
       file (in fact,  it  should  precede  archives  it  exports
       symbols from, to ensure that they get linked in, just like
       a normal object file).

       In addition to the options common to all targets, the i386
       PE linker support additional command line options that are
       specific to the i386 PE target.  Options that take  values
       may be separated from their values by either a space or an
       equals sign.

       ----aadddd--ssttddccaallll--aalliiaass
           If given, symbols with a stdcall suffix (@_n_n) will  be
           exported  as-is  and  also  with  the suffix stripped.
           [This option is specific to the i386 PE targeted  port
           of the linker]

       ----bbaassee--ffiillee _f_i_l_e
           Use  _f_i_l_e  as  the name of a file in which to save the
           base addresses  of  all  the  relocations  needed  for
           generating  DLLs  with  _d_l_l_t_o_o_l.   [This is an i386 PE
           specific option]

       ----ddllll
           Create a DLL instead of a regular executable.  You may
           also  use  --sshhaarreedd  or  specify a "LIBRARY" in a given



binutils-2.17               2006-06-23                         29





LD(1)                 GNU Development Tools                 LD(1)


           ".def" file.  [This option is specific to the i386  PE
           targeted port of the linker]

       ----eennaabbllee--ssttddccaallll--ffiixxuupp
       ----ddiissaabbllee--ssttddccaallll--ffiixxuupp
           If  the link finds a symbol that it cannot resolve, it
           will attempt to do  "fuzzy  linking"  by  looking  for
           another defined symbol that differs only in the format
           of the symbol name (cdecl vs stdcall) and will resolve
           that symbol by linking to the match.  For example, the
           undefined  symbol  "_foo"  might  be  linked  to   the
           function  "_foo@12", or the undefined symbol "_bar@16"
           might be linked to  the  function  "_bar".   When  the
           linker  does  this,  it  prints  a  warning,  since it
           normally should have failed  to  link,  but  sometimes
           import  libraries  generated from third-party dlls may
           need this  feature  to  be  usable.   If  you  specify
           ----eennaabbllee--ssttddccaallll--ffiixxuupp,  this feature is fully enabled
           and  warnings  are  not  printed.   If   you   specify
           ----ddiissaabbllee--ssttddccaallll--ffiixxuupp,  this feature is disabled and
           such mismatches are considered to  be  errors.   [This
           option is specific to the i386 PE targeted port of the
           linker]

       ----eexxppoorrtt--aallll--ssyymmbboollss
           If given, all global symbols in the  objects  used  to
           build  a  DLL  will be exported by the DLL.  Note that
           this is the default if there otherwise wouldn't be any
           exported   symbols.    When   symbols  are  explicitly
           exported via DEF  files  or  implicitly  exported  via
           function  attributes,  the  default  is  to not export
           anything else unless this option is given.  Note  that
           the     symbols    "DllMain@12",    "DllEntryPoint@0",
           "DllMainCRTStartup@12", and "impure_ptr" will  not  be
           automatically  exported.   Also, symbols imported from
           other DLLs will not be re-exported, nor  will  symbols
           specifying  the  DLL's  internal  layout such as those
           beginning with "_head_" or ending with  "_iname".   In
           addition,   no   symbols  from  "libgcc",  "libstd++",
           "libmingw32", or "crtX.o" will be  exported.   Symbols
           whose  names begin with "__rtti_" or "__builtin_" will
           not be exported, to  help  with  C++  DLLs.   Finally,
           there  is  an extensive list of cygwin-private symbols
           that are not exported (obviously, this applies on when
           building  DLLs  for  cygwin  targets).   These cygwin-
           excludes         are:          "_cygwin_dll_entry@12",
           "_cygwin_crt0_common@8",
           "_cygwin_noncygwin_dll_entry@12",            "_fmode",
           "_impure_ptr", "cygwin_attach_dll", "cygwin_premain0",
           "cygwin_premain1",                  "cygwin_premain2",
           "cygwin_premain3",  and  "environ".   [This  option is
           specific to the i386 PE targeted port of the linker]





binutils-2.17               2006-06-23                         30





LD(1)                 GNU Development Tools                 LD(1)


       ----eexxcclluuddee--ssyymmbboollss _s_y_m_b_o_l,,_s_y_m_b_o_l,,......
           Specifies a  list  of  symbols  which  should  not  be
           automatically  exported.   The  symbol  names  may  be
           delimited  by  commas  or  colons.   [This  option  is
           specific to the i386 PE targeted port of the linker]

       ----ffiillee--aalliiggnnmmeenntt
           Specify the file alignment.  Sections in the file will
           always begin at file offsets which  are  multiples  of
           this  number.   This defaults to 512.  [This option is
           specific to the i386 PE targeted port of the linker]

       ----hheeaapp _r_e_s_e_r_v_e
       ----hheeaapp _r_e_s_e_r_v_e,,_c_o_m_m_i_t
           Specify  the  amount  of  memory   to   reserve   (and
           optionally  commit)  to  be  used  as  heap  for  this
           program.  The default is 1Mb reserved,  4K  committed.
           [This  option is specific to the i386 PE targeted port
           of the linker]

       ----iimmaaggee--bbaassee _v_a_l_u_e
           Use _v_a_l_u_e as the base address of your program or  dll.
           This  is  the lowest memory location that will be used
           when your program or dll is  loaded.   To  reduce  the
           need to relocate and improve performance of your dlls,
           each should have a unique base address and not overlap
           any   other   dlls.    The  default  is  0x400000  for
           executables, and 0x10000000 for dlls.  [This option is
           specific to the i386 PE targeted port of the linker]

       ----kkiillll--aatt
           If  given, the stdcall suffixes (@_n_n) will be stripped
           from symbols before they are exported.   [This  option
           is  specific  to  the  i386  PE  targeted  port of the
           linker]

       ----llaarrggee--aaddddrreessss--aawwaarree
           If given, the appropriate bit in the  "Charateristics"
           field  of the COFF header is set to indicate that this
           executable supports virtual addresses greater  than  2
           gigabytes.  This should be used in conjuction with the
           /3GB  or  /USERVA=_v_a_l_u_e  megabytes   switch   in   the
           "[operating   systems]"   section   of  the  BOOT.INI.
           Otherwise, this bit has no effect.   [This  option  is
           specific to PE targeted ports of the linker]

       ----mmaajjoorr--iimmaaggee--vveerrssiioonn _v_a_l_u_e
           Sets   the   major  number  of  the  "image  version".
           Defaults to 1.  [This option is specific to  the  i386
           PE targeted port of the linker]

       ----mmaajjoorr--ooss--vveerrssiioonn _v_a_l_u_e
           Sets  the  major number of the "os version".  Defaults
           to 4.   [This  option  is  specific  to  the  i386  PE



binutils-2.17               2006-06-23                         31





LD(1)                 GNU Development Tools                 LD(1)


           targeted port of the linker]

       ----mmaajjoorr--ssuubbssyysstteemm--vveerrssiioonn _v_a_l_u_e
           Sets  the  major  number  of  the "subsystem version".
           Defaults to 4.  [This option is specific to  the  i386
           PE targeted port of the linker]

       ----mmiinnoorr--iimmaaggee--vveerrssiioonn _v_a_l_u_e
           Sets   the   minor  number  of  the  "image  version".
           Defaults to 0.  [This option is specific to  the  i386
           PE targeted port of the linker]

       ----mmiinnoorr--ooss--vveerrssiioonn _v_a_l_u_e
           Sets  the  minor number of the "os version".  Defaults
           to 0.   [This  option  is  specific  to  the  i386  PE
           targeted port of the linker]

       ----mmiinnoorr--ssuubbssyysstteemm--vveerrssiioonn _v_a_l_u_e
           Sets  the  minor  number  of  the "subsystem version".
           Defaults to 0.  [This option is specific to  the  i386
           PE targeted port of the linker]

       ----oouuttppuutt--ddeeff _f_i_l_e
           The  linker  will  create  the  file  _f_i_l_e  which will
           contain a DEF file corresponding to the DLL the linker
           is  generating.  This DEF file (which should be called
           "*.def") may be used to create an import library  with
           "dlltool"   or   may   be   used  as  a  reference  to
           automatically or implicitly exported  symbols.   [This
           option is specific to the i386 PE targeted port of the
           linker]

       ----oouutt--iimmpplliibb _f_i_l_e
           The linker  will  create  the  file  _f_i_l_e  which  will
           contain  an  import  lib  corresponding to the DLL the
           linker is generating. This import lib (which should be
           called  "*.dll.a" or "*.a" may be used to link clients
           against the generated DLL;  this  behaviour  makes  it
           possible  to  skip a separate "dlltool" import library
           creation step.  [This option is specific to  the  i386
           PE targeted port of the linker]

       ----eennaabbllee--aauuttoo--iimmaaggee--bbaassee
           Automatically  choose  the image base for DLLs, unless
           one is specified using  the  "--image-base"  argument.
           By  using  a hash generated from the dllname to create
           unique image bases for each DLL, in-memory  collisions
           and  relocations which can delay program execution are
           avoided.  [This option is  specific  to  the  i386  PE
           targeted port of the linker]

       ----ddiissaabbllee--aauuttoo--iimmaaggee--bbaassee
           Do not automatically generate a unique image base.  If
           there is no user-specified image base ("--image-base")



binutils-2.17               2006-06-23                         32





LD(1)                 GNU Development Tools                 LD(1)


           then  use  the  platform  default.   [This  option  is
           specific to the i386 PE targeted port of the linker]

       ----ddllll--sseeaarrcchh--pprreeffiixx _s_t_r_i_n_g
           When linking dynamically to a dll  without  an  import
           library,   search   for   "<string><basename>.dll"  in
           preference  to  "lib<basename>.dll".  This   behaviour
           allows  easy  distinction  between  DLLs built for the
           various "subplatforms": native, cygwin, uwin, pw, etc.
           For    instance,    cygwin    DLLs    typically    use
           "--dll-search-prefix=cyg".  [This option  is  specific
           to the i386 PE targeted port of the linker]

       ----eennaabbllee--aauuttoo--iimmppoorrtt
           Do    sophisticated    linking    of    "_symbol"   to
           "__imp__symbol" for DATA imports from DLLs, and create
           the  necessary  thunking  symbols  when  building  the
           import libraries with those DATA exports. Note: Use of
           the   'auto-import'  extension  will  cause  the  text
           section of the image file to be  made  writable.  This
           does  not  conform to the PE-COFF format specification
           published by Microsoft.

           Using 'auto-import' generally will 'just work' --  but
           sometimes you may see this message:

           "variable  '<var>' can't be auto-imported. Please read
           the documentation for ld's "--enable-auto-import"  for
           details."

           This message occurs when some (sub)expression accesses
           an  address  ultimately  given  by  the  sum  of   two
           constants   (Win32  import  tables  only  allow  one).
           Instances where this may  occur  include  accesses  to
           member fields of struct variables imported from a DLL,
           as well as  using  a  constant  index  into  an  array
           variable  imported from a DLL.  Any multiword variable
           (arrays, structs, long long,  etc)  may  trigger  this
           error  condition.   However,  regardless  of the exact
           data type of the offending exported variable, ld  will
           always detect it, issue the warning, and exit.

           There  are  several  ways  to address this difficulty,
           regardless of the data type of the exported variable:

           One  way  is  to   use   --enable-runtime-pseudo-reloc
           switch.  This  leaves the task of adjusting references
           in your client code for runtime environment,  so  this
           method  works  only  when runtime environment supports
           this feature.

           A second solution is to force one of  the  'constants'
           to   be  a  variable  --  that  is,  unknown  and  un-
           optimizable at compile time.  For  arrays,  there  are



binutils-2.17               2006-06-23                         33





LD(1)                 GNU Development Tools                 LD(1)


           two  possibilities:  a)  make the indexee (the array's
           address) a variable, or b) make the 'constant' index a
           variable.  Thus:

                   extern type extern_array[];
                   extern_array[1] -->
                      { volatile type *t=extern_array; t[1] }

           or

                   extern type extern_array[];
                   extern_array[1] -->
                      { volatile int t=1; extern_array[t] }

           For  structs (and most other multiword data types) the
           only option is to make the struct itself (or the  long
           long, or the ...) variable:

                   extern struct s extern_struct;
                   extern_struct.field -->
                      { volatile struct s *t=&extern_struct; t->field }

           or

                   extern long long extern_ll;
                   extern_ll -->
                     { volatile long long * local_ll=&extern_ll; *local_ll }

           A  third  method of dealing with this difficulty is to
           abandon 'auto-import' for  the  offending  symbol  and
           mark  it  with  "__declspec(dllimport)".   However, in
           practise that requires using compile-time #defines  to
           indicate  whether  you  are  building  a DLL, building
           client code that will  link  to  the  DLL,  or  merely
           building/linking  to a static library.   In making the
           choice between the various methods  of  resolving  the
           'direct  address  with  constant  offset' problem, you
           should consider typical real-world usage:

           Original:

                   --foo.h
                   extern int arr[];
                   --foo.c
                   #include "foo.h"
                   void main(int argc, char **argv){
                     printf("%d\n",arr[1]);
                   }

           Solution 1:







binutils-2.17               2006-06-23                         34





LD(1)                 GNU Development Tools                 LD(1)


                   --foo.h
                   extern int arr[];
                   --foo.c
                   #include "foo.h"
                   void main(int argc, char **argv){
                     /* This workaround is for win32 and cygwin; do not "optimize" */
                     volatile int *parr = arr;
                     printf("%d\n",parr[1]);
                   }

           Solution 2:

                   --foo.h
                   /* Note: auto-export is assumed (no __declspec(dllexport)) */
                   #if (defined(_WIN32) || defined(__CYGWIN__)) && \
                     !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
                   #define FOO_IMPORT __declspec(dllimport)
                   #else
                   #define FOO_IMPORT
                   #endif
                   extern FOO_IMPORT int arr[];
                   --foo.c
                   #include "foo.h"
                   void main(int argc, char **argv){
                     printf("%d\n",arr[1]);
                   }

           A fourth way to avoid this problem is to re-code  your
           library  to  use  a functional interface rather than a
           data  interface  for  the  offending  variables  (e.g.
           _s_e_t___f_o_o_(_)  and  _g_e_t___f_o_o_(_)  accessor functions).  [This
           option is specific to the i386 PE targeted port of the
           linker]

       ----ddiissaabbllee--aauuttoo--iimmppoorrtt
           Do   not   attempt  to  do  sophisticated  linking  of
           "_symbol" to "__imp__symbol"  for  DATA  imports  from
           DLLs.   [This  option  is  specific  to  the  i386  PE
           targeted port of the linker]

       ----eennaabbllee--rruunnttiimmee--ppsseeuuddoo--rreelloocc
           If  your  code  contains  expressions   described   in
           --enable-auto-import  section,  that  is, DATA imports
           from DLL with non-zero offset, this switch will create
           a  vector of 'runtime pseudo relocations' which can be
           used by runtime environment to  adjust  references  to
           such  data  in  your  client  code.   [This  option is
           specific to the i386 PE targeted port of the linker]

       ----ddiissaabbllee--rruunnttiimmee--ppsseeuuddoo--rreelloocc
           Do not create pseudo relocations for  non-zero  offset
           DATA  imports  from DLLs.  This is the default.  [This
           option is specific to the i386 PE targeted port of the
           linker]



binutils-2.17               2006-06-23                         35





LD(1)                 GNU Development Tools                 LD(1)


       ----eennaabbllee--eexxttrraa--ppee--ddeebbuugg
           Show  additional  debug  info  related  to auto-import
           symbol thunking.  [This option is specific to the i386
           PE targeted port of the linker]

       ----sseeccttiioonn--aalliiggnnmmeenntt
           Sets  the  section alignment.  Sections in memory will
           always begin at addresses which are a multiple of this
           number.  Defaults to 0x1000.  [This option is specific
           to the i386 PE targeted port of the linker]

       ----ssttaacckk _r_e_s_e_r_v_e
       ----ssttaacckk _r_e_s_e_r_v_e,,_c_o_m_m_i_t
           Specify  the  amount  of  memory   to   reserve   (and
           optionally  commit)  to  be  used  as  stack  for this
           program.  The default is 2Mb reserved,  4K  committed.
           [This  option is specific to the i386 PE targeted port
           of the linker]

       ----ssuubbssyysstteemm _w_h_i_c_h
       ----ssuubbssyysstteemm _w_h_i_c_h::_m_a_j_o_r
       ----ssuubbssyysstteemm _w_h_i_c_h::_m_a_j_o_r.._m_i_n_o_r
           Specifies the subsystem under which your program  will
           execute.   The  legal  values  for _w_h_i_c_h are "native",
           "windows", "console", "posix", and  "xbox".   You  may
           optionally  set  the  subsystem version also.  Numeric
           values are also accepted for _w_h_i_c_h.  [This  option  is
           specific to the i386 PE targeted port of the linker]

       The  68HC11 and 68HC12 linkers support specific options to
       control the memory bank switching mapping  and  trampoline
       code generation.

       ----nnoo--ttrraammppoolliinnee
           This  option disables the generation of trampoline. By
           default  a  trampoline  is  generated  for  each   far
           function  which  is  called  using a "jsr" instruction
           (this happens when a pointer  to  a  far  function  is
           taken).

       ----bbaannkk--wwiinnddooww _n_a_m_e
           This  option  indicates  to the linker the name of the
           memory  region  in  the  MMEEMMOORRYY   specification   that
           describes  the  memory bank window.  The definition of
           such region is then used  by  the  linker  to  compute
           paging and addresses within the memory window.

EENNVVIIRROONNMMEENNTT
       You  can  change  the behaviour of lldd with the environment
       variables       "GNUTARGET",       "LDEMULATION"       and
       "COLLECT_NO_DEMANGLE".

       "GNUTARGET" determines the input-file object format if you
       don't use --bb (or its synonym ----ffoorrmmaatt).  Its value  should



binutils-2.17               2006-06-23                         36





LD(1)                 GNU Development Tools                 LD(1)


       be  one of the BFD names for an input format.  If there is
       no "GNUTARGET" in the environment,  lldd  uses  the  natural
       format  of  the target. If "GNUTARGET" is set to "default"
       then  BFD  attempts  to  discover  the  input  format   by
       examining  binary input files; this method often succeeds,
       but there are potential ambiguities,  since  there  is  no
       method  of  ensuring that the magic number used to specify
       object-file formats is unique.  However, the configuration
       procedure  for  BFD on each system places the conventional
       format for  that  system  first  in  the  search-list,  so
       ambiguities are resolved in favor of convention.

       "LDEMULATION"  determines  the  default  emulation  if you
       don't use the --mm option.  The emulation can affect various
       aspects  of  linker  behaviour,  particularly  the default
       linker script.  You can list the available emulations with
       the  ----vveerrbboossee  or  --VV  options.   If the --mm option is not
       used, and the "LDEMULATION" environment  variable  is  not
       defined, the default emulation depends upon how the linker
       was configured.

       Normally, the linker will default to  demangling  symbols.
       However,   if   "COLLECT_NO_DEMANGLE"   is   set   in  the
       environment,  then  it  will  default  to  not  demangling
       symbols.   This  environment variable is used in a similar
       fashion by the "gcc" linker wrapper program.  The  default
       may  be  overridden  by  the  ----ddeemmaannggllee and ----nnoo--ddeemmaannggllee
       options.

SSEEEE AALLSSOO
       _a_r(1), _n_m(1), _o_b_j_c_o_p_y(1), _o_b_j_d_u_m_p(1), _r_e_a_d_e_l_f(1)  and  the
       Info entries for _b_i_n_u_t_i_l_s and _l_d.

CCOOPPYYRRIIGGHHTT
       Copyright  (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000,
       2001, 2002, 2003, 2004 Free Software Foundation, Inc.

       Permission is granted to copy,  distribute  and/or  modify
       this   document   under   the   terms   of  the  GNU  Free
       Documentation License, Version 1.1 or  any  later  version
       published   by  the  Free  Software  Foundation;  with  no
       Invariant Sections, with no Front-Cover Texts, and with no
       Back-Cover  Texts.   A  copy of the license is included in
       the section entitled "GNU Free Documentation License".













binutils-2.17               2006-06-23                         37


