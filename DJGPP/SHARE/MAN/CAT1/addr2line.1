ADDR2LINE(1)                 GNU Development Tools                ADDR2LINE(1)



NNAAMMEE
       addr2line - convert addresses into file names and line numbers

SSYYNNOOPPSSIISS
       addr2line [--aa|----aaddddrreesssseess]
                 [--bb _b_f_d_n_a_m_e|----ttaarrggeett==_b_f_d_n_a_m_e]
                 [--CC|----ddeemmaannggllee[=_s_t_y_l_e]]
                 [--rr|----nnoo--rreeccuurrssee--lliimmiitt]
                 [--RR|----rreeccuurrssee--lliimmiitt]
                 [--ee _f_i_l_e_n_a_m_e|----eexxee==_f_i_l_e_n_a_m_e]
                 [--ff|----ffuunnccttiioonnss] [--ss|----bbaasseennaammee]
                 [--ii|----iinnlliinneess]
                 [--pp|----pprreettttyy--pprriinntt]
                 [--jj|----sseeccttiioonn==_n_a_m_e]
                 [--HH|----hheellpp] [--VV|----vveerrssiioonn]
                 [addr addr ...]

DDEESSCCRRIIPPTTIIOONN
       aaddddrr22lliinnee translates addresses into file names and line numbers.  Given
       an address in an executable or an offset in a section of a relocatable
       object, it uses the debugging information to figure out which file name
       and line number are associated with it.

       The executable or relocatable object to use is specified with the --ee
       option.  The default is the file _a_._o_u_t.  The section in the relocatable
       object to use is specified with the --jj option.

       aaddddrr22lliinnee has two modes of operation.

       In the first, hexadecimal addresses are specified on the command line,
       and aaddddrr22lliinnee displays the file name and line number for each address.

       In the second, aaddddrr22lliinnee reads hexadecimal addresses from standard
       input, and prints the file name and line number for each address on
       standard output.  In this mode, aaddddrr22lliinnee may be used in a pipe to
       convert dynamically chosen addresses.

       The format of the output is FFIILLEENNAAMMEE::LLIINNEENNOO.  By default each input
       address generates one line of output.

       Two options can generate additional lines before each FFIILLEENNAAMMEE::LLIINNEENNOO
       line (in that order).

       If the --aa option is used then a line with the input address is
       displayed.

       If the --ff option is used, then a line with the FFUUNNCCTTIIOONNNNAAMMEE is
       displayed.  This is the name of the function containing the address.

       One option can generate additional lines after the FFIILLEENNAAMMEE::LLIINNEENNOO
       line.

       If the --ii option is used and the code at the given address is present
       there because of inlining by the compiler then additional lines are
       displayed afterwards.  One or two extra lines (if the --ff option is
       used) are displayed for each inlined function.

       Alternatively if the --pp option is used then each input address
       generates a single, long, output line containing the address, the
       function name, the file name and the line number.  If the --ii option has
       also been used then any inlined functions will be displayed in the same
       manner, but on separate lines, and prefixed by the text ((iinnlliinneedd bbyy)).

       If the file name or function name can not be determined, aaddddrr22lliinnee will
       print two question marks in their place.  If the line number can not be
       determined, aaddddrr22lliinnee will print 0.

OOPPTTIIOONNSS
       The long and short forms of options, shown here as alternatives, are
       equivalent.

       --aa
       ----aaddddrreesssseess
           Display the address before the function name, file and line number
           information.  The address is printed with a 00xx prefix to easily
           identify it.

       --bb _b_f_d_n_a_m_e
       ----ttaarrggeett==_b_f_d_n_a_m_e
           Specify that the object-code format for the object files is
           _b_f_d_n_a_m_e.

       --CC
       ----ddeemmaannggllee[[==_s_t_y_l_e]]
           Decode (_d_e_m_a_n_g_l_e) low-level symbol names into user-level names.
           Besides removing any initial underscore prepended by the system,
           this makes C++ function names readable.  Different compilers have
           different mangling styles. The optional demangling style argument
           can be used to choose an appropriate demangling style for your
           compiler.

       --ee _f_i_l_e_n_a_m_e
       ----eexxee==_f_i_l_e_n_a_m_e
           Specify the name of the executable for which addresses should be
           translated.  The default file is _a_._o_u_t.

       --ff
       ----ffuunnccttiioonnss
           Display function names as well as file and line number information.

       --ss
       ----bbaasseennaammeess
           Display only the base of each file name.

       --ii
       ----iinnlliinneess
           If the address belongs to a function that was inlined, the source
           information for all enclosing scopes back to the first non-inlined
           function will also be printed.  For example, if "main" inlines
           "callee1" which inlines "callee2", and address is from "callee2",
           the source information for "callee1" and "main" will also be
           printed.

       --jj
       ----sseeccttiioonn
           Read offsets relative to the specified section instead of absolute
           addresses.

       --pp
       ----pprreettttyy--pprriinntt
           Make the output more human friendly: each location are printed on
           one line.  If option --ii is specified, lines for all enclosing
           scopes are prefixed with ((iinnlliinneedd bbyy)).

       --rr
       --RR
       ----rreeccuurrssee--lliimmiitt
       ----nnoo--rreeccuurrssee--lliimmiitt
       ----rreeccuurrssiioonn--lliimmiitt
       ----nnoo--rreeccuurrssiioonn--lliimmiitt
           Enables or disables a limit on the amount of recursion performed
           whilst demangling strings.  Since the name mangling formats allow
           for an inifinite level of recursion it is possible to create
           strings whose decoding will exhaust the amount of stack space
           available on the host machine, triggering a memory fault.  The
           limit tries to prevent this from happening by restricting recursion
           to 2048 levels of nesting.

           The default is for this limit to be enabled, but disabling it may
           be necessary in order to demangle truly complicated names.  Note
           however that if the recursion limit is disabled then stack
           exhaustion is possible and any bug reports about such an event will
           be rejected.

           The --rr option is a synonym for the ----nnoo--rreeccuurrssee--lliimmiitt option.  The
           --RR option is a synonym for the ----rreeccuurrssee--lliimmiitt option.

           Note this option is only effective if the --CC or ----ddeemmaannggllee option
           has been enabled.

       @@_f_i_l_e
           Read command-line options from _f_i_l_e.  The options read are inserted
           in place of the original @_f_i_l_e option.  If _f_i_l_e does not exist, or
           cannot be read, then the option will be treated literally, and not
           removed.

           Options in _f_i_l_e are separated by whitespace.  A whitespace
           character may be included in an option by surrounding the entire
           option in either single or double quotes.  Any character (including
           a backslash) may be included by prefixing the character to be
           included with a backslash.  The _f_i_l_e may itself contain additional
           @_f_i_l_e options; any such options will be processed recursively.

SSEEEE AALLSSOO
       Info entries for _b_i_n_u_t_i_l_s.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1991-2020 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3 or
       any later version published by the Free Software Foundation; with no
       Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
       Texts.  A copy of the license is included in the section entitled "GNU
       Free Documentation License".



binutils-2.35.1                   2020-09-19                      ADDR2LINE(1)
