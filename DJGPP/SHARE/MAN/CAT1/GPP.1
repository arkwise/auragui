


GCC(1)                         GNU                         GCC(1)


NNAAMMEE
       gcc - GNU project C and C++ compiler

SSYYNNOOPPSSIISS
       gcc [--cc|--SS|--EE] [--ssttdd==_s_t_a_n_d_a_r_d]
           [--gg] [--ppgg] [--OO_l_e_v_e_l]
           [--WW_w_a_r_n...] [--ppeeddaannttiicc]
           [--II_d_i_r...] [--LL_d_i_r...]
           [--DD_m_a_c_r_o[=_d_e_f_n]...] [--UU_m_a_c_r_o]
           [--ff_o_p_t_i_o_n...] [--mm_m_a_c_h_i_n_e_-_o_p_t_i_o_n...]
           [--oo _o_u_t_f_i_l_e] [@_f_i_l_e] _i_n_f_i_l_e...

       Only the most useful options are listed here; see below
       for the remainder.  gg++++ accepts mostly the same options as
       ggcccc.

DDEESSCCRRIIPPTTIIOONN
       When you invoke GCC, it normally does preprocessing,
       compilation, assembly and linking.  The "overall options"
       allow you to stop this process at an intermediate stage.
       For example, the --cc option says not to run the linker.
       Then the output consists of object files output by the
       assembler.

       Other options are passed on to one stage of processing.
       Some options control the preprocessor and others the
       compiler itself.  Yet other options control the assembler
       and linker; most of these are not documented here, since
       you rarely need to use any of them.

       Most of the command line options that you can use with GCC
       are useful for C programs; when an option is only useful
       with another language (usually C++), the explanation says
       so explicitly.  If the description for a particular option
       does not mention a source language, you can use that
       option with all supported languages.

       The ggcccc program accepts options and file names as
       operands.  Many options have multi-letter names; therefore
       multiple single-letter options may _n_o_t be grouped: --ddrr is
       very different from --dd --rr.

       You can mix options and other arguments.  For the most
       part, the order you use doesn't matter.  Order does matter
       when you use several options of the same kind; for
       example, if you specify --LL more than once, the directories
       are searched in the order specified.  Also, the placement
       of the --ll option is significant.

       Many options have long names starting with --ff or with
       --WW---for example, --ffmmoovvee--lloooopp--iinnvvaarriiaannttss, --WWffoorrmmaatt and so
       on.  Most of these have both positive and negative forms;
       the negative form of --ffffoooo would be --ffnnoo--ffoooo.  This manual
       documents only one of these two forms, whichever one is



gcc-4.3.2                   2008-08-27                          1





GCC(1)                         GNU                         GCC(1)


       not the default.

OOPPTTIIOONNSS
       OOppttiioonn SSuummmmaarryy

       Here is a summary of all the options, grouped by type.
       Explanations are in the following sections.

       _O_v_e_r_a_l_l _O_p_t_i_o_n_s
           --cc  --SS  --EE  --oo _f_i_l_e  --ccoommbbiinnee  --ppiippee  --ppaassss--eexxiitt--ccooddeess
           --xx _l_a_n_g_u_a_g_e  --vv  --######  ----hheellpp[==_c_l_a_s_s]  ----ttaarrggeett--hheellpp
           ----vveerrssiioonn @@_f_i_l_e

       _C _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --aannssii  --ssttdd==_s_t_a_n_d_a_r_d  --ffggnnuu8899--iinnlliinnee --aauuxx--iinnffoo
           _f_i_l_e_n_a_m_e --ffnnoo--aassmm  --ffnnoo--bbuuiillttiinn  --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n
           --ffhhoosstteedd  --ffffrreeeessttaannddiinngg --ffooppeennmmpp --ffmmss--eexxtteennssiioonnss
           --ttrriiggrraapphhss  --nnoo--iinntteeggrraatteedd--ccpppp  --ttrraaddiittiioonnaall
           --ttrraaddiittiioonnaall--ccpppp --ffaallllooww--ssiinnggllee--pprreecciissiioonn
           --ffccoonndd--mmiissmmaattcchh --ffllaaxx--vveeccttoorr--ccoonnvveerrssiioonnss
           --ffssiiggnneedd--bbiittffiieellddss  --ffssiiggnneedd--cchhaarr --ffuunnssiiggnneedd--bbiittffiieellddss
           --ffuunnssiiggnneedd--cchhaarr

       _C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --ffaabbii--vveerrssiioonn==_n  --ffnnoo--aacccceessss--ccoonnttrrooll  --ffcchheecckk--nneeww
           --ffccoonnsseerrvvee--ssppaaccee  --ffffrriieenndd--iinnjjeeccttiioonn
           --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss --ffnnoo--eennffoorrccee--eehh--ssppeeccss
           --ffffoorr--ssccooppee  --ffnnoo--ffoorr--ssccooppee  --ffnnoo--ggnnuu--kkeeyywwoorrddss
           --ffnnoo--iimmpplliicciitt--tteemmppllaatteess --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess
           --ffnnoo--iimmpplleemmeenntt--iinnlliinneess  --ffmmss--eexxtteennssiioonnss
           --ffnnoo--nnoonnaannssii--bbuuiillttiinnss  --ffnnoo--ooppeerraattoorr--nnaammeess
           --ffnnoo--ooppttiioonnaall--ddiiaaggss  --ffppeerrmmiissssiivvee --ffrreeppoo  --ffnnoo--rrttttii
           --ffssttaattss  --fftteemmppllaattee--ddeepptthh--_n --ffnnoo--tthhrreeaaddssaaffee--ssttaattiiccss
           --ffuussee--ccxxaa--aatteexxiitt  --ffnnoo--wweeaakk  --nnoossttddiinncc++++
           --ffnnoo--ddeeffaauulltt--iinnlliinnee  --ffvviissiibbiilliittyy--iinnlliinneess--hhiiddddeenn
           --ffvviissiibbiilliittyy--mmss--ccoommppaatt --WWaabbii  --WWccttoorr--ddttoorr--pprriivvaaccyy
           --WWnnoonn--vviirrttuuaall--ddttoorr  --WWrreeoorrddeerr --WWeeffffcc++++
           --WWnnoo--ddeepprreeccaatteedd  --WWssttrriicctt--nnuullll--sseennttiinneell
           --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd  --WWoolldd--ssttyyllee--ccaasstt
           --WWoovveerrllooaaddeedd--vviirrttuuaall  --WWnnoo--ppmmff--ccoonnvveerrssiioonnss
           --WWssiiggnn--pprroommoo

       _O_b_j_e_c_t_i_v_e_-_C _a_n_d _O_b_j_e_c_t_i_v_e_-_C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e --ffggnnuu--rruunnttiimmee
           --ffnneexxtt--rruunnttiimmee --ffnnoo--nniill--rreecceeiivveerrss
           --ffoobbjjcc--ccaallll--ccxxxx--ccddttoorrss --ffoobbjjcc--ddiirreecctt--ddiissppaattcchh
           --ffoobbjjcc--eexxcceeppttiioonnss --ffoobbjjcc--ggcc --ffrreeppllaaccee--oobbjjcc--ccllaasssseess
           --ffzzeerroo--lliinnkk --ggeenn--ddeeccllss --WWaassssiiggnn--iinntteerrcceepptt
           --WWnnoo--pprroottooccooll  --WWsseelleeccttoorr --WWssttrriicctt--sseelleeccttoorr--mmaattcchh
           --WWuunnddeeccllaarreedd--sseelleeccttoorr

       _L_a_n_g_u_a_g_e _I_n_d_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
           --ffmmeessssaaggee--lleennggtthh==_n
           --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==[oonnccee|eevveerryy--lliinnee]



gcc-4.3.2                   2008-08-27                          2





GCC(1)                         GNU                         GCC(1)


           --ffddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn

       _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           --ffssyynnttaaxx--oonnllyy  --ppeeddaannttiicc  --ppeeddaannttiicc--eerrrroorrss --ww  --WWeexxttrraa
           --WWaallll  --WWaaddddrreessss  --WWaaggggrreeggaattee--rreettuurrnn  --WWaarrrraayy--bboouunnddss
           --WWnnoo--aattttrriibbuutteess --WWcc++++--ccoommppaatt --WWcc++++00xx--ccoommppaatt
           --WWccaasstt--aalliiggnn  --WWccaasstt--qquuaall --WWcchhaarr--ssuubbssccrriippttss
           --WWcclloobbbbeerreedd  --WWccoommmmeenntt --WWccoonnvveerrssiioonn
           --WWccoovveerraaggee--mmiissmmaattcchh  --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss
           --WWddiissaabblleedd--ooppttiimmiizzaattiioonn  --WWnnoo--ddiivv--bbyy--zzeerroo --WWeemmppttyy--bbooddyy
           --WWnnoo--eennddiiff--llaabbeellss --WWeerrrroorr  --WWeerrrroorr==** --WWffaattaall--eerrrroorrss
           --WWffllooaatt--eeqquuaall  --WWffoorrmmaatt  --WWffoorrmmaatt==22
           --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss --WWffoorrmmaatt--nnoonnlliitteerraall
           --WWffoorrmmaatt--sseeccuurriittyy  --WWffoorrmmaatt--yy22kk --WWiiggnnoorreedd--qquuaalliiffiieerrss
           --WWiimmpplliicciitt  --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn
           --WWiimmpplliicciitt--iinntt --WWiimmppoorrtt  --WWnnoo--iimmppoorrtt  --WWiinniitt--sseellff
           --WWiinnlliinnee --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt
           --WWnnoo--iinnvvaalliidd--ooffffsseettooff --WWiinnvvaalliidd--ppcchh --WWllaarrggeerr--tthhaann--_l_e_n
           --WWuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss --WWllooggiiccaall--oopp --WWlloonngg--lloonngg
           --WWmmaaiinn  --WWmmiissssiinngg--bbrraacceess  --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss
           --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee  --WWmmiissssiinngg--iinncclluuddee--ddiirrss
           --WWmmiissssiinngg--nnoorreettuurrnn --WWnnoo--mmuullttiicchhaarr  --WWnnoonnnnuullll
           --WWnnoo--oovveerrffllooww --WWoovveerrlleennggtthh--ssttrriinnggss  --WWppaacckkeedd  --WWppaaddddeedd
           --WWppaarreenntthheesseess  --WWppooiinntteerr--aarriitthh
           --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt --WWrreedduunnddaanntt--ddeeccllss
           --WWrreettuurrnn--ttyyppee  --WWsseeqquueennccee--ppooiinntt  --WWsshhaaddooww
           --WWssiiggnn--ccoommppaarree  --WWssiiggnn--ccoonnvveerrssiioonn  --WWssttaacckk--pprrootteeccttoorr
           --WWssttrriicctt--aalliiaassiinngg --WWssttrriicctt--aalliiaassiinngg==nn
           --WWssttrriicctt--oovveerrffllooww --WWssttrriicctt--oovveerrffllooww==_n --WWsswwiittcchh
           --WWsswwiittcchh--ddeeffaauulltt  --WWsswwiittcchh--eennuumm --WWssyysstteemm--hheeaaddeerrss
           --WWttrriiggrraapphhss  --WWttyyppee--lliimmiittss  --WWuunnddeeff  --WWuunniinniittiiaalliizzeedd
           --WWuunnkknnoowwnn--pprraaggmmaass  --WWnnoo--pprraaggmmaass --WWuunnrreeaacchhaabbllee--ccooddee
           --WWuunnuusseedd  --WWuunnuusseedd--ffuunnccttiioonn  --WWuunnuusseedd--llaabbeell
           --WWuunnuusseedd--ppaarraammeetteerr --WWuunnuusseedd--vvaalluuee  --WWuunnuusseedd--vvaarriiaabbllee
           --WWvvaarriiaaddiicc--mmaaccrrooss --WWvvllaa --WWvvoollaattiillee--rreeggiisstteerr--vvaarr
           --WWwwrriittee--ssttrriinnggss

       _C _a_n_d _O_b_j_e_c_t_i_v_e_-_C_-_o_n_l_y _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           --WWbbaadd--ffuunnccttiioonn--ccaasstt  --WWmmiissssiinngg--ddeeccllaarraattiioonnss
           --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee  --WWmmiissssiinngg--pprroottoottyyppeess
           --WWnneesstteedd--eexxtteerrnnss --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn
           --WWoolldd--ssttyyllee--ddeeffiinniittiioonn --WWssttrriicctt--pprroottoottyyppeess
           --WWttrraaddiittiioonnaall  --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn
           --WWddeeccllaarraattiioonn--aafftteerr--ssttaatteemmeenntt --WWppooiinntteerr--ssiiggnn

       _D_e_b_u_g_g_i_n_g _O_p_t_i_o_n_s
           --dd_l_e_t_t_e_r_s  --dduummppssppeeccss  --dduummppmmaacchhiinnee  --dduummppvveerrssiioonn
           --ffddbbgg--ccnntt--lliisstt --ffddbbgg--ccnntt==_c_o_u_n_t_e_r_-_v_a_l_u_e_-_l_i_s_t
           --ffdduummpp--nnooaaddddrr --ffdduummpp--uunnnnuummbbeerreedd
           --ffdduummpp--ttrraannssllaattiioonn--uunniitt[--_n] --ffdduummpp--ccllaassss--hhiieerraarrcchhyy[--_n]
           --ffdduummpp--iippaa--aallll --ffdduummpp--iippaa--ccggrraapphh --ffdduummpp--iippaa--iinnlliinnee
           --ffdduummpp--ttrreeee--aallll --ffdduummpp--ttrreeee--oorriiggiinnaall[--_n]
           --ffdduummpp--ttrreeee--ooppttiimmiizzeedd[--_n] --ffdduummpp--ttrreeee--ccffgg
           --ffdduummpp--ttrreeee--vvccgg --ffdduummpp--ttrreeee--aalliiaass --ffdduummpp--ttrreeee--cchh



gcc-4.3.2                   2008-08-27                          3





GCC(1)                         GNU                         GCC(1)


           --ffdduummpp--ttrreeee--ssssaa[--_n] --ffdduummpp--ttrreeee--pprree[--_n]
           --ffdduummpp--ttrreeee--ccccpp[--_n] --ffdduummpp--ttrreeee--ddccee[--_n]
           --ffdduummpp--ttrreeee--ggiimmppllee[--rraaww] --ffdduummpp--ttrreeee--mmuuddffllaapp[--_n]
           --ffdduummpp--ttrreeee--ddoomm[--_n] --ffdduummpp--ttrreeee--ddssee[--_n]
           --ffdduummpp--ttrreeee--pphhiioopptt[--_n] --ffdduummpp--ttrreeee--ffoorrwwpprroopp[--_n]
           --ffdduummpp--ttrreeee--ccooppyyrreennaammee[--_n] --ffdduummpp--ttrreeee--nnrrvv
           --ffdduummpp--ttrreeee--vveecctt --ffdduummpp--ttrreeee--ssiinnkk --ffdduummpp--ttrreeee--ssrraa[--_n]
           --ffdduummpp--ttrreeee--ssaalliiaass --ffdduummpp--ttrreeee--ffrree[--_n]
           --ffdduummpp--ttrreeee--vvrrpp[--_n] --ffttrreeee--vveeccttoorriizzeerr--vveerrbboossee==_n
           --ffdduummpp--ttrreeee--ssttoorreeccccpp[--_n] --ffeelliimmiinnaattee--ddwwaarrff22--dduuppss
           --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess
           --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss
           --ffeemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss --ffmmeemm--rreeppoorrtt
           --ffpprree--iippaa--mmeemm--rreeppoorrtt --ffppoosstt--iippaa--mmeemm--rreeppoorrtt
           --ffpprrooffiillee--aarrccss --ffrraannddoomm--sseeeedd==_s_t_r_i_n_g --ffsscchheedd--vveerrbboossee==_n
           --fftteesstt--ccoovveerraaggee  --ffttiimmee--rreeppoorrtt --ffvvaarr--ttrraacckkiinngg --gg
           --gg_l_e_v_e_l  --ggccooffff --ggddwwaarrff--22 --ggggddbb  --ggssttaabbss  --ggssttaabbss++
           --ggvvmmss  --ggxxccooffff  --ggxxccooffff++ --ffnnoo--mmeerrggee--ddeebbuugg--ssttrriinnggss
           --ffddeebbuugg--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd[==_s_p_e_c_-_l_i_s_t] --pp  --ppgg
           --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y  --pprriinntt--lliibbggcccc--ffiillee--nnaammee
           --pprriinntt--mmuullttii--ddiirreeccttoorryy  --pprriinntt--mmuullttii--lliibb
           --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m  --pprriinntt--sseeaarrcchh--ddiirrss  --QQ
           --pprriinntt--ssyyssrroooott--hheeaaddeerrss--ssuuffffiixx --ssaavvee--tteemmppss  --ttiimmee

       _O_p_t_i_m_i_z_a_t_i_o_n _O_p_t_i_o_n_s
           --ffaalliiggnn--ffuunnccttiioonnss[[==_n]] --ffaalliiggnn--jjuummppss[[==_n]]
           --ffaalliiggnn--llaabbeellss[[==_n]] --ffaalliiggnn--llooooppss[[==_n]]
           --ffaassssoocciiaattiivvee--mmaatthh --ffaauuttoo--iinncc--ddeecc
           --ffbbrraanncchh--pprroobbaabbiilliittiieess --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee
           --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee22 --ffbbttrr--bbbb--eexxcclluussiivvee
           --ffccaalllleerr--ssaavveess --ffcchheecckk--ddaattaa--ddeeppss --ffccpprroopp--rreeggiisstteerrss
           --ffccrroossssjjuummppiinngg --ffccssee--ffoollllooww--jjuummppss --ffccssee--sskkiipp--bblloocckkss
           --ffccxx--lliimmiitteedd--rraannggee --ffddaattaa--sseeccttiioonnss --ffddccee --ffddccee
           --ffddeellaayyeedd--bbrraanncchh --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss --ffddssee
           --ffddssee --ffeeaarrllyy--iinnlliinniinngg --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
           --ffffaasstt--mmaatthh --ffffiinniittee--mmaatthh--oonnllyy --ffffllooaatt--ssttoorree
           --ffffoorrwwaarrdd--pprrooppaaggaattee --ffffuunnccttiioonn--sseeccttiioonnss --ffggccssee
           --ffggccssee--aafftteerr--rreellooaadd --ffggccssee--llaass --ffggccssee--llmm --ffggccssee--ssmm
           --ffiiff--ccoonnvveerrssiioonn --ffiiff--ccoonnvveerrssiioonn22 --ffiinnlliinnee--ffuunnccttiioonnss
           --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee --ffiinnlliinnee--lliimmiitt==_n
           --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss --ffiippaa--ccpp --ffiippaa--mmaarriixx--rreeoorrgg
           --ffiippaa--ppttaa --ffiippaa--ppuurree--ccoonnsstt --ffiippaa--rreeffeerreennccee
           --ffiippaa--ssttrruucctt--rreeoorrgg --ffiippaa--ttyyppee--eessccaappee --ffiivvooppttss
           --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss --ffkkeeeepp--ssttaattiicc--ccoonnssttss
           --ffmmeerrggee--aallll--ccoonnssttaannttss --ffmmeerrggee--ccoonnssttaannttss --ffmmoodduulloo--sscchheedd
           --ffmmoodduulloo--sscchheedd--aallllooww--rreeggmmoovveess --ffmmoovvee--lloooopp--iinnvvaarriiaannttss
           --ffmmuuddffllaapp --ffmmuuddffllaappiirr --ffmmuuddffllaapptthh
           --ffnnoo--bbrraanncchh--ccoouunntt--rreegg --ffnnoo--ddeeffaauulltt--iinnlliinnee
           --ffnnoo--ddeeffeerr--ppoopp --ffnnoo--ffuunnccttiioonn--ccssee
           --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy --ffnnoo--iinnlliinnee
           --ffnnoo--mmaatthh--eerrrrnnoo --ffnnoo--ppeeeepphhoollee --ffnnoo--ppeeeepphhoollee22



gcc-4.3.2                   2008-08-27                          4





GCC(1)                         GNU                         GCC(1)


           --ffnnoo--sscchheedd--iinntteerrbblloocckk --ffnnoo--sscchheedd--ssppeecc
           --ffnnoo--ssiiggnneedd--zzeerrooss --ffnnoo--ttoopplleevveell--rreeoorrddeerr
           --ffnnoo--ttrraappppiinngg--mmaatthh --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss
           --ffoommiitt--ffrraammee--ppooiinntteerr --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee
           --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --ffppeeeell--llooooppss
           --ffpprreeddiiccttiivvee--ccoommmmoonniinngg --ffpprreeffeettcchh--lloooopp--aarrrraayyss
           --ffpprrooffiillee--ggeenneerraattee --ffpprrooffiillee--uussee --ffpprrooffiillee--vvaalluueess
           --ffrreecciipprrooccaall--mmaatthh --ffrreeggmmoovvee --ffrreennaammee--rreeggiisstteerrss
           --ffrreeoorrddeerr--bblloocckkss --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn
           --ffrreeoorrddeerr--ffuunnccttiioonnss --ffrreerruunn--ccssee--aafftteerr--lloooopp
           --ffrreesscchheedduullee--mmoodduulloo--sscchheedduulleedd--llooooppss --ffrroouunnddiinngg--mmaatthh
           --ffrrttll--aabbssttrraacctt--sseeqquueenncceess --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss
           --ffsscchheedd22--uussee--ttrraacceess --ffsscchheedd--ssppeecc--llooaadd
           --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss
           --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp[[==_n]]
           --ffsscchheedd--ssttaalllleedd--iinnssnnss[[==_n]] --ffsscchheedduullee--iinnssnnss
           --ffsscchheedduullee--iinnssnnss22 --ffsseeccttiioonn--aanncchhoorrss --ffsseeee
           --ffssiiggnnaalliinngg--nnaannss --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
           --ffsspplliitt--iivvss--iinn--uunnrroolllleerr --ffsspplliitt--wwiiddee--ttyyppeess
           --ffssttaacckk--pprrootteeccttoorr --ffssttaacckk--pprrootteeccttoorr--aallll
           --ffssttrriicctt--aalliiaassiinngg --ffssttrriicctt--oovveerrffllooww --fftthhrreeaadd--jjuummppss
           --ffttrraacceerr --ffttrreeee--ccccpp --ffttrreeee--cchh --ffttrreeee--ccooppyy--pprroopp
           --ffttrreeee--ccooppyyrreennaammee --ffttrreeee--ddccee --ffttrreeee--ddoommiinnaattoorr--ooppttss
           --ffttrreeee--ddssee --ffttrreeee--ffrree --ffttrreeee--lloooopp--iimm
           --ffttrreeee--lloooopp--iivvccaannoonn --ffttrreeee--lloooopp--lliinneeaarr
           --ffttrreeee--lloooopp--ooppttiimmiizzee --ffttrreeee--ppaarraalllleelliizzee--llooooppss==_n
           --ffttrreeee--pprree --ffttrreeee--rreeaassssoocc --ffttrreeee--ssaalliiaass --ffttrreeee--ssiinnkk
           --ffttrreeee--ssrraa --ffttrreeee--ssttoorree--ccccpp --ffttrreeee--tteerr
           --ffttrreeee--vveecctt--lloooopp--vveerrssiioonn --ffttrreeee--vveeccttoorriizzee --ffttrreeee--vvrrpp
           --ffuunniitt--aatt--aa--ttiimmee --ffuunnrroollll--aallll--llooooppss --ffuunnrroollll--llooooppss
           --ffuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss --ffuunnsswwiittcchh--llooooppss
           --ffvvaarriiaabbllee--eexxppaannssiioonn--iinn--uunnrroolllleerr --ffvveecctt--ccoosstt--mmooddeell
           --ffvvpptt --ffwweebb --ffwwhhoollee--pprrooggrraamm ----ppaarraamm _n_a_m_e==_v_a_l_u_e --OO  --OO00
           --OO11  --OO22  --OO33  --OOss

       _P_r_e_p_r_o_c_e_s_s_o_r _O_p_t_i_o_n_s
           --AA_q_u_e_s_t_i_o_n==_a_n_s_w_e_r --AA--_q_u_e_s_t_i_o_n[==_a_n_s_w_e_r] --CC  --ddDD  --ddII
           --ddMM  --ddNN --DD_m_a_c_r_o[==_d_e_f_n]  --EE  --HH --iiddiirraafftteerr _d_i_r
           --iinncclluuddee _f_i_l_e  --iimmaaccrrooss _f_i_l_e --iipprreeffiixx _f_i_l_e
           --iiwwiitthhpprreeffiixx _d_i_r --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r  --iissyysstteemm _d_i_r
           --iimmuullttiilliibb _d_i_r --iissyyssrroooott _d_i_r --MM  --MMMM  --MMFF  --MMGG  --MMPP
           --MMQQ  --MMTT  --nnoossttddiinncc --PP  --ffwwoorrkkiinngg--ddiirreeccttoorryy  --rreemmaapp
           --ttrriiggrraapphhss  --uunnddeeff  --UU_m_a_c_r_o  --WWpp,,_o_p_t_i_o_n --XXpprreepprroocceessssoorr
           _o_p_t_i_o_n

       _A_s_s_e_m_b_l_e_r _O_p_t_i_o_n
           --WWaa,,_o_p_t_i_o_n  --XXaasssseemmbblleerr _o_p_t_i_o_n

       _L_i_n_k_e_r _O_p_t_i_o_n_s
           _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e  --ll_l_i_b_r_a_r_y --nnoossttaarrttffiilleess
           --nnooddeeffaauullttlliibbss  --nnoossttddlliibb --ppiiee --rrddyynnaammiicc --ss  --ssttaattiicc
           --ssttaattiicc--lliibbggcccc  --sshhaarreedd  --sshhaarreedd--lliibbggcccc  --ssyymmbboolliicc
           --WWll,,_o_p_t_i_o_n  --XXlliinnkkeerr _o_p_t_i_o_n --uu _s_y_m_b_o_l



gcc-4.3.2                   2008-08-27                          5





GCC(1)                         GNU                         GCC(1)


       _D_i_r_e_c_t_o_r_y _O_p_t_i_o_n_s
           --BB_p_r_e_f_i_x  --II_d_i_r  --iiqquuoottee_d_i_r  --LL_d_i_r --ssppeeccss==_f_i_l_e  --II--
           ----ssyyssrroooott==_d_i_r

       _T_a_r_g_e_t _O_p_t_i_o_n_s
           --VV _v_e_r_s_i_o_n  --bb _m_a_c_h_i_n_e

       _M_a_c_h_i_n_e _D_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
           _A_R_C _O_p_t_i_o_n_s --EEBB  --EELL --mmmmaannggllee--ccppuu  --mmccppuu==_c_p_u
           --mmtteexxtt==_t_e_x_t_-_s_e_c_t_i_o_n --mmddaattaa==_d_a_t_a_-_s_e_c_t_i_o_n
           --mmrrooddaattaa==_r_e_a_d_o_n_l_y_-_d_a_t_a_-_s_e_c_t_i_o_n

           _A_R_M _O_p_t_i_o_n_s --mmaappccss--ffrraammee  --mmnnoo--aappccss--ffrraammee --mmaabbii==_n_a_m_e
           --mmaappccss--ssttaacckk--cchheecckk  --mmnnoo--aappccss--ssttaacckk--cchheecckk --mmaappccss--ffllooaatt
           --mmnnoo--aappccss--ffllooaatt --mmaappccss--rreeeennttrraanntt  --mmnnoo--aappccss--rreeeennttrraanntt
           --mmsscchheedd--pprroolloogg  --mmnnoo--sscchheedd--pprroolloogg --mmlliittttllee--eennddiiaann
           --mmbbiigg--eennddiiaann  --mmwwoorrddss--lliittttllee--eennddiiaann --mmffllooaatt--aabbii==_n_a_m_e
           --mmssoofftt--ffllooaatt  --mmhhaarrdd--ffllooaatt  --mmffppee --mmtthhuummbb--iinntteerrwwoorrkk
           --mmnnoo--tthhuummbb--iinntteerrwwoorrkk --mmccppuu==_n_a_m_e  --mmaarrcchh==_n_a_m_e
           --mmffppuu==_n_a_m_e --mmssttrruuccttuurree--ssiizzee--bboouunnddaarryy==_n
           --mmaabboorrtt--oonn--nnoorreettuurrnn --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss
           --mmssiinnggllee--ppiicc--bbaassee  --mmnnoo--ssiinnggllee--ppiicc--bbaassee
           --mmppiicc--rreeggiisstteerr==_r_e_g --mmnnoopp--ffuunn--ddlllliimmppoorrtt
           --mmcciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss
           --mmnnoo--cciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss --mmppookkee--ffuunnccttiioonn--nnaammee
           --mmtthhuummbb  --mmaarrmm --mmttppccss--ffrraammee  --mmttppccss--lleeaaff--ffrraammee
           --mmccaalllleerr--ssuuppeerr--iinntteerrwwoorrkkiinngg
           --mmccaalllleeee--ssuuppeerr--iinntteerrwwoorrkkiinngg --mmttpp==_n_a_m_e

           _A_V_R _O_p_t_i_o_n_s --mmmmccuu==_m_c_u  --mmssiizzee  --mmiinniitt--ssttaacckk==_n
           --mmnnoo--iinntteerrrruuppttss --mmccaallll--pprroolloogguueess  --mmnnoo--ttaabblleejjuummpp
           --mmttiinnyy--ssttaacckk  --mmiinntt88

           _B_l_a_c_k_f_i_n _O_p_t_i_o_n_s --mmccppuu==_c_p_u[--_s_i_r_e_v_i_s_i_o_n] --mmssiimm
           --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           --mmnnoo--oommiitt--lleeaaff--ffrraammee--ppooiinntteerr --mmssppeecclldd--aannoommaallyy
           --mmnnoo--ssppeecclldd--aannoommaallyy  --mmccssyynncc--aannoommaallyy
           --mmnnoo--ccssyynncc--aannoommaallyy --mmllooww--6644kk --mmnnoo--llooww6644kk
           --mmssttaacckk--cchheecckk--ll11  --mmiidd--sshhaarreedd--lliibbrraarryy
           --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy  --mmsshhaarreedd--lliibbrraarryy--iidd==_n
           --mmlleeaaff--iidd--sshhaarreedd--lliibbrraarryy  --mmnnoo--lleeaaff--iidd--sshhaarreedd--lliibbrraarryy
           --mmsseepp--ddaattaa  --mmnnoo--sseepp--ddaattaa  --mmlloonngg--ccaallllss
           --mmnnoo--lloonngg--ccaallllss --mmffaasstt--ffpp --mmiinnlliinnee--pplltt

           _C_R_I_S _O_p_t_i_o_n_s --mmccppuu==_c_p_u  --mmaarrcchh==_c_p_u  --mmttuunnee==_c_p_u
           --mmmmaaxx--ssttaacckk--ffrraammee==_n  --mmeelliinnuuxx--ssttaacckkssiizzee==_n --mmeettrraaxx44
           --mmeettrraaxx110000  --mmppddeebbuugg  --mmcccc--iinniitt  --mmnnoo--ssiiddee--eeffffeeccttss
           --mmssttaacckk--aalliiggnn  --mmddaattaa--aalliiggnn  --mmccoonnsstt--aalliiggnn --mm3322--bbiitt
           --mm1166--bbiitt  --mm88--bbiitt  --mmnnoo--pprroolloogguuee--eeppiilloogguuee  --mmnnoo--ggoottpplltt
           --mmeellff  --mmaaoouutt  --mmeelliinnuuxx  --mmlliinnuuxx  --ssiimm  --ssiimm22
           --mmmmuull--bbuugg--wwoorrkkaarroouunndd  --mmnnoo--mmuull--bbuugg--wwoorrkkaarroouunndd

           _C_R_X _O_p_t_i_o_n_s --mmmmaacc --mmppuusshh--aarrggss




gcc-4.3.2                   2008-08-27                          6





GCC(1)                         GNU                         GCC(1)


           _D_a_r_w_i_n _O_p_t_i_o_n_s --aallll__llooaadd  --aalllloowwaabbllee__cclliieenntt  --aarrcchh
           --aarrcchh__eerrrroorrss__ffaattaall --aarrcchh__oonnllyy  --bbiinndd__aatt__llooaadd  --bbuunnddllee
           --bbuunnddllee__llooaaddeerr --cclliieenntt__nnaammee  --ccoommppaattiibbiilliittyy__vveerrssiioonn
           --ccuurrrreenntt__vveerrssiioonn --ddeeaadd__ssttrriipp --ddeeppeennddeennccyy--ffiillee
           --ddyylliibb__ffiillee  --ddyylliinnkkeerr__iinnssttaallll__nnaammee --ddyynnaammiicc
           --ddyynnaammiicclliibb  --eexxppoorrtteedd__ssyymmbboollss__lliisstt --ffiilleelliisstt
           --ffllaatt__nnaammeessppaaccee  --ffoorrccee__ccppuussuubbttyyppee__AALLLL
           --ffoorrccee__ffllaatt__nnaammeessppaaccee  --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess
           --iiffrraammeewwoorrkk --iimmaaggee__bbaassee  --iinniitt  --iinnssttaallll__nnaammee
           --kkeeeepp__pprriivvaattee__eexxtteerrnnss --mmuullttii__mmoodduullee  --mmuullttiippllyy__ddeeffiinneedd
           --mmuullttiippllyy__ddeeffiinneedd__uunnuusseedd --nnooaallll__llooaadd
           --nnoo__ddeeaadd__ssttrriipp__iinniittss__aanndd__tteerrmmss --nnooffiixxpprreebbiinnddiinngg
           --nnoommuullttiiddeeffss  --nnoopprreebbiinndd  --nnoosseegglliinnkkeeddiitt
           --ppaaggeezzeerroo__ssiizzee  --pprreebbiinndd
           --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodduulleess --pprriivvaattee__bbuunnddllee
           --rreeaadd__oonnllyy__rreellooccss  --sseeccttaalliiggnn --sseeccttoobbjjeeccttssyymmbboollss
           --wwhhyyllooaadd  --sseegg11aaddddrr --sseeccttccrreeaattee  --sseeccttoobbjjeeccttssyymmbboollss
           --sseeccttoorrddeerr --sseeggaaddddrr --sseeggss__rreeaadd__oonnllyy__aaddddrr
           --sseeggss__rreeaadd__wwrriittee__aaddddrr --sseegg__aaddddrr__ttaabbllee
           --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee  --sseegglliinnkkeeddiitt --sseeggpprroott
           --sseeggss__rreeaadd__oonnllyy__aaddddrr  --sseeggss__rreeaadd__wwrriittee__aaddddrr
           --ssiinnggllee__mmoodduullee  --ssttaattiicc  --ssuubb__lliibbrraarryy  --ssuubb__uummbbrreellllaa
           --ttwwoolleevveell__nnaammeessppaaccee  --uummbbrreellllaa  --uunnddeeffiinneedd
           --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt  --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess
           --wwhhaattssllooaaddeedd --FF --gguusseedd --ggffuullll
           --mmmmaaccoossxx--vveerrssiioonn--mmiinn==_v_e_r_s_i_o_n --mmkkeerrnneell --mmoonnee--bbyyttee--bbooooll

           _D_E_C _A_l_p_h_a _O_p_t_i_o_n_s --mmnnoo--ffpp--rreeggss  --mmssoofftt--ffllooaatt
           --mmaallpphhaa--aass  --mmggaass --mmiieeeeee  --mmiieeeeee--wwiitthh--iinneexxaacctt
           --mmiieeeeee--ccoonnffoorrmmaanntt --mmffpp--ttrraapp--mmooddee==_m_o_d_e
           --mmffpp--rroouunnddiinngg--mmooddee==_m_o_d_e --mmttrraapp--pprreecciissiioonn==_m_o_d_e
           --mmbbuuiilldd--ccoonnssttaannttss --mmccppuu==_c_p_u_-_t_y_p_e  --mmttuunnee==_c_p_u_-_t_y_p_e
           --mmbbwwxx  --mmmmaaxx  --mmffiixx  --mmcciixx --mmffllooaatt--vvaaxx  --mmffllooaatt--iieeeeee
           --mmeexxpplliicciitt--rreellooccss  --mmssmmaallll--ddaattaa  --mmllaarrggee--ddaattaa
           --mmssmmaallll--tteexxtt  --mmllaarrggee--tteexxtt --mmmmeemmoorryy--llaatteennccyy==_t_i_m_e

           _D_E_C _A_l_p_h_a_/_V_M_S _O_p_t_i_o_n_s --mmvvmmss--rreettuurrnn--ccooddeess

           _F_R_V _O_p_t_i_o_n_s --mmggpprr--3322  --mmggpprr--6644  --mmffpprr--3322  --mmffpprr--6644
           --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt --mmaalllloocc--cccc  --mmffiixxeedd--cccc
           --mmddwwoorrdd  --mmnnoo--ddwwoorrdd --mmddoouubbllee  --mmnnoo--ddoouubbllee --mmmmeeddiiaa
           --mmnnoo--mmeeddiiaa  --mmmmuullaadddd  --mmnnoo--mmuullaadddd --mmffddppiicc
           --mmiinnlliinnee--pplltt --mmggpprreell--rroo  --mmuullttiilliibb--lliibbrraarryy--ppiicc
           --mmlliinnkkeedd--ffpp  --mmlloonngg--ccaallllss  --mmaalliiggnn--llaabbeellss
           --mmlliibbrraarryy--ppiicc  --mmaacccc--44  --mmaacccc--88 --mmppaacckk  --mmnnoo--ppaacckk
           --mmnnoo--eeffllaaggss  --mmccoonndd--mmoovvee  --mmnnoo--ccoonndd--mmoovvee
           --mmooppttiimmiizzee--mmeemmbbaarr --mmnnoo--ooppttiimmiizzee--mmeemmbbaarr --mmsscccc  --mmnnoo--sscccc
           --mmccoonndd--eexxeecc  --mmnnoo--ccoonndd--eexxeecc --mmvvlliiww--bbrraanncchh
           --mmnnoo--vvlliiww--bbrraanncchh --mmmmuullttii--ccoonndd--eexxeecc
           --mmnnoo--mmuullttii--ccoonndd--eexxeecc  --mmnneesstteedd--ccoonndd--eexxeecc
           --mmnnoo--nneesstteedd--ccoonndd--eexxeecc  --mmttoommccaatt--ssttaattss --mmTTLLSS --mmttllss
           --mmccppuu==_c_p_u

           _G_N_U_/_L_i_n_u_x _O_p_t_i_o_n_s --mmuucclliibbcc



gcc-4.3.2                   2008-08-27                          7





GCC(1)                         GNU                         GCC(1)


           _H_8_/_3_0_0 _O_p_t_i_o_n_s --mmrreellaaxx  --mmhh  --mmss  --mmnn  --mmiinntt3322
           --mmaalliiggnn--330000

           _H_P_P_A _O_p_t_i_o_n_s --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e --mmbbiigg--sswwiittcchh
           --mmddiissaabbllee--ffpprreeggss  --mmddiissaabbllee--iinnddeexxiinngg
           --mmffaasstt--iinnddiirreecctt--ccaallllss  --mmggaass  --mmggnnuu--lldd   --mmhhpp--lldd
           --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e --mmjjuummpp--iinn--ddeellaayy
           --mmlliinnkkeerr--oopptt --mmlloonngg--ccaallllss --mmlloonngg--llooaadd--ssttoorree
           --mmnnoo--bbiigg--sswwiittcchh  --mmnnoo--ddiissaabbllee--ffpprreeggss
           --mmnnoo--ddiissaabbllee--iinnddeexxiinngg  --mmnnoo--ffaasstt--iinnddiirreecctt--ccaallllss
           --mmnnoo--ggaass --mmnnoo--jjuummpp--iinn--ddeellaayy  --mmnnoo--lloonngg--llooaadd--ssttoorree
           --mmnnoo--ppoorrttaabbllee--rruunnttiimmee  --mmnnoo--ssoofftt--ffllooaatt --mmnnoo--ssppaaccee--rreeggss
           --mmssoofftt--ffllooaatt  --mmppaa--rriisscc--11--00 --mmppaa--rriisscc--11--11
           --mmppaa--rriisscc--22--00  --mmppoorrttaabbllee--rruunnttiimmee --mmsscchheedduullee==_c_p_u_-_t_y_p_e
           --mmssppaaccee--rreeggss  --mmssiioo  --mmwwssiioo --mmuunniixx==_u_n_i_x_-_s_t_d  --nnoolliibbddlldd
           --ssttaattiicc  --tthhrreeaaddss

           _i_3_8_6 _a_n_d _x_8_6_-_6_4 _O_p_t_i_o_n_s --mmttuunnee==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-
           _t_y_p_e --mmffppmmaatthh==_u_n_i_t --mmaassmm==_d_i_a_l_e_c_t  --mmnnoo--ffaannccyy--mmaatthh--338877
           --mmnnoo--ffpp--rreett--iinn--338877  --mmssoofftt--ffllooaatt --mmnnoo--wwiiddee--mmuullttiippllyy
           --mmrrttdd  --mmaalliiggnn--ddoouubbllee --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m
           --mmcclldd --mmccxx1166 --mmssaahhff --mmrreecciipp --mmmmmmxx  --mmssssee  --mmssssee22
           --mmssssee33 --mmssssssee33 --mmssssee44..11 --mmssssee44..22 --mmssssee44 --mmssssee44aa
           --mm33ddnnooww --mmppooppccnntt --mmaabbmm --mmssssee55 --mmtthhrreeaaddss
           --mmnnoo--aalliiggnn--ssttrriinnggooppss  --mmiinnlliinnee--aallll--ssttrriinnggooppss
           --mmppuusshh--aarrggss  --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
           --mm112288bbiitt--lloonngg--ddoouubbllee --mm9966bbiitt--lloonngg--ddoouubbllee
           --mmrreeggppaarrmm==_n_u_m  --mmsssseerreeggppaarrmm --mmvveecclliibbaabbii==_t_y_p_e --mmppcc3322
           --mmppcc6644 --mmppcc8800 --mmssttaacckkrreeaalliiggnn --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           --mmnnoo--rreedd--zzoonnee --mmnnoo--ttllss--ddiirreecctt--sseegg--rreeffss --mmccmmooddeell==_c_o_d_e_-
           _m_o_d_e_l --mm3322  --mm6644 --mmllaarrggee--ddaattaa--tthhrreesshhoolldd==_n_u_m
           --mmffuusseedd--mmaadddd --mmnnoo--ffuusseedd--mmaadddd

           _I_A_-_6_4 _O_p_t_i_o_n_s --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann  --mmggnnuu--aass
           --mmggnnuu--lldd  --mmnnoo--ppiicc --mmvvoollaattiillee--aassmm--ssttoopp
           --mmrreeggiisstteerr--nnaammeess  --mmnnoo--ssddaattaa --mmccoonnssttaanntt--ggpp  --mmaauuttoo--ppiicc
           --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmiinn--llaatteennccyy
           --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           --mmiinnlliinnee--iinntt--ddiivviiddee--mmiinn--llaatteennccyy
           --mmiinnlliinnee--iinntt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           --mmiinnlliinnee--ssqqrrtt--mmiinn--llaatteennccyy --mmiinnlliinnee--ssqqrrtt--mmaaxx--tthhrroouugghhppuutt
           --mmnnoo--ddwwaarrff22--aassmm --mmeeaarrllyy--ssttoopp--bbiittss
           --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e --mmttllss--ssiizzee==_t_l_s_-_s_i_z_e
           --mmttuunnee==_c_p_u_-_t_y_p_e --mmtt --pptthhrreeaadd --mmiillpp3322 --mmllpp6644
           --mmnnoo--sscchheedd--bbrr--ddaattaa--ssppeecc --mmsscchheedd--aarr--ddaattaa--ssppeecc
           --mmnnoo--sscchheedd--ccoonnttrrooll--ssppeecc --mmsscchheedd--bbrr--iinn--ddaattaa--ssppeecc
           --mmsscchheedd--aarr--iinn--ddaattaa--ssppeecc --mmsscchheedd--iinn--ccoonnttrrooll--ssppeecc
           --mmsscchheedd--llddcc --mmnnoo--sscchheedd--ccoonnttrrooll--llddcc
           --mmnnoo--sscchheedd--ssppeecc--vveerrbboossee
           --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
           --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
           --mmnnoo--sscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh

           _M_3_2_R_/_D _O_p_t_i_o_n_s --mm3322rr22 --mm3322rrxx --mm3322rr --mmddeebbuugg



gcc-4.3.2                   2008-08-27                          8





GCC(1)                         GNU                         GCC(1)


           --mmaalliiggnn--llooooppss --mmnnoo--aalliiggnn--llooooppss --mmiissssuuee--rraattee==_n_u_m_b_e_r
           --mmbbrraanncchh--ccoosstt==_n_u_m_b_e_r --mmmmooddeell==_c_o_d_e_-_s_i_z_e_-_m_o_d_e_l_-_t_y_p_e
           --mmssddaattaa==_s_d_a_t_a_-_t_y_p_e --mmnnoo--fflluusshh--ffuunncc --mmfflluusshh--ffuunncc==_n_a_m_e
           --mmnnoo--fflluusshh--ttrraapp --mmfflluusshh--ttrraapp==_n_u_m_b_e_r --GG _n_u_m

           _M_3_2_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u --mmssiimm --mmeemmrreeggss==_n_u_m_b_e_r

           _M_6_8_0_x_0 _O_p_t_i_o_n_s --mmaarrcchh==_a_r_c_h  --mmccppuu==_c_p_u  --mmttuunnee==_t_u_n_e
           --mm6688000000  --mm6688002200  --mm6688002200--4400  --mm6688002200--6600  --mm6688003300
           --mm6688004400 --mm6688006600  --mmccppuu3322  --mm55220000  --mm55220066ee  --mm552288xx
           --mm55330077  --mm55440077 --mmccffvv44ee  --mmbbiittffiieelldd  --mmnnoo--bbiittffiieelldd
           --mmcc6688000000  --mmcc6688002200 --mmnnoobbiittffiieelldd  --mmrrttdd  --mmnnoo--rrttdd
           --mmddiivv  --mmnnoo--ddiivv  --mmsshhoorrtt --mmnnoo--sshhoorrtt  --mmhhaarrdd--ffllooaatt
           --mm6688888811  --mmssoofftt--ffllooaatt  --mmppccrreell --mmaalliiggnn--iinntt
           --mmssttrriicctt--aalliiggnn  --mmsseepp--ddaattaa  --mmnnoo--sseepp--ddaattaa
           --mmsshhaarreedd--lliibbrraarryy--iidd==nn  --mmiidd--sshhaarreedd--lliibbrraarryy
           --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy

           _M_6_8_h_c_1_x _O_p_t_i_o_n_s --mm66881111  --mm66881122  --mm6688hhcc1111  --mm6688hhcc1122
           --mm6688hhccss1122 --mmaauuttoo--iinnccddeecc  --mmiinnmmaaxx  --mmlloonngg--ccaallllss
           --mmsshhoorrtt --mmssoofftt--rreegg--ccoouunntt==_c_o_u_n_t

           _M_C_o_r_e _O_p_t_i_o_n_s --mmhhaarrddlliitt  --mmnnoo--hhaarrddlliitt  --mmddiivv  --mmnnoo--ddiivv
           --mmrreellaaxx--iimmmmeeddiiaatteess --mmnnoo--rreellaaxx--iimmmmeeddiiaatteess
           --mmwwiiddee--bbiittffiieellddss  --mmnnoo--wwiiddee--bbiittffiieellddss
           --mm44bbyyttee--ffuunnccttiioonnss  --mmnnoo--44bbyyttee--ffuunnccttiioonnss
           --mmccaallllggrraapphh--ddaattaa --mmnnoo--ccaallllggrraapphh--ddaattaa  --mmssllooww--bbyytteess
           --mmnnoo--ssllooww--bbyytteess  --mmnnoo--llssiimm --mmlliittttllee--eennddiiaann
           --mmbbiigg--eennddiiaann  --mm221100  --mm334400  --mmssttaacckk--iinnccrreemmeenntt

           _M_I_P_S _O_p_t_i_o_n_s --EELL  --EEBB  --mmaarrcchh==_a_r_c_h  --mmttuunnee==_a_r_c_h --mmiippss11
           --mmiippss22  --mmiippss33  --mmiippss44  --mmiippss3322  --mmiippss3322rr22  --mmiippss6644
           --mmiippss1166  --mmnnoo--mmiippss1166  --mmfflliipp--mmiippss1166 --mmiinntteerrlliinnkk--mmiippss1166
           --mmnnoo--iinntteerrlliinnkk--mmiippss1166 --mmaabbii==_a_b_i  --mmaabbiiccaallllss
           --mmnnoo--aabbiiccaallllss --mmsshhaarreedd  --mmnnoo--sshhaarreedd  --mmxxggoott  --mmnnoo--xxggoott
           --mmggpp3322  --mmggpp6644 --mmffpp3322  --mmffpp6644  --mmhhaarrdd--ffllooaatt
           --mmssoofftt--ffllooaatt --mmssiinnggllee--ffllooaatt  --mmddoouubbllee--ffllooaatt  --mmddsspp
           --mmnnoo--ddsspp  --mmddsspprr22  --mmnnoo--ddsspprr22 --mmssmmaarrttmmiippss
           --mmnnoo--ssmmaarrttmmiippss --mmppaaiirreedd--ssiinnggllee  --mmnnoo--ppaaiirreedd--ssiinnggllee
           --mmddmmxx  --mmnnoo--mmddmmxx --mmiippss33dd  --mmnnoo--mmiippss33dd  --mmmmtt  --mmnnoo--mmtt
           --mmllllsscc  --mmnnoo--llllsscc --mmlloonngg6644  --mmlloonngg3322  --mmssyymm3322
           --mmnnoo--ssyymm3322 --GG_n_u_m  --mmllooccaall--ssddaattaa  --mmnnoo--llooccaall--ssddaattaa
           --mmeexxtteerrnn--ssddaattaa  --mmnnoo--eexxtteerrnn--ssddaattaa  --mmggppoopptt  --mmnnoo--ggoopptt
           --mmeemmbbeeddddeedd--ddaattaa  --mmnnoo--eemmbbeeddddeedd--ddaattaa
           --mmuunniinniitt--ccoonnsstt--iinn--rrooddaattaa  --mmnnoo--uunniinniitt--ccoonnsstt--iinn--rrooddaattaa
           --mmccooddee--rreeaaddaabbllee==_s_e_t_t_i_n_g --mmsspplliitt--aaddddrreesssseess
           --mmnnoo--sspplliitt--aaddddrreesssseess --mmeexxpplliicciitt--rreellooccss
           --mmnnoo--eexxpplliicciitt--rreellooccss --mmcchheecckk--zzeerroo--ddiivviissiioonn
           --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn --mmddiivviiddee--ttrraappss
           --mmddiivviiddee--bbrreeaakkss --mmmmeemmccppyy  --mmnnoo--mmeemmccppyy  --mmlloonngg--ccaallllss
           --mmnnoo--lloonngg--ccaallllss --mmmmaadd  --mmnnoo--mmaadd  --mmffuusseedd--mmaadddd
           --mmnnoo--ffuusseedd--mmaadddd  --nnooccpppp --mmffiixx--rr44000000  --mmnnoo--ffiixx--rr44000000
           --mmffiixx--rr44440000  --mmnnoo--ffiixx--rr44440000 --mmffiixx--vvrr44112200
           --mmnnoo--ffiixx--vvrr44112200  --mmffiixx--vvrr44113300  --mmnnoo--ffiixx--vvrr44113300



gcc-4.3.2                   2008-08-27                          9





GCC(1)                         GNU                         GCC(1)


           --mmffiixx--ssbb11  --mmnnoo--ffiixx--ssbb11 --mmfflluusshh--ffuunncc==_f_u_n_c
           --mmnnoo--fflluusshh--ffuunncc --mmbbrraanncchh--ccoosstt==_n_u_m  --mmbbrraanncchh--lliikkeellyy
           --mmnnoo--bbrraanncchh--lliikkeellyy --mmffpp--eexxcceeppttiioonnss --mmnnoo--ffpp--eexxcceeppttiioonnss
           --mmvvrr44113300--aalliiggnn --mmnnoo--vvrr44113300--aalliiggnn

           _M_M_I_X _O_p_t_i_o_n_s --mmlliibbffuunnccss  --mmnnoo--lliibbffuunnccss  --mmeeppssiilloonn
           --mmnnoo--eeppssiilloonn  --mmaabbii==ggnnuu --mmaabbii==mmmmiixxwwaarree  --mmzzeerroo--eexxtteenndd
           --mmkknnuutthhddiivv  --mmttoopplleevveell--ssyymmbboollss --mmeellff  --mmbbrraanncchh--pprreeddiicctt
           --mmnnoo--bbrraanncchh--pprreeddiicctt  --mmbbaassee--aaddddrreesssseess
           --mmnnoo--bbaassee--aaddddrreesssseess  --mmssiinnggllee--eexxiitt  --mmnnoo--ssiinnggllee--eexxiitt

           _M_N_1_0_3_0_0 _O_p_t_i_o_n_s --mmmmuulltt--bbuugg  --mmnnoo--mmuulltt--bbuugg --mmaamm3333
           --mmnnoo--aamm3333 --mmaamm3333--22  --mmnnoo--aamm3333--22 --mmrreettuurrnn--ppooiinntteerr--oonn--dd00
           --mmnnoo--ccrrtt00  --mmrreellaaxx

           _M_T _O_p_t_i_o_n_s --mmnnoo--ccrrtt00 --mmbbaacccc --mmssiimm --mmaarrcchh==_c_p_u_-_t_y_p_e

           _P_D_P_-_1_1 _O_p_t_i_o_n_s --mmffppuu  --mmssoofftt--ffllooaatt  --mmaacc00  --mmnnoo--aacc00
           --mm4400  --mm4455  --mm1100 --mmbbccooppyy  --mmbbccooppyy--bbuuiillttiinn  --mmiinntt3322
           --mmnnoo--iinntt1166 --mmiinntt1166  --mmnnoo--iinntt3322  --mmffllooaatt3322
           --mmnnoo--ffllooaatt6644 --mmffllooaatt6644  --mmnnoo--ffllooaatt3322  --mmaabbsshhii
           --mmnnoo--aabbsshhii --mmbbrraanncchh--eexxppeennssiivvee  --mmbbrraanncchh--cchheeaapp --mmsspplliitt
           --mmnnoo--sspplliitt  --mmuunniixx--aassmm  --mmddeecc--aassmm

           _P_o_w_e_r_P_C _O_p_t_i_o_n_s See RS/6000 and PowerPC Options.

           _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-
           _t_y_p_e --mmppoowweerr  --mmnnoo--ppoowweerr  --mmppoowweerr22  --mmnnoo--ppoowweerr22
           --mmppoowweerrppcc  --mmppoowweerrppcc6644  --mmnnoo--ppoowweerrppcc --mmaallttiivveecc
           --mmnnoo--aallttiivveecc --mmppoowweerrppcc--ggppoopptt  --mmnnoo--ppoowweerrppcc--ggppoopptt
           --mmppoowweerrppcc--ggffxxoopptt  --mmnnoo--ppoowweerrppcc--ggffxxoopptt --mmmmffccrrff
           --mmnnoo--mmffccrrff  --mmppooppccnnttbb  --mmnnoo--ppooppccnnttbb  --mmffpprrnndd
           --mmnnoo--ffpprrnndd --mmccmmppbb --mmnnoo--ccmmppbb --mmmmffppggpprr --mmnnoo--mmffppggpprr
           --mmhhaarrdd--ddffpp --mmnnoo--hhaarrdd--ddffpp --mmnneeww--mmnneemmoonniiccss
           --mmoolldd--mmnneemmoonniiccss --mmffuullll--ttoocc   --mmmmiinniimmaall--ttoocc
           --mmnnoo--ffpp--iinn--ttoocc  --mmnnoo--ssuumm--iinn--ttoocc --mm6644  --mm3322
           --mmxxll--ccoommppaatt  --mmnnoo--xxll--ccoommppaatt  --mmppee --mmaalliiggnn--ppoowweerr
           --mmaalliiggnn--nnaattuurraall --mmssoofftt--ffllooaatt  --mmhhaarrdd--ffllooaatt  --mmmmuullttiippllee
           --mmnnoo--mmuullttiippllee --mmssttrriinngg  --mmnnoo--ssttrriinngg  --mmuuppddaattee
           --mmnnoo--uuppddaattee --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd  --mmbbiitt--aalliiggnn
           --mmnnoo--bbiitt--aalliiggnn --mmssttrriicctt--aalliiggnn  --mmnnoo--ssttrriicctt--aalliiggnn
           --mmrreellooccaattaabbllee --mmnnoo--rreellooccaattaabbllee  --mmrreellooccaattaabbllee--lliibb
           --mmnnoo--rreellooccaattaabbllee--lliibb --mmttoocc  --mmnnoo--ttoocc  --mmlliittttllee
           --mmlliittttllee--eennddiiaann  --mmbbiigg  --mmbbiigg--eennddiiaann --mmddyynnaammiicc--nnoo--ppiicc
           --mmaallttiivveecc  --mmsswwddiivv
           --mmpprriioorriittiizzee--rreessttrriicctteedd--iinnssnnss==_p_r_i_o_r_i_t_y
           --mmsscchheedd--ccoossttllyy--ddeepp==_d_e_p_e_n_d_e_n_c_e___t_y_p_e
           --mmiinnsseerrtt--sscchheedd--nnooppss==_s_c_h_e_m_e --mmccaallll--ssyyssvv  --mmccaallll--nneettbbssdd
           --mmaaiixx--ssttrruucctt--rreettuurrnn  --mmssvvrr44--ssttrruucctt--rreettuurrnn --mmaabbii==_a_b_i_-
           _t_y_p_e --mmsseeccuurree--pplltt --mmbbssss--pplltt --mmiisseell --mmnnoo--iisseell
           --mmiisseell==yyeess  --mmiisseell==nnoo --mmssppee --mmnnoo--ssppee --mmssppee==yyeess
           --mmssppee==nnoo --mmppaaiirreedd --mmvvrrssaavvee --mmnnoo--vvrrssaavvee --mmmmuullhhww
           --mmnnoo--mmuullhhww --mmddllmmzzbb --mmnnoo--ddllmmzzbb --mmffllooaatt--ggpprrss==yyeess
           --mmffllooaatt--ggpprrss==nnoo --mmffllooaatt--ggpprrss==ssiinnggllee



gcc-4.3.2                   2008-08-27                         10





GCC(1)                         GNU                         GCC(1)


           --mmffllooaatt--ggpprrss==ddoouubbllee --mmpprroottoottyyppee  --mmnnoo--pprroottoottyyppee --mmssiimm
           --mmmmvvmmee  --mmaaddss  --mmyyeelllloowwkknniiffee  --mmeemmbb  --mmssddaattaa
           --mmssddaattaa==_o_p_t  --mmvvxxwwoorrkkss  --mmwwiinnddiissss  --GG _n_u_m  --pptthhrreeaadd

           _S_/_3_9_0 _a_n_d _z_S_e_r_i_e_s _O_p_t_i_o_n_s --mmttuunnee==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-
           _t_y_p_e --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt --mmlloonngg--ddoouubbllee--6644
           --mmlloonngg--ddoouubbllee--112288 --mmbbaacckkcchhaaiinn  --mmnnoo--bbaacckkcchhaaiinn
           --mmppaacckkeedd--ssttaacckk  --mmnnoo--ppaacckkeedd--ssttaacckk --mmssmmaallll--eexxeecc
           --mmnnoo--ssmmaallll--eexxeecc  --mmmmvvccllee --mmnnoo--mmvvccllee --mm6644  --mm3311
           --mmddeebbuugg  --mmnnoo--ddeebbuugg  --mmeessaa  --mmzzaarrcchh --mmttppff--ttrraaccee
           --mmnnoo--ttppff--ttrraaccee  --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd
           --mmwwaarrnn--ffrraammeessiizzee  --mmwwaarrnn--ddyynnaammiiccssttaacckk  --mmssttaacckk--ssiizzee
           --mmssttaacckk--gguuaarrdd

           _S_c_o_r_e _O_p_t_i_o_n_s --mmeebb --mmeell --mmnnhhwwlloooopp --mmuullss --mmmmaacc --mmssccoorree55
           --mmssccoorree55uu --mmssccoorree77 --mmssccoorree77dd

           _S_H _O_p_t_i_o_n_s --mm11  --mm22  --mm22ee  --mm33  --mm33ee --mm44--nnooffppuu
           --mm44--ssiinnggllee--oonnllyy  --mm44--ssiinnggllee  --mm44 --mm44aa--nnooffppuu
           --mm44aa--ssiinnggllee--oonnllyy --mm44aa--ssiinnggllee --mm44aa --mm44aall --mm55--6644mmeeddiiaa
           --mm55--6644mmeeddiiaa--nnooffppuu --mm55--3322mmeeddiiaa  --mm55--3322mmeeddiiaa--nnooffppuu
           --mm55--ccoommppaacctt  --mm55--ccoommppaacctt--nnooffppuu --mmbb  --mmll  --mmddaalliiggnn
           --mmrreellaaxx --mmbbiiggttaabbllee  --mmffmmoovvdd  --mmhhiittaacchhii --mmrreenneessaass
           --mmnnoo--rreenneessaass --mmnnoommaaccssaavvee --mmiieeeeee  --mmiissiizzee
           --mmiinnlliinnee--iicc__iinnvvaalliiddaattee --mmppaaddssttrruucctt  --mmssppaaccee
           --mmpprreeffeerrggoott  --mmuusseerrmmooddee --mmuullttccoosstt==_n_u_m_b_e_r
           --mmddiivv==_s_t_r_a_t_e_g_y --mmddiivvssii33__lliibbffuunncc==_n_a_m_e --mmaaddjjuusstt--uunnrroollll
           --mmiinnddeexxeedd--aaddddrreessssiinngg --mmggeettttrrccoosstt==_n_u_m_b_e_r --mmpptt--ffiixxeedd
            --mmiinnvvaalliidd--ssyymmbboollss

           _S_P_A_R_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-_t_y_p_e
           --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l --mm3322  --mm6644  --mmaapppp--rreeggss
           --mmnnoo--aapppp--rreeggss --mmffaasstteerr--ssttrruuccttss  --mmnnoo--ffaasstteerr--ssttrruuccttss
           --mmffppuu  --mmnnoo--ffppuu  --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt
           --mmhhaarrdd--qquuaadd--ffllooaatt  --mmssoofftt--qquuaadd--ffllooaatt --mmiimmppuurree--tteexxtt
           --mmnnoo--iimmppuurree--tteexxtt  --mmlliittttllee--eennddiiaann --mmssttaacckk--bbiiaass
           --mmnnoo--ssttaacckk--bbiiaass --mmuunnaalliiggnneedd--ddoouubblleess
           --mmnnoo--uunnaalliiggnneedd--ddoouubblleess --mmvv88pplluuss  --mmnnoo--vv88pplluuss  --mmvviiss
           --mmnnoo--vviiss --tthhrreeaaddss --pptthhrreeaaddss --pptthhrreeaadd

           _S_P_U _O_p_t_i_o_n_s --mmwwaarrnn--rreelloocc --mmeerrrroorr--rreelloocc --mmssaaffee--ddmmaa
           --mmuunnssaaffee--ddmmaa --mmbbrraanncchh--hhiinnttss --mmssmmaallll--mmeemm --mmllaarrggee--mmeemm
           --mmssttddmmaaiinn --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e

           _S_y_s_t_e_m _V _O_p_t_i_o_n_s --QQyy  --QQnn  --YYPP,,_p_a_t_h_s  --YYmm,,_d_i_r

           _V_8_5_0 _O_p_t_i_o_n_s --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss  --mmeepp
           --mmnnoo--eepp --mmpprroolloogg--ffuunnccttiioonn  --mmnnoo--pprroolloogg--ffuunnccttiioonn
           --mmssppaaccee --mmttddaa==_n  --mmssddaa==_n  --mmzzddaa==_n --mmaapppp--rreeggss
           --mmnnoo--aapppp--rreeggss --mmddiissaabbllee--ccaalllltt  --mmnnoo--ddiissaabbllee--ccaalllltt
           --mmvv885500ee11 --mmvv885500ee --mmvv885500  --mmbbiigg--sswwiittcchh

           _V_A_X _O_p_t_i_o_n_s --mmgg  --mmggnnuu  --mmuunniixx




gcc-4.3.2                   2008-08-27                         11





GCC(1)                         GNU                         GCC(1)


           _V_x_W_o_r_k_s _O_p_t_i_o_n_s --mmrrttpp  --nnoonn--ssttaattiicc  --BBssttaattiicc
           --BBddyynnaammiicc --XXbbiinndd--llaazzyy  --XXbbiinndd--nnooww

           _x_8_6_-_6_4 _O_p_t_i_o_n_s See i386 and x86-64 Options.

           _X_s_t_o_r_m_y_1_6 _O_p_t_i_o_n_s --mmssiimm

           _X_t_e_n_s_a _O_p_t_i_o_n_s --mmccoonnsstt1166 --mmnnoo--ccoonnsstt1166 --mmffuusseedd--mmaadddd
           --mmnnoo--ffuusseedd--mmaadddd --mmtteexxtt--sseeccttiioonn--lliitteerraallss
           --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss --mmttaarrggeett--aalliiggnn
           --mmnnoo--ttaarrggeett--aalliiggnn --mmlloonnggccaallllss  --mmnnoo--lloonnggccaallllss

           _z_S_e_r_i_e_s _O_p_t_i_o_n_s See S/390 and zSeries Options.

       _C_o_d_e _G_e_n_e_r_a_t_i_o_n _O_p_t_i_o_n_s
           --ffccaallll--ssaavveedd--_r_e_g  --ffccaallll--uusseedd--_r_e_g --ffffiixxeedd--_r_e_g
           --ffeexxcceeppttiioonnss --ffnnoonn--ccaallll--eexxcceeppttiioonnss  --ffuunnwwiinndd--ttaabblleess
           --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffuunnccttiioonn--lliisstt==_s_y_m,,_s_y_m,,......
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffiillee--lliisstt==_f_i_l_e,,_f_i_l_e,,......
           --ffnnoo--ccoommmmoonn  --ffnnoo--iiddeenntt --ffppcccc--ssttrruucctt--rreettuurrnn  --ffppiicc
           --ffPPIICC --ffppiiee --ffPPIIEE --ffnnoo--jjuummpp--ttaabblleess
           --ffrreeccoorrdd--ggcccc--sswwiittcchheess --ffrreegg--ssttrruucctt--rreettuurrnn
           --ffsshhoorrtt--eennuummss --ffsshhoorrtt--ddoouubbllee  --ffsshhoorrtt--wwcchhaarr
           --ffvveerrbboossee--aassmm  --ffppaacckk--ssttrruucctt[[==_n]]  --ffssttaacckk--cchheecckk
           --ffssttaacckk--lliimmiitt--rreeggiisstteerr==_r_e_g  --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m
           --ffnnoo--ssttaacckk--lliimmiitt  --ffaarrgguummeenntt--aalliiaass  --ffaarrgguummeenntt--nnooaalliiaass
           --ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall  --ffaarrgguummeenntt--nnooaalliiaass--aannyytthhiinngg
           --fflleeaaddiinngg--uunnddeerrssccoorree  --ffttllss--mmooddeell==_m_o_d_e_l --ffttrraappvv
           --ffwwrraappvv  --ffbboouunnddss--cchheecckk --ffvviissiibbiilliittyy

       OOppttiioonnss CCoonnttrroolllliinngg tthhee KKiinndd ooff OOuuttppuutt

       Compilation can involve up to four stages: preprocessing,
       compilation proper, assembly and linking, always in that
       order.  GCC is capable of preprocessing and compiling
       several files either into several assembler input files,
       or into one assembler input file; then each assembler
       input file produces an object file, and linking combines
       all the object files (those newly compiled, and those
       specified as input) into an executable file.

       For any given input file, the file name suffix determines
       what kind of compilation is done:

       _f_i_l_e..cc
           C source code which must be preprocessed.

       _f_i_l_e..ii
           C source code which should not be preprocessed.

       _f_i_l_e..iiii
           C++ source code which should not be preprocessed.



gcc-4.3.2                   2008-08-27                         12





GCC(1)                         GNU                         GCC(1)


       _f_i_l_e..mm
           Objective-C source code.  Note that you must link with
           the _l_i_b_o_b_j_c library to make an Objective-C program
           work.

       _f_i_l_e..mmii
           Objective-C source code which should not be
           preprocessed.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
           Objective-C++ source code.  Note that you must link
           with the _l_i_b_o_b_j_c library to make an Objective-C++
           program work.  Note that ..MM refers to a literal
           capital M.

       _f_i_l_e..mmiiii
           Objective-C++ source code which should not be
           preprocessed.

       _f_i_l_e..hh
           C, C++, Objective-C or Objective-C++ header file to be
           turned into a precompiled header.

       _f_i_l_e..cccc
       _f_i_l_e..ccpp
       _f_i_l_e..ccxxxx
       _f_i_l_e..ccpppp
       _f_i_l_e..CCPPPP
       _f_i_l_e..cc++++
       _f_i_l_e..CC
           C++ source code which must be preprocessed.  Note that
           in ..ccxxxx, the last two letters must both be literally
           xx.  Likewise, ..CC refers to a literal capital C.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
           Objective-C++ source code which must be preprocessed.

       _f_i_l_e..mmiiii
           Objective-C++ source code which should not be
           preprocessed.

       _f_i_l_e..hhhh
       _f_i_l_e..HH
       _f_i_l_e..hhpp
       _f_i_l_e..hhxxxx
       _f_i_l_e..hhpppp
       _f_i_l_e..HHPPPP
       _f_i_l_e..hh++++
       _f_i_l_e..ttcccc
           C++ header file to be turned into a precompiled
           header.




gcc-4.3.2                   2008-08-27                         13





GCC(1)                         GNU                         GCC(1)


       _f_i_l_e..ff
       _f_i_l_e..ffoorr
       _f_i_l_e..FFOORR
           Fixed form Fortran source code which should not be
           preprocessed.

       _f_i_l_e..FF
       _f_i_l_e..ffpppp
       _f_i_l_e..FFPPPP
           Fixed form Fortran source code which must be
           preprocessed (with the traditional preprocessor).

       _f_i_l_e..ff9900
       _f_i_l_e..ff9955
           Free form Fortran source code which should not be
           preprocessed.

       _f_i_l_e..FF9900
       _f_i_l_e..FF9955
           Free form Fortran source code which must be
           preprocessed (with the traditional preprocessor).

       _f_i_l_e..aaddss
           Ada source code file which contains a library unit
           declaration (a declaration of a package, subprogram,
           or generic, or a generic instantiation), or a library
           unit renaming declaration (a package, generic, or
           subprogram renaming declaration).  Such files are also
           called _s_p_e_c_s.

       _f_i_l_e..aaddbb
           Ada source code file containing a library unit body (a
           subprogram or package body).  Such files are also
           called _b_o_d_i_e_s.

       _f_i_l_e..ss
           Assembler code.

       _f_i_l_e..SS
       _f_i_l_e..ssxx
           Assembler code which must be preprocessed.

       _o_t_h_e_r
           An object file to be fed straight into linking.  Any
           file name with no recognized suffix is treated this
           way.

       You can specify the input language explicitly with the --xx
       option:

       --xx _l_a_n_g_u_a_g_e
           Specify explicitly the _l_a_n_g_u_a_g_e for the following
           input files (rather than letting the compiler choose a
           default based on the file name suffix).  This option



gcc-4.3.2                   2008-08-27                         14





GCC(1)                         GNU                         GCC(1)


           applies to all following input files until the next --xx
           option.  Possible values for _l_a_n_g_u_a_g_e are:

                   c  c-header  c-cpp-output
                   c++  c++-header  c++-cpp-output
                   objective-c  objective-c-header  objective-c-cpp-output
                   objective-c++ objective-c++-header objective-c++-cpp-output
                   assembler  assembler-with-cpp
                   ada
                   f95  f95-cpp-input
                   java
                   treelang

       --xx nnoonnee
           Turn off any specification of a language, so that
           subsequent files are handled according to their file
           name suffixes (as they are if --xx has not been used at
           all).

       --ppaassss--eexxiitt--ccooddeess
           Normally the ggcccc program will exit with the code of 1
           if any phase of the compiler returns a non-success
           return code.  If you specify --ppaassss--eexxiitt--ccooddeess, the ggcccc
           program will instead return with numerically highest
           error produced by any phase that returned an error
           indication.  The C, C++, and Fortran frontends return
           4, if an internal compiler error is encountered.

       If you only want some of the stages of compilation, you
       can use --xx (or filename suffixes) to tell ggcccc where to
       start, and one of the options --cc, --SS, or --EE to say where
       ggcccc is to stop.  Note that some combinations (for example,
       --xx ccpppp--oouuttppuutt --EE) instruct ggcccc to do nothing at all.

       --cc  Compile or assemble the source files, but do not link.
           The linking stage simply is not done.  The ultimate
           output is in the form of an object file for each
           source file.

           By default, the object file name for a source file is
           made by replacing the suffix ..cc, ..ii, ..ss, etc., with
           ..oo.

           Unrecognized input files, not requiring compilation or
           assembly, are ignored.

       --SS  Stop after the stage of compilation proper; do not
           assemble.  The output is in the form of an assembler
           code file for each non-assembler input file specified.

           By default, the assembler file name for a source file
           is made by replacing the suffix ..cc, ..ii, etc., with ..ss.

           Input files that don't require compilation are



gcc-4.3.2                   2008-08-27                         15





GCC(1)                         GNU                         GCC(1)


           ignored.

       --EE  Stop after the preprocessing stage; do not run the
           compiler proper.  The output is in the form of
           preprocessed source code, which is sent to the
           standard output.

           Input files which don't require preprocessing are
           ignored.

       --oo _f_i_l_e
           Place output in file _f_i_l_e.  This applies regardless to
           whatever sort of output is being produced, whether it
           be an executable file, an object file, an assembler
           file or preprocessed C code.

           If --oo is not specified, the default is to put an
           executable file in _a_._o_u_t, the object file for
           _s_o_u_r_c_e_._s_u_f_f_i_x in _s_o_u_r_c_e_._o, its assembler file in
           _s_o_u_r_c_e_._s, a precompiled header file in
           _s_o_u_r_c_e_._s_u_f_f_i_x_._g_c_h, and all preprocessed C source on
           standard output.

       --vv  Print (on standard error output) the commands executed
           to run the stages of compilation.  Also print the
           version number of the compiler driver program and of
           the preprocessor and the compiler proper.

       --######
           Like --vv except the commands are not executed and all
           command arguments are quoted.  This is useful for
           shell scripts to capture the driver-generated command
           lines.

       --ppiippee
           Use pipes rather than temporary files for
           communication between the various stages of
           compilation.  This fails to work on some systems where
           the assembler is unable to read from a pipe; but the
           GNU assembler has no trouble.

       --ccoommbbiinnee
           If you are compiling multiple source files, this
           option tells the driver to pass all the source files
           to the compiler at once (for those languages for which
           the compiler can handle this).  This will allow
           intermodule analysis (IMA) to be performed by the
           compiler.  Currently the only language for which this
           is supported is C.  If you pass source files for
           multiple languages to the driver, using this option,
           the driver will invoke the compiler(s) that support
           IMA once each, passing each compiler all the source
           files appropriate for it.  For those languages that do
           not support IMA this option will be ignored, and the



gcc-4.3.2                   2008-08-27                         16





GCC(1)                         GNU                         GCC(1)


           compiler will be invoked once for each source file in
           that language.  If you use this option in conjunction
           with --ssaavvee--tteemmppss, the compiler will generate multiple
           pre-processed files (one for each source file), but
           only one (combined) _._o or _._s file.

       ----hheellpp
           Print (on the standard output) a description of the
           command line options understood by ggcccc.  If the --vv
           option is also specified then ----hheellpp will also be
           passed on to the various processes invoked by ggcccc, so
           that they can display the command line options they
           accept.  If the --WWeexxttrraa option has also been specified
           (prior to the ----hheellpp option), then command line
           options which have no documentation associated with
           them will also be displayed.

       ----ttaarrggeett--hheellpp
           Print (on the standard output) a description of
           target-specific command line options for each tool.
           For some targets extra target-specific information may
           also be printed.

       ----hheellpp==_c_l_a_s_s[,,_q_u_a_l_i_f_i_e_r]
           Print (on the standard output) a description of the
           command line options understood by the compiler that
           fit into a specific class.  The class can be one of
           ooppttiimmiizzeerrss, wwaarrnniinnggss, ttaarrggeett, ppaarraammss, or _l_a_n_g_u_a_g_e:

           ooppttiimmiizzeerrss
               This will display all of the optimization options
               supported by the compiler.

           wwaarrnniinnggss
               This will display all of the options controlling
               warning messages produced by the compiler.

           ttaarrggeett
               This will display target-specific options.  Unlike
               the ----ttaarrggeett--hheellpp option however, target-specific
               options of the linker and assembler will not be
               displayed.  This is because those tools do not
               currently support the extended ----hheellpp== syntax.

           ppaarraammss
               This will display the values recognized by the
               ----ppaarraamm option.

           _l_a_n_g_u_a_g_e
               This will display the options supported for
               _l_a_n_g_u_a_g_e, where _l_a_n_g_u_a_g_e is the name of one of the
               languages supported in this version of GCC.





gcc-4.3.2                   2008-08-27                         17





GCC(1)                         GNU                         GCC(1)


           ccoommmmoonn
               This will display the options that are common to
               all languages.

           It is possible to further refine the output of the
           ----hheellpp== option by adding a comma separated list of
           qualifiers after the class.  These can be any from the
           following list:

           uunnddooccuummeenntteedd
               Display only those options which are undocumented.

           jjooiinneedd
               Display options which take an argument that
               appears after an equal sign in the same continuous
               piece of text, such as: ----hheellpp==ttaarrggeett.

           sseeppaarraattee
               Display options which take an argument that
               appears as a separate word following the original
               option, such as: --oo oouuttppuutt--ffiillee.

           Thus for example to display all the undocumented
           target-specific switches supported by the compiler the
           following can be used:

                   --help=target,undocumented

           The sense of a qualifier can be inverted by prefixing
           it with the _^ character, so for example to display all
           binary warning options (i.e., ones that are either on
           or off and that do not take an argument), which have a
           description the following can be used:

                   --help=warnings,^joined,^undocumented

           A class can also be used as a qualifier, although this
           usually restricts the output by so much that there is
           nothing to display.  One case where it does work
           however is when one of the classes is _t_a_r_g_e_t.  So for
           example to display all the target-specific
           optimization options the following can be used:

                   --help=target,optimizers

           The ----hheellpp== option can be repeated on the command
           line.  Each successive use will display its requested
           class of options, skipping those that have already
           been displayed.

           If the --QQ option appears on the command line before
           the ----hheellpp== option, then the descriptive text
           displayed by ----hheellpp== is changed.  Instead of
           describing the displayed options, an indication is



gcc-4.3.2                   2008-08-27                         18





GCC(1)                         GNU                         GCC(1)


           given as to whether the option is enabled, disabled or
           set to a specific value (assuming that the compiler
           knows this at the point where the ----hheellpp== option is
           used).

           Here is a truncated example from the ARM port of ggcccc:

                     % gcc -Q -mabi=2 --help=target -c
                     The following options are target specific:
                     -mabi=                                2
                     -mabort-on-noreturn                   [disabled]
                     -mapcs                                [disabled]

           The output is sensitive to the effects of previous
           command line options, so for example it is possible to
           find out which optimizations are enabled at --OO22 by
           using:

                   -O2 --help=optimizers

           Alternatively you can discover which binary
           optimizations are enabled by --OO33 by using:

                   gcc -c -Q -O3 --help=optimizers > /tmp/O3-opts
                   gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts
                   diff /tmp/O2-opts /tmp/O3-opts | grep enabled

       ----vveerrssiioonn
           Display the version number and copyrights of the
           invoked GCC.

       @@_f_i_l_e
           Read command-line options from _f_i_l_e.  The options read
           are inserted in place of the original @_f_i_l_e option.
           If _f_i_l_e does not exist, or cannot be read, then the
           option will be treated literally, and not removed.

           Options in _f_i_l_e are separated by whitespace.  A
           whitespace character may be included in an option by
           surrounding the entire option in either single or
           double quotes.  Any character (including a backslash)
           may be included by prefixing the character to be
           included with a backslash.  The _f_i_l_e may itself
           contain additional @_f_i_l_e options; any such options
           will be processed recursively.

       CCoommppiilliinngg CC++++ PPrrooggrraammss

       C++ source files conventionally use one of the suffixes
       ..CC, ..cccc, ..ccpppp, ..CCPPPP, ..cc++++, ..ccpp, or ..ccxxxx; C++ header files
       often use ..hhhh, ..hhpppp, ..HH, or (for shared template code)
       ..ttcccc; and preprocessed C++ files use the suffix ..iiii.  GCC
       recognizes files with these names and compiles them as C++
       programs even if you call the compiler the same way as for



gcc-4.3.2                   2008-08-27                         19





GCC(1)                         GNU                         GCC(1)


       compiling C programs (usually with the name ggcccc).

       However, the use of ggcccc does not add the C++ library.  gg++++
       is a program that calls GCC and treats ..cc, ..hh and ..ii files
       as C++ source files instead of C source files unless --xx is
       used, and automatically specifies linking against the C++
       library.  This program is also useful when precompiling a
       C header file with a ..hh extension for use in C++
       compilations.  On many systems, gg++++ is also installed with
       the name cc++++.

       When you compile C++ programs, you may specify many of the
       same command-line options that you use for compiling
       programs in any language; or command-line options
       meaningful for C and related languages; or options that
       are meaningful only for C++ programs.

       OOppttiioonnss CCoonnttrroolllliinngg CC DDiiaalleecctt

       The following options control the dialect of C (or
       languages derived from C, such as C++, Objective-C and
       Objective-C++) that the compiler accepts:

       --aannssii
           In C mode, this is equivalent to --ssttdd==cc8899. In C++
           mode, it is equivalent to --ssttdd==cc++++9988.

           This turns off certain features of GCC that are
           incompatible with ISO C90 (when compiling C code), or
           of standard C++ (when compiling C++ code), such as the
           "asm" and "typeof" keywords, and predefined macros
           such as "unix" and "vax" that identify the type of
           system you are using.  It also enables the undesirable
           and rarely used ISO trigraph feature.  For the C
           compiler, it disables recognition of C++ style ////
           comments as well as the "inline" keyword.

           The alternate keywords "__asm__", "__extension__",
           "__inline__" and "__typeof__" continue to work despite
           --aannssii.  You would not want to use them in an ISO C
           program, of course, but it is useful to put them in
           header files that might be included in compilations
           done with --aannssii.  Alternate predefined macros such as
           "__unix__" and "__vax__" are also available, with or
           without --aannssii.

           The --aannssii option does not cause non-ISO programs to be
           rejected gratuitously.  For that, --ppeeddaannttiicc is
           required in addition to --aannssii.

           The macro "__STRICT_ANSI__" is predefined when the
           --aannssii option is used.  Some header files may notice
           this macro and refrain from declaring certain
           functions or defining certain macros that the ISO



gcc-4.3.2                   2008-08-27                         20





GCC(1)                         GNU                         GCC(1)


           standard doesn't call for; this is to avoid
           interfering with any programs that might use these
           names for other things.

           Functions that would normally be built in but do not
           have semantics defined by ISO C (such as "alloca" and
           "ffs") are not built-in functions when --aannssii is used.

       --ssttdd==
           Determine the language standard.   This option is
           currently only supported when compiling C or C++.

           The compiler can accept several base standards, such
           as cc8899 or cc++++9988, and GNU dialects of those standards,
           such as ggnnuu8899 or ggnnuu++++9988.  By specifing a base
           standard, the compiler will accept all programs
           following that standard and those using GNU extensions
           that do not contradict it.  For example, --ssttdd==cc8899
           turns off certain features of GCC that are
           incompatible with ISO C90, such as the "asm" and
           "typeof" keywords, but not other GNU extensions that
           do not have a meaning in ISO C90, such as omitting the
           middle term of a "?:" expression. On the other hand,
           by specifing a GNU dialect of a standard, all features
           the compiler support are enabled, even when those
           features change the meaning of the base standard and
           some strict-conforming programs may be rejected.  The
           particular standard is used by --ppeeddaannttiicc to identify
           which features are GNU extensions given that version
           of the standard. For example --ssttdd==ggnnuu8899 --ppeeddaannttiicc
           would warn about C++ style //// comments, while
           --ssttdd==ggnnuu9999 --ppeeddaannttiicc would not.

           A value for this option must be provided; possible
           values are

           cc8899
           iissoo99889999::11999900
               Support all ISO C90 programs (certain GNU
               extensions that conflict with ISO C90 are
               disabled). Same as --aannssii for C code.

           iissoo99889999::119999440099
               ISO C90 as modified in amendment 1.

           cc9999
           cc99xx
           iissoo99889999::11999999
           iissoo99889999::119999xx
               ISO C99.  Note that this standard is not yet fully
               supported; see
               <hhttttpp::////ggcccc..ggnnuu..oorrgg//ggcccc--44..33//cc9999ssttaattuuss..hhttmmll> for
               more information.  The names cc99xx and iissoo99889999::119999xx
               are deprecated.



gcc-4.3.2                   2008-08-27                         21





GCC(1)                         GNU                         GCC(1)


           ggnnuu8899
               GNU dialect of ISO C90 (including some C99
               features). This is the default for C code.

           ggnnuu9999
           ggnnuu99xx
               GNU dialect of ISO C99.  When ISO C99 is fully
               implemented in GCC, this will become the default.
               The name ggnnuu99xx is deprecated.

           cc++++9988
               The 1998 ISO C++ standard plus amendments. Same as
               --aannssii for C++ code.

           ggnnuu++++9988
               GNU dialect of --ssttdd==cc++++9988.  This is the default
               for C++ code.

           cc++++00xx
               The working draft of the upcoming ISO C++0x
               standard. This option enables experimental
               features that are likely to be included in C++0x.
               The working draft is constantly changing, and any
               feature that is enabled by this flag may be
               removed from future versions of GCC if it is not
               part of the C++0x standard.

           ggnnuu++++00xx
               GNU dialect of --ssttdd==cc++++00xx. This option enables
               experimental features that may be removed in
               future versions of GCC.

       --ffggnnuu8899--iinnlliinnee
           The option --ffggnnuu8899--iinnlliinnee tells GCC to use the
           traditional GNU semantics for "inline" functions when
           in C99 mode.
             This option is accepted and ignored by GCC versions
           4.1.3 up to but not including 4.3.  In GCC versions
           4.3 and later it changes the behavior of GCC in C99
           mode.  Using this option is roughly equivalent to
           adding the "gnu_inline" function attribute to all
           inline functions.

           The option --ffnnoo--ggnnuu8899--iinnlliinnee explicitly tells GCC to
           use the C99 semantics for "inline" when in C99 or
           gnu99 mode (i.e., it specifies the default behavior).
           This option was first supported in GCC 4.3.  This
           option is not supported in C89 or gnu89 mode.

           The preprocessor macros "__GNUC_GNU_INLINE__" and
           "__GNUC_STDC_INLINE__" may be used to check which
           semantics are in effect for "inline" functions.





gcc-4.3.2                   2008-08-27                         22





GCC(1)                         GNU                         GCC(1)


       --aauuxx--iinnffoo _f_i_l_e_n_a_m_e
           Output to the given filename prototyped declarations
           for all functions declared and/or defined in a
           translation unit, including those in header files.
           This option is silently ignored in any language other
           than C.

           Besides declarations, the file indicates, in comments,
           the origin of each declaration (source file and line),
           whether the declaration was implicit, prototyped or
           unprototyped (II, NN for new or OO for old, respectively,
           in the first character after the line number and the
           colon), and whether it came from a declaration or a
           definition (CC or FF, respectively, in the following
           character).  In the case of function definitions, a
           K&R-style list of arguments followed by their
           declarations is also provided, inside comments, after
           the declaration.

       --ffnnoo--aassmm
           Do not recognize "asm", "inline" or "typeof" as a
           keyword, so that code can use these words as
           identifiers.  You can use the keywords "__asm__",
           "__inline__" and "__typeof__" instead.  --aannssii implies
           --ffnnoo--aassmm.

           In C++, this switch only affects the "typeof" keyword,
           since "asm" and "inline" are standard keywords.  You
           may want to use the --ffnnoo--ggnnuu--kkeeyywwoorrddss flag instead,
           which has the same effect.  In C99 mode (--ssttdd==cc9999 or
           --ssttdd==ggnnuu9999), this switch only affects the "asm" and
           "typeof" keywords, since "inline" is a standard
           keyword in ISO C99.

       --ffnnoo--bbuuiillttiinn
       --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n
           Don't recognize built-in functions that do not begin
           with ____bbuuiillttiinn__ as prefix.

           GCC normally generates special code to handle certain
           built-in functions more efficiently; for instance,
           calls to "alloca" may become single instructions that
           adjust the stack directly, and calls to "memcpy" may
           become inline copy loops.  The resulting code is often
           both smaller and faster, but since the function calls
           no longer appear as such, you cannot set a breakpoint
           on those calls, nor can you change the behavior of the
           functions by linking with a different library.  In
           addition, when a function is recognized as a built-in
           function, GCC may use information about that function
           to warn about problems with calls to that function, or
           to generate more efficient code, even if the resulting
           code still contains calls to that function.  For
           example, warnings are given with --WWffoorrmmaatt for bad



gcc-4.3.2                   2008-08-27                         23





GCC(1)                         GNU                         GCC(1)


           calls to "printf", when "printf" is built in, and
           "strlen" is known not to modify global memory.

           With the --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n option only the built-
           in function _f_u_n_c_t_i_o_n is disabled.  _f_u_n_c_t_i_o_n must not
           begin with ____bbuuiillttiinn__.  If a function is named this is
           not built-in in this version of GCC, this option is
           ignored.  There is no corresponding --ffbbuuiillttiinn--_f_u_n_c_t_i_o_n
           option; if you wish to enable built-in functions
           selectively when using --ffnnoo--bbuuiillttiinn or --ffffrreeeessttaannddiinngg,
           you may define macros such as:

                   #define abs(n)          __builtin_abs ((n))
                   #define strcpy(d, s)    __builtin_strcpy ((d), (s))

       --ffhhoosstteedd
           Assert that compilation takes place in a hosted
           environment.  This implies --ffbbuuiillttiinn.  A hosted
           environment is one in which the entire standard
           library is available, and in which "main" has a return
           type of "int".  Examples are nearly everything except
           a kernel.  This is equivalent to --ffnnoo--ffrreeeessttaannddiinngg.

       --ffffrreeeessttaannddiinngg
           Assert that compilation takes place in a freestanding
           environment.  This implies --ffnnoo--bbuuiillttiinn.  A
           freestanding environment is one in which the standard
           library may not exist, and program startup may not
           necessarily be at "main".  The most obvious example is
           an OS kernel.  This is equivalent to --ffnnoo--hhoosstteedd.

       --ffooppeennmmpp
           Enable handling of OpenMP directives "#pragma omp" in
           C/C++ and "!$omp" in Fortran.  When --ffooppeennmmpp is
           specified, the compiler generates parallel code
           according to the OpenMP Application Program Interface
           v2.5 <hhttttpp::////wwwwww..ooppeennmmpp..oorrgg//>.  This option implies
           --pptthhrreeaadd, and thus is only supported on targets that
           have support for --pptthhrreeaadd.

       --ffmmss--eexxtteennssiioonnss
           Accept some non-standard constructs used in Microsoft
           header files.

           Some cases of unnamed fields in structures and unions
           are only accepted with this option.

       --ttrriiggrraapphhss
           Support ISO C trigraphs.  The --aannssii option (and --ssttdd
           options for strict ISO C conformance) implies
           --ttrriiggrraapphhss.

       --nnoo--iinntteeggrraatteedd--ccpppp
           Performs a compilation in two passes: preprocessing



gcc-4.3.2                   2008-08-27                         24





GCC(1)                         GNU                         GCC(1)


           and compiling.  This option allows a user supplied
           "cc1", "cc1plus", or "cc1obj" via the --BB option.  The
           user supplied compilation step can then add in an
           additional preprocessing step after normal
           preprocessing but before compiling.  The default is to
           use the integrated cpp (internal cpp)

           The semantics of this option will change if "cc1",
           "cc1plus", and "cc1obj" are merged.

       --ttrraaddiittiioonnaall
       --ttrraaddiittiioonnaall--ccpppp
           Formerly, these options caused GCC to attempt to
           emulate a pre-standard C compiler.  They are now only
           supported with the --EE switch.  The preprocessor
           continues to support a pre-standard mode.  See the GNU
           CPP manual for details.

       --ffccoonndd--mmiissmmaattcchh
           Allow conditional expressions with mismatched types in
           the second and third arguments.  The value of such an
           expression is void.  This option is not supported for
           C++.

       --ffllaaxx--vveeccttoorr--ccoonnvveerrssiioonnss
           Allow implicit conversions between vectors with
           differing numbers of elements and/or incompatible
           element types.  This option should not be used for new
           code.

       --ffuunnssiiggnneedd--cchhaarr
           Let the type "char" be unsigned, like "unsigned char".

           Each kind of machine has a default for what "char"
           should be.  It is either like "unsigned char" by
           default or like "signed char" by default.

           Ideally, a portable program should always use "signed
           char" or "unsigned char" when it depends on the
           signedness of an object.  But many programs have been
           written to use plain "char" and expect it to be
           signed, or expect it to be unsigned, depending on the
           machines they were written for.  This option, and its
           inverse, let you make such a program work with the
           opposite default.

           The type "char" is always a distinct type from each of
           "signed char" or "unsigned char", even though its
           behavior is always just like one of those two.

       --ffssiiggnneedd--cchhaarr
           Let the type "char" be signed, like "signed char".

           Note that this is equivalent to --ffnnoo--uunnssiiggnneedd--cchhaarr,



gcc-4.3.2                   2008-08-27                         25





GCC(1)                         GNU                         GCC(1)


           which is the negative form of --ffuunnssiiggnneedd--cchhaarr.
           Likewise, the option --ffnnoo--ssiiggnneedd--cchhaarr is equivalent to
           --ffuunnssiiggnneedd--cchhaarr.

       --ffssiiggnneedd--bbiittffiieellddss
       --ffuunnssiiggnneedd--bbiittffiieellddss
       --ffnnoo--ssiiggnneedd--bbiittffiieellddss
       --ffnnoo--uunnssiiggnneedd--bbiittffiieellddss
           These options control whether a bit-field is signed or
           unsigned, when the declaration does not use either
           "signed" or "unsigned".  By default, such a bit-field
           is signed, because this is consistent: the basic
           integer types such as "int" are signed types.

       OOppttiioonnss CCoonnttrroolllliinngg CC++++ DDiiaalleecctt

       This section describes the command-line options that are
       only meaningful for C++ programs; but you can also use
       most of the GNU compiler options regardless of what
       language your program is in.  For example, you might
       compile a file "firstClass.C" like this:

               g++ -g -frepo -O -c firstClass.C

       In this example, only --ffrreeppoo is an option meant only for
       C++ programs; you can use the other options with any
       language supported by GCC.

       Here is a list of options that are _o_n_l_y for compiling C++
       programs:

       --ffaabbii--vveerrssiioonn==_n
           Use version _n of the C++ ABI.  Version 2 is the
           version of the C++ ABI that first appeared in G++ 3.4.
           Version 1 is the version of the C++ ABI that first
           appeared in G++ 3.2.  Version 0 will always be the
           version that conforms most closely to the C++ ABI
           specification.  Therefore, the ABI obtained using
           version 0 will change as ABI bugs are fixed.

           The default is version 2.

       --ffnnoo--aacccceessss--ccoonnttrrooll
           Turn off all access checking.  This switch is mainly
           useful for working around bugs in the access control
           code.

       --ffcchheecckk--nneeww
           Check that the pointer returned by "operator new" is
           non-null before attempting to modify the storage
           allocated.  This check is normally unnecessary because
           the C++ standard specifies that "operator new" will
           only return 0 if it is declared _tt_hh_rr_oo_ww_((_)), in which case
           the compiler will always check the return value even



gcc-4.3.2                   2008-08-27                         26





GCC(1)                         GNU                         GCC(1)


           without this option.  In all other cases, when
           "operator new" has a non-empty exception
           specification, memory exhaustion is signalled by
           throwing "std::bad_alloc".  See also nneeww ((nnootthhrrooww)).

       --ffccoonnsseerrvvee--ssppaaccee
           Put uninitialized or runtime-initialized global
           variables into the common segment, as C does.  This
           saves space in the executable at the cost of not
           diagnosing duplicate definitions.  If you compile with
           this flag and your program mysteriously crashes after
           "main()" has completed, you may have an object that is
           being destroyed twice because two definitions were
           merged.

           This option is no longer useful on most targets, now
           that support has been added for putting variables into
           BSS without making them common.

       --ffffrriieenndd--iinnjjeeccttiioonn
           Inject friend functions into the enclosing namespace,
           so that they are visible outside the scope of the
           class in which they are declared.  Friend functions
           were documented to work this way in the old Annotated
           C++ Reference Manual, and versions of G++ before 4.1
           always worked that way.  However, in ISO C++ a friend
           function which is not declared in an enclosing scope
           can only be found using argument dependent lookup.
           This option causes friends to be injected as they were
           in earlier releases.

           This option is for compatibility, and may be removed
           in a future release of G++.

       --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss
           The C++ standard allows an implementation to omit
           creating a temporary which is only used to initialize
           another object of the same type.  Specifying this
           option disables that optimization, and forces G++ to
           call the copy constructor in all cases.

       --ffnnoo--eennffoorrccee--eehh--ssppeeccss
           Don't generate code to check for violation of
           exception specifications at runtime.  This option
           violates the C++ standard, but may be useful for
           reducing code size in production builds, much like
           defining NNDDEEBBUUGG.  This does not give user code
           permission to throw exceptions in violation of the
           exception specifications; the compiler will still
           optimize based on the specifications, so throwing an
           unexpected exception will result in undefined
           behavior.





gcc-4.3.2                   2008-08-27                         27





GCC(1)                         GNU                         GCC(1)


       --ffffoorr--ssccooppee
       --ffnnoo--ffoorr--ssccooppee
           If --ffffoorr--ssccooppee is specified, the scope of variables
           declared in a _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t is limited to the ffoorr
           loop itself, as specified by the C++ standard.  If
           --ffnnoo--ffoorr--ssccooppee is specified, the scope of variables
           declared in a _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t extends to the end of
           the enclosing scope, as was the case in old versions
           of G++, and other (traditional) implementations of
           C++.

           The default if neither flag is given to follow the
           standard, but to allow and give a warning for old-
           style code that would otherwise be invalid, or have
           different behavior.

       --ffnnoo--ggnnuu--kkeeyywwoorrddss
           Do not recognize "typeof" as a keyword, so that code
           can use this word as an identifier.  You can use the
           keyword "__typeof__" instead.  --aannssii implies
           --ffnnoo--ggnnuu--kkeeyywwoorrddss.

       --ffnnoo--iimmpplliicciitt--tteemmppllaatteess
           Never emit code for non-inline templates which are
           instantiated implicitly (i.e. by use); only emit code
           for explicit instantiations.

       --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess
           Don't emit code for implicit instantiations of inline
           templates, either.  The default is to handle inlines
           differently so that compiles with and without
           optimization will need the same set of explicit
           instantiations.

       --ffnnoo--iimmpplleemmeenntt--iinnlliinneess
           To save space, do not emit out-of-line copies of
           inline functions controlled by ##pprraaggmmaa iimmpplleemmeennttaattiioonn.
           This will cause linker errors if these functions are
           not inlined everywhere they are called.

       --ffmmss--eexxtteennssiioonnss
           Disable pedantic warnings about constructs used in
           MFC, such as implicit int and getting a pointer to
           member function via non-standard syntax.

       --ffnnoo--nnoonnaannssii--bbuuiillttiinnss
           Disable built-in declarations of functions that are
           not mandated by ANSI/ISO C.  These include "ffs",
           "alloca", "_exit", "index", "bzero", "conjf", and
           other related functions.

       --ffnnoo--ooppeerraattoorr--nnaammeess
           Do not treat the operator name keywords "and",
           "bitand", "bitor", "compl", "not", "or" and "xor" as



gcc-4.3.2                   2008-08-27                         28





GCC(1)                         GNU                         GCC(1)


           synonyms as keywords.

       --ffnnoo--ooppttiioonnaall--ddiiaaggss
           Disable diagnostics that the standard says a compiler
           does not need to issue.  Currently, the only such
           diagnostic issued by G++ is the one for a name having
           multiple meanings within a class.

       --ffppeerrmmiissssiivvee
           Downgrade some diagnostics about nonconformant code
           from errors to warnings.  Thus, using --ffppeerrmmiissssiivvee
           will allow some nonconforming code to compile.

       --ffrreeppoo
           Enable automatic template instantiation at link time.
           This option also implies --ffnnoo--iimmpplliicciitt--tteemmppllaatteess.

       --ffnnoo--rrttttii
           Disable generation of information about every class
           with virtual functions for use by the C++ runtime type
           identification features (ddyynnaammiicc__ccaasstt and ttyyppeeiidd).  If
           you don't use those parts of the language, you can
           save some space by using this flag.  Note that
           exception handling uses the same information, but it
           will generate it as needed. The ddyynnaammiicc__ccaasstt operator
           can still be used for casts that do not require
           runtime type information, i.e. casts to "void *" or to
           unambiguous base classes.

       --ffssttaattss
           Emit statistics about front-end processing at the end
           of the compilation.  This information is generally
           only useful to the G++ development team.

       --fftteemmppllaattee--ddeepptthh--_n
           Set the maximum instantiation depth for template
           classes to _n.  A limit on the template instantiation
           depth is needed to detect endless recursions during
           template class instantiation.  ANSI/ISO C++ conforming
           programs must not rely on a maximum depth greater than
           17.

       --ffnnoo--tthhrreeaaddssaaffee--ssttaattiiccss
           Do not emit the extra code to use the routines
           specified in the C++ ABI for thread-safe
           initialization of local statics.  You can use this
           option to reduce code size slightly in code that
           doesn't need to be thread-safe.

       --ffuussee--ccxxaa--aatteexxiitt
           Register destructors for objects with static storage
           duration with the "__cxa_atexit" function rather than
           the "atexit" function.  This option is required for
           fully standards-compliant handling of static



gcc-4.3.2                   2008-08-27                         29





GCC(1)                         GNU                         GCC(1)


           destructors, but will only work if your C library
           supports "__cxa_atexit".

       --ffnnoo--uussee--ccxxaa--ggeett--eexxcceeppttiioonn--ppttrr
           Don't use the "__cxa_get_exception_ptr" runtime
           routine.  This will cause "std::uncaught_exception" to
           be incorrect, but is necessary if the runtime routine
           is not available.

       --ffvviissiibbiilliittyy--iinnlliinneess--hhiiddddeenn
           This switch declares that the user does not attempt to
           compare pointers to inline methods where the addresses
           of the two functions were taken in different shared
           objects.

           The effect of this is that GCC may, effectively, mark
           inline methods with "__attribute__ ((visibility
           ("hidden")))" so that they do not appear in the export
           table of a DSO and do not require a PLT indirection
           when used within the DSO.  Enabling this option can
           have a dramatic effect on load and link times of a DSO
           as it massively reduces the size of the dynamic export
           table when the library makes heavy use of templates.

           The behavior of this switch is not quite the same as
           marking the methods as hidden directly, because it
           does not affect static variables local to the function
           or cause the compiler to deduce that the function is
           defined in only one shared object.

           You may mark a method as having a visibility
           explicitly to negate the effect of the switch for that
           method.  For example, if you do want to compare
           pointers to a particular inline method, you might mark
           it as having default visibility.  Marking the
           enclosing class with explicit visibility will have no
           effect.

           Explicitly instantiated inline methods are unaffected
           by this option as their linkage might otherwise cross
           a shared library boundary.

       --ffvviissiibbiilliittyy--mmss--ccoommppaatt
           This flag attempts to use visibility settings to make
           GCC's C++ linkage model compatible with that of
           Microsoft Visual Studio.

           The flag makes these changes to GCC's linkage model:

           1.  It sets the default visibility to "hidden", like
               --ffvviissiibbiilliittyy==hhiiddddeenn.

           2.  Types, but not their members, are not hidden by
               default.



gcc-4.3.2                   2008-08-27                         30





GCC(1)                         GNU                         GCC(1)


           3.  The One Definition Rule is relaxed for types
               without explicit visibility specifications which
               are defined in more than one different shared
               object: those declarations are permitted if they
               would have been permitted when this option was not
               used.

           In new code it is better to use --ffvviissiibbiilliittyy==hhiiddddeenn
           and export those classes which are intended to be
           externally visible.  Unfortunately it is possible for
           code to rely, perhaps accidentally, on the Visual
           Studio behavior.

           Among the consequences of these changes are that
           static data members of the same type with the same
           name but defined in different shared objects will be
           different, so changing one will not change the other;
           and that pointers to function members defined in
           different shared objects may not compare equal.  When
           this flag is given, it is a violation of the ODR to
           define types with the same name differently.

       --ffnnoo--wweeaakk
           Do not use weak symbol support, even if it is provided
           by the linker.  By default, G++ will use weak symbols
           if they are available.  This option exists only for
           testing, and should not be used by end-users; it will
           result in inferior code and has no benefits.  This
           option may be removed in a future release of G++.

       --nnoossttddiinncc++++
           Do not search for header files in the standard
           directories specific to C++, but do still search the
           other standard directories.  (This option is used when
           building the C++ library.)

       In addition, these optimization, warning, and code
       generation options have meanings only for C++ programs:

       --ffnnoo--ddeeffaauulltt--iinnlliinnee
           Do not assume iinnlliinnee for functions defined inside a
           class scope.
             Note that these functions will have linkage like
           inline functions; they just won't be inlined by
           default.

       --WWaabbii (C++ and Objective-C++ only)
           Warn when G++ generates code that is probably not
           compatible with the vendor-neutral C++ ABI.  Although
           an effort has been made to warn about all such cases,
           there are probably some cases that are not warned
           about, even though G++ is generating incompatible
           code.  There may also be cases where warnings are
           emitted even though the code that is generated will be



gcc-4.3.2                   2008-08-27                         31





GCC(1)                         GNU                         GCC(1)


           compatible.

           You should rewrite your code to avoid these warnings
           if you are concerned about the fact that code
           generated by G++ may not be binary compatible with
           code generated by other compilers.

           The known incompatibilities at this point include:

           *   Incorrect handling of tail-padding for bit-fields.
               G++ may attempt to pack data into the same byte as
               a base class.  For example:

                       struct A { virtual void f(); int f1 : 1; };
                       struct B : public A { int f2 : 1; };

               In this case, G++ will place "B::f2" into the same
               byte as"A::f1"; other compilers will not.  You can
               avoid this problem by explicitly padding "A" so
               that its size is a multiple of the byte size on
               your platform; that will cause G++ and other
               compilers to layout "B" identically.

           *   Incorrect handling of tail-padding for virtual
               bases.  G++ does not use tail padding when laying
               out virtual bases.  For example:

                       struct A { virtual void f(); char c1; };
                       struct B { B(); char c2; };
                       struct C : public A, public virtual B {};

               In this case, G++ will not place "B" into the
               tail-padding for "A"; other compilers will.  You
               can avoid this problem by explicitly padding "A"
               so that its size is a multiple of its alignment
               (ignoring virtual base classes); that will cause
               G++ and other compilers to layout "C" identically.

           *   Incorrect handling of bit-fields with declared
               widths greater than that of their underlying
               types, when the bit-fields appear in a union.  For
               example:

                       union U { int i : 4096; };

               Assuming that an "int" does not have 4096 bits,
               G++ will make the union too small by the number of
               bits in an "int".

           *   Empty classes can be placed at incorrect offsets.
               For example:

                       struct A {};




gcc-4.3.2                   2008-08-27                         32





GCC(1)                         GNU                         GCC(1)


                       struct B {
                         A a;
                         virtual void f ();
                       };

                       struct C : public B, public A {};

               G++ will place the "A" base class of "C" at a
               nonzero offset; it should be placed at offset
               zero.  G++ mistakenly believes that the "A" data
               member of "B" is already at offset zero.

           *   Names of template functions whose types involve
               "typename" or template template parameters can be
               mangled incorrectly.

                       template <typename Q>
                       void f(typename Q::X) {}

                       template <template <typename> class Q>
                       void f(typename Q<int>::X) {}

               Instantiations of these templates may be mangled
               incorrectly.

       --WWccttoorr--ddttoorr--pprriivvaaccyy (C++ and Objective-C++ only)
           Warn when a class seems unusable because all the
           constructors or destructors in that class are private,
           and it has neither friends nor public static member
           functions.

       --WWnnoonn--vviirrttuuaall--ddttoorr (C++ and Objective-C++ only)
           Warn when a class has virtual functions and accessible
           non-virtual destructor, in which case it would be
           possible but unsafe to delete an instance of a derived
           class through a pointer to the base class.  This
           warning is also enabled if -Weffc++ is specified.

       --WWrreeoorrddeerr (C++ and Objective-C++ only)
           Warn when the order of member initializers given in
           the code does not match the order in which they must
           be executed.  For instance:

                   struct A {
                     int i;
                     int j;
                     A(): j (0), i (1) { }
                   };

           The compiler will rearrange the member initializers
           for ii and jj to match the declaration order of the
           members, emitting a warning to that effect.  This
           warning is enabled by --WWaallll.




gcc-4.3.2                   2008-08-27                         33





GCC(1)                         GNU                         GCC(1)


       The following --WW...... options are not affected by --WWaallll.

       --WWeeffffcc++++ (C++ and Objective-C++ only)
           Warn about violations of the following style
           guidelines from Scott Meyers' _E_f_f_e_c_t_i_v_e _C_+_+ book:

           *   Item 11:  Define a copy constructor and an
               assignment operator for classes with dynamically
               allocated memory.

           *   Item 12:  Prefer initialization to assignment in
               constructors.

           *   Item 14:  Make destructors virtual in base
               classes.

           *   Item 15:  Have "operator=" return a reference to
               *this.

           *   Item 23:  Don't try to return a reference when you
               must return an object.

           Also warn about violations of the following style
           guidelines from Scott Meyers' _M_o_r_e _E_f_f_e_c_t_i_v_e _C_+_+ book:

           *   Item 6:  Distinguish between prefix and postfix
               forms of increment and decrement operators.

           *   Item 7:  Never overload "&&", "||", or ",".

           When selecting this option, be aware that the standard
           library headers do not obey all of these guidelines;
           use ggrreepp --vv to filter out those warnings.

       --WWnnoo--ddeepprreeccaatteedd (C++ and Objective-C++ only)
           Do not warn about usage of deprecated features.

       --WWssttrriicctt--nnuullll--sseennttiinneell (C++ and Objective-C++ only)
           Warn also about the use of an uncasted "NULL" as
           sentinel.  When compiling only with GCC this is a
           valid sentinel, as "NULL" is defined to "__null".
           Although it is a null pointer constant not a null
           pointer, it is guaranteed to of the same size as a
           pointer.  But this use is not portable across
           different compilers.

       --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd (C++ and Objective-C++ only)
           Disable warnings when non-templatized friend functions
           are declared within a template.  Since the advent of
           explicit template specification support in G++, if the
           name of the friend is an unqualified-id (i.e., ffrriieenndd
           ffoooo((iinntt))), the C++ language specification demands that
           the friend declare or define an ordinary, nontemplate
           function.  (Section 14.5.3).  Before G++ implemented



gcc-4.3.2                   2008-08-27                         34





GCC(1)                         GNU                         GCC(1)


           explicit specification, unqualified-ids could be
           interpreted as a particular specialization of a
           templatized function.  Because this non-conforming
           behavior is no longer the default behavior for G++,
           --WWnnoonn--tteemmppllaattee--ffrriieenndd allows the compiler to check
           existing code for potential trouble spots and is on by
           default.  This new compiler behavior can be turned off
           with --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd which keeps the
           conformant compiler code but disables the helpful
           warning.

       --WWoolldd--ssttyyllee--ccaasstt (C++ and Objective-C++ only)
           Warn if an old-style (C-style) cast to a non-void type
           is used within a C++ program.  The new-style casts
           (ddyynnaammiicc__ccaasstt, ssttaattiicc__ccaasstt, rreeiinntteerrpprreett__ccaasstt, and
           ccoonnsstt__ccaasstt) are less vulnerable to unintended effects
           and much easier to search for.

       --WWoovveerrllooaaddeedd--vviirrttuuaall (C++ and Objective-C++ only)
           Warn when a function declaration hides virtual
           functions from a base class.  For example, in:

                   struct A {
                     virtual void f();
                   };

                   struct B: public A {
                     void f(int);
                   };

           the "A" class version of "f" is hidden in "B", and
           code like:

                   B* b;
                   b->f();

           will fail to compile.

       --WWnnoo--ppmmff--ccoonnvveerrssiioonnss (C++ and Objective-C++ only)
           Disable the diagnostic for converting a bound pointer
           to member function to a plain pointer.

       --WWssiiggnn--pprroommoo (C++ and Objective-C++ only)
           Warn when overload resolution chooses a promotion from
           unsigned or enumerated type to a signed type, over a
           conversion to an unsigned type of the same size.
           Previous versions of G++ would try to preserve
           unsignedness, but the standard mandates the current
           behavior.

                   struct A {
                     operator int ();
                     A& operator = (int);
                   };



gcc-4.3.2                   2008-08-27                         35





GCC(1)                         GNU                         GCC(1)


                   main ()
                   {
                     A a,b;
                     a = b;
                   }

           In this example, G++ will synthesize a default AA&&
           ooppeerraattoorr == ((ccoonnsstt AA&&));;, while cfront will use the
           user-defined ooppeerraattoorr ==.

       OOppttiioonnss CCoonnttrroolllliinngg OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleeccttss

       (NOTE: This manual does not describe the Objective-C and
       Objective-C++ languages themselves.  See

       This section describes the command-line options that are
       only meaningful for Objective-C and Objective-C++
       programs, but you can also use most of the language-
       independent GNU compiler options.  For example, you might
       compile a file "some_class.m" like this:

               gcc -g -fgnu-runtime -O -c some_class.m

       In this example, --ffggnnuu--rruunnttiimmee is an option meant only for
       Objective-C and Objective-C++ programs; you can use the
       other options with any language supported by GCC.

       Note that since Objective-C is an extension of the C
       language, Objective-C compilations may also use options
       specific to the C front-end (e.g., --WWttrraaddiittiioonnaall).
       Similarly, Objective-C++ compilations may use C++-specific
       options (e.g., --WWaabbii).

       Here is a list of options that are _o_n_l_y for compiling
       Objective-C and Objective-C++ programs:

       --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e
           Use _c_l_a_s_s_-_n_a_m_e as the name of the class to instantiate
           for each literal string specified with the syntax
           "@"..."".  The default class name is
           "NXConstantString" if the GNU runtime is being used,
           and "NSConstantString" if the NeXT runtime is being
           used (see below).  The --ffccoonnssttaanntt--ccffssttrriinnggss option, if
           also present, will override the
           --ffccoonnssttaanntt--ssttrriinngg--ccllaassss setting and cause "@"...""
           literals to be laid out as constant CoreFoundation
           strings.

       --ffggnnuu--rruunnttiimmee
           Generate object code compatible with the standard GNU
           Objective-C runtime.  This is the default for most
           types of systems.





gcc-4.3.2                   2008-08-27                         36





GCC(1)                         GNU                         GCC(1)


       --ffnneexxtt--rruunnttiimmee
           Generate output compatible with the NeXT runtime.
           This is the default for NeXT-based systems, including
           Darwin and Mac OS X.  The macro "__NEXT_RUNTIME__" is
           predefined if (and only if) this option is used.

       --ffnnoo--nniill--rreecceeiivveerrss
           Assume that all Objective-C message dispatches (e.g.,
           "[receiver message:arg]") in this translation unit
           ensure that the receiver is not "nil".  This allows
           for more efficient entry points in the runtime to be
           used.  Currently, this option is only available in
           conjunction with the NeXT runtime on Mac OS X 10.3 and
           later.

       --ffoobbjjcc--ccaallll--ccxxxx--ccddttoorrss
           For each Objective-C class, check if any of its
           instance variables is a C++ object with a non-trivial
           default constructor.  If so, synthesize a special "-
           (id) .cxx_construct" instance method that will run
           non-trivial default constructors on any such instance
           variables, in order, and then return "self".
           Similarly, check if any instance variable is a C++
           object with a non-trivial destructor, and if so,
           synthesize a special "- (void) .cxx_destruct" method
           that will run all such default destructors, in reverse
           order.

           The "- (id) .cxx_construct" and/or "- (void)
           .cxx_destruct" methods thusly generated will only
           operate on instance variables declared in the current
           Objective-C class, and not those inherited from
           superclasses.  It is the responsibility of the
           Objective-C runtime to invoke all such methods in an
           object's inheritance hierarchy.  The "- (id)
           .cxx_construct" methods will be invoked by the runtime
           immediately after a new object instance is allocated;
           the "- (void) .cxx_destruct" methods will be invoked
           immediately before the runtime deallocates an object
           instance.

           As of this writing, only the NeXT runtime on Mac OS X
           10.4 and later has support for invoking the "- (id)
           .cxx_construct" and "- (void) .cxx_destruct" methods.

       --ffoobbjjcc--ddiirreecctt--ddiissppaattcchh
           Allow fast jumps to the message dispatcher.  On Darwin
           this is accomplished via the comm page.

       --ffoobbjjcc--eexxcceeppttiioonnss
           Enable syntactic support for structured exception
           handling in Objective-C, similar to what is offered by
           C++ and Java.  This option is unavailable in
           conjunction with the NeXT runtime on Mac OS X 10.2 and



gcc-4.3.2                   2008-08-27                         37





GCC(1)                         GNU                         GCC(1)


           earlier.

                     @try {
                       ...
                          @throw expr;
                       ...
                     }
                     @catch (AnObjCClass *exc) {
                       ...
                         @throw expr;
                       ...
                         @throw;
                       ...
                     }
                     @catch (AnotherClass *exc) {
                       ...
                     }
                     @catch (id allOthers) {
                       ...
                     }
                     @finally {
                       ...
                         @throw expr;
                       ...
                     }

           The @throw statement may appear anywhere in an
           Objective-C or Objective-C++ program; when used inside
           of a @catch block, the @throw may appear without an
           argument (as shown above), in which case the object
           caught by the @catch will be rethrown.

           Note that only (pointers to) Objective-C objects may
           be thrown and caught using this scheme.  When an
           object is thrown, it will be caught by the nearest
           @catch clause capable of handling objects of that
           type, analogously to how "catch" blocks work in C++
           and Java.  A "@catch(id ...)" clause (as shown above)
           may also be provided to catch any and all Objective-C
           exceptions not caught by previous @catch clauses (if
           any).

           The @finally clause, if present, will be executed upon
           exit from the immediately preceding "@try ... @catch"
           section.  This will happen regardless of whether any
           exceptions are thrown, caught or rethrown inside the
           "@try ... @catch" section, analogously to the behavior
           of the "finally" clause in Java.

           There are several caveats to using the new exception
           mechanism:

           *   Although currently designed to be binary
               compatible with "NS_HANDLER"-style idioms provided



gcc-4.3.2                   2008-08-27                         38





GCC(1)                         GNU                         GCC(1)


               by the "NSException" class, the new exceptions can
               only be used on Mac OS X 10.3 (Panther) and later
               systems, due to additional functionality needed in
               the (NeXT) Objective-C runtime.

           *   As mentioned above, the new exceptions do not
               support handling types other than Objective-C
               objects.   Furthermore, when used from
               Objective-C++, the Objective-C exception model
               does not interoperate with C++ exceptions at this
               time.  This means you cannot @throw an exception
               from Objective-C and "catch" it in C++, or vice
               versa (i.e., "throw ... @catch").

           The --ffoobbjjcc--eexxcceeppttiioonnss switch also enables the use of
           synchronization blocks for thread-safe execution:

                     @synchronized (ObjCClass *guard) {
                       ...
                     }

           Upon entering the @synchronized block, a thread of
           execution shall first check whether a lock has been
           placed on the corresponding "guard" object by another
           thread.  If it has, the current thread shall wait
           until the other thread relinquishes its lock.  Once
           "guard" becomes available, the current thread will
           place its own lock on it, execute the code contained
           in the @synchronized block, and finally relinquish the
           lock (thereby making "guard" available to other
           threads).

           Unlike Java, Objective-C does not allow for entire
           methods to be marked @synchronized.  Note that
           throwing exceptions out of @synchronized blocks is
           allowed, and will cause the guarding object to be
           unlocked properly.

       --ffoobbjjcc--ggcc
           Enable garbage collection (GC) in Objective-C and
           Objective-C++ programs.

       --ffrreeppllaaccee--oobbjjcc--ccllaasssseess
           Emit a special marker instructing _ll_dd((11)) not to
           statically link in the resulting object file, and
           allow _dd_yy_ll_dd((11)) to load it in at run time instead.  This
           is used in conjunction with the Fix-and-Continue
           debugging mode, where the object file in question may
           be recompiled and dynamically reloaded in the course
           of program execution, without the need to restart the
           program itself.  Currently, Fix-and-Continue
           functionality is only available in conjunction with
           the NeXT runtime on Mac OS X 10.3 and later.




gcc-4.3.2                   2008-08-27                         39





GCC(1)                         GNU                         GCC(1)


       --ffzzeerroo--lliinnkk
           When compiling for the NeXT runtime, the compiler
           ordinarily replaces calls to "objc_getClass("...")"
           (when the name of the class is known at compile time)
           with static class references that get initialized at
           load time, which improves run-time performance.
           Specifying the --ffzzeerroo--lliinnkk flag suppresses this
           behavior and causes calls to "objc_getClass("...")"
           to be retained.  This is useful in Zero-Link debugging
           mode, since it allows for individual class
           implementations to be modified during program
           execution.

       --ggeenn--ddeeccllss
           Dump interface declarations for all classes seen in
           the source file to a file named _s_o_u_r_c_e_n_a_m_e_._d_e_c_l.

       --WWaassssiiggnn--iinntteerrcceepptt (Objective-C and Objective-C++ only)
           Warn whenever an Objective-C assignment is being
           intercepted by the garbage collector.

       --WWnnoo--pprroottooccooll (Objective-C and Objective-C++ only)
           If a class is declared to implement a protocol, a
           warning is issued for every method in the protocol
           that is not implemented by the class.  The default
           behavior is to issue a warning for every method not
           explicitly implemented in the class, even if a method
           implementation is inherited from the superclass.  If
           you use the --WWnnoo--pprroottooccooll option, then methods
           inherited from the superclass are considered to be
           implemented, and no warning is issued for them.

       --WWsseelleeccttoorr (Objective-C and Objective-C++ only)
           Warn if multiple methods of different types for the
           same selector are found during compilation.  The check
           is performed on the list of methods in the final stage
           of compilation.  Additionally, a check is performed
           for each selector appearing in a "@selector(...)"
           expression, and a corresponding method for that
           selector has been found during compilation.  Because
           these checks scan the method table only at the end of
           compilation, these warnings are not produced if the
           final stage of compilation is not reached, for example
           because an error is found during compilation, or
           because the --ffssyynnttaaxx--oonnllyy option is being used.

       --WWssttrriicctt--sseelleeccttoorr--mmaattcchh (Objective-C and Objective-C++
       only)
           Warn if multiple methods with differing argument
           and/or return types are found for a given selector
           when attempting to send a message using this selector
           to a receiver of type "id" or "Class".  When this flag
           is off (which is the default behavior), the compiler
           will omit such warnings if any differences found are



gcc-4.3.2                   2008-08-27                         40





GCC(1)                         GNU                         GCC(1)


           confined to types which share the same size and
           alignment.

       --WWuunnddeeccllaarreedd--sseelleeccttoorr (Objective-C and Objective-C++ only)
           Warn if a "@selector(...)" expression referring to an
           undeclared selector is found.  A selector is
           considered undeclared if no method with that name has
           been declared before the "@selector(...)" expression,
           either explicitly in an @interface or @protocol
           declaration, or implicitly in an @implementation
           section.  This option always performs its checks as
           soon as a "@selector(...)" expression is found, while
           --WWsseelleeccttoorr only performs its checks in the final stage
           of compilation.  This also enforces the coding style
           convention that methods and selectors must be declared
           before being used.

       --pprriinntt--oobbjjcc--rruunnttiimmee--iinnffoo
           Generate C header describing the largest structure
           that is passed by value, if any.

       OOppttiioonnss ttoo CCoonnttrrooll DDiiaaggnnoossttiicc MMeessssaaggeess FFoorrmmaattttiinngg

       Traditionally, diagnostic messages have been formatted
       irrespective of the output device's aspect (e.g. its
       width, ...).  The options described below can be used to
       control the diagnostic messages formatting algorithm, e.g.
       how many characters per line, how often source location
       information should be reported.  Right now, only the C++
       front end can honor these options.  However it is
       expected, in the near future, that the remaining front
       ends would be able to digest them correctly.

       --ffmmeessssaaggee--lleennggtthh==_n
           Try to format error messages so that they fit on lines
           of about _n characters.  The default is 72 characters
           for gg++++ and 0 for the rest of the front ends supported
           by GCC.  If _n is zero, then no line-wrapping will be
           done; each error message will appear on a single line.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==oonnccee
           Only meaningful in line-wrapping mode.  Instructs the
           diagnostic messages reporter to emit _o_n_c_e source
           location information; that is, in case the message is
           too long to fit on a single physical line and has to
           be wrapped, the source location won't be emitted (as
           prefix) again, over and over, in subsequent
           continuation lines.  This is the default behavior.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==eevveerryy--lliinnee
           Only meaningful in line-wrapping mode.  Instructs the
           diagnostic messages reporter to emit the same source
           location information (as prefix) for physical lines
           that result from the process of breaking a message



gcc-4.3.2                   2008-08-27                         41





GCC(1)                         GNU                         GCC(1)


           which is too long to fit on a single line.

       --ffddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn
           This option instructs the diagnostic machinery to add
           text to each diagnostic emitted, which indicates which
           command line option directly controls that diagnostic,
           when such an option is known to the diagnostic
           machinery.

       --WWccoovveerraaggee--mmiissmmaattcchh
           Warn if feedback profiles do not match when using the
           --ffpprrooffiillee--uussee option.  If a source file was changed
           between --ffpprrooffiillee--ggeenn and --ffpprrooffiillee--uussee, the files
           with the profile feedback can fail to match the source
           file and GCC can not use the profile feedback
           information.  By default, GCC emits an error message
           in this case.  The option --WWccoovveerraaggee--mmiissmmaattcchh emits a
           warning instead of an error.  GCC does not use
           appropriate feedback profiles, so using this option
           can result in poorly optimized code.  This option is
           useful only in the case of very minor changes such as
           bug fixes to an existing code-base.

       OOppttiioonnss ttoo RReeqquueesstt oorr SSuupppprreessss WWaarrnniinnggss

       Warnings are diagnostic messages that report constructions
       which are not inherently erroneous but which are risky or
       suggest there may have been an error.

       The following language-independent options do not enable
       specific warnings but control the kinds of diagnostics
       produced by GCC.

       --ffssyynnttaaxx--oonnllyy
           Check the code for syntax errors, but don't do
           anything beyond that.

       --ww  Inhibit all warning messages.

       --WWeerrrroorr
           Make all warnings into errors.

       --WWeerrrroorr==
           Make the specified warning into an error.  The
           specifier for a warning is appended, for example
           --WWeerrrroorr==sswwiittcchh turns the warnings controlled by
           --WWsswwiittcchh into errors.  This switch takes a negative
           form, to be used to negate --WWeerrrroorr for specific
           warnings, for example --WWnnoo--eerrrroorr==sswwiittcchh makes --WWsswwiittcchh
           warnings not be errors, even when --WWeerrrroorr is in
           effect.  You can use the --ffddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn
           option to have each controllable warning amended with
           the option which controls it, to determine what to use
           with this option.



gcc-4.3.2                   2008-08-27                         42





GCC(1)                         GNU                         GCC(1)


           Note that specifying --WWeerrrroorr==_f_o_o automatically implies
           --WW_f_o_o.  However, --WWnnoo--eerrrroorr==_f_o_o does not imply
           anything.

       --WWffaattaall--eerrrroorrss
           This option causes the compiler to abort compilation
           on the first error occurred rather than trying to keep
           going and printing further error messages.

       You can request many specific warnings with options
       beginning --WW, for example --WWiimmpplliicciitt to request warnings
       on implicit declarations.  Each of these specific warning
       options also has a negative form beginning --WWnnoo-- to turn
       off warnings; for example, --WWnnoo--iimmpplliicciitt.  This manual
       lists only one of the two forms, whichever is not the
       default.  For further, language-specific options also
       refer to CC++++ DDiiaalleecctt OOppttiioonnss and OObbjjeeccttiivvee--CC aanndd
       OObbjjeeccttiivvee--CC++++ DDiiaalleecctt OOppttiioonnss.

       --ppeeddaannttiicc
           Issue all the warnings demanded by strict ISO C and
           ISO C++; reject all programs that use forbidden
           extensions, and some other programs that do not follow
           ISO C and ISO C++.  For ISO C, follows the version of
           the ISO C standard specified by any --ssttdd option used.

           Valid ISO C and ISO C++ programs should compile
           properly with or without this option (though a rare
           few will require --aannssii or a --ssttdd option specifying the
           required version of ISO C).  However, without this
           option, certain GNU extensions and traditional C and
           C++ features are supported as well.  With this option,
           they are rejected.

           --ppeeddaannttiicc does not cause warning messages for use of
           the alternate keywords whose names begin and end with
           ____.  Pedantic warnings are also disabled in the
           expression that follows "__extension__".  However,
           only system header files should use these escape
           routes; application programs should avoid them.

           Some users try to use --ppeeddaannttiicc to check programs for
           strict ISO C conformance.  They soon find that it does
           not do quite what they want: it finds some non-ISO
           practices, but not all---only those for which ISO C
           _r_e_q_u_i_r_e_s a diagnostic, and some others for which
           diagnostics have been added.

           A feature to report any failure to conform to ISO C
           might be useful in some instances, but would require
           considerable additional work and would be quite
           different from --ppeeddaannttiicc.  We don't have plans to
           support such a feature in the near future.




gcc-4.3.2                   2008-08-27                         43





GCC(1)                         GNU                         GCC(1)


           Where the standard specified with --ssttdd represents a
           GNU extended dialect of C, such as ggnnuu8899 or ggnnuu9999,
           there is a corresponding _b_a_s_e _s_t_a_n_d_a_r_d, the version of
           ISO C on which the GNU extended dialect is based.
           Warnings from --ppeeddaannttiicc are given where they are
           required by the base standard.  (It would not make
           sense for such warnings to be given only for features
           not in the specified GNU C dialect, since by
           definition the GNU dialects of C include all features
           the compiler supports with the given option, and there
           would be nothing to warn about.)

       --ppeeddaannttiicc--eerrrroorrss
           Like --ppeeddaannttiicc, except that errors are produced rather
           than warnings.

       --WWaallll
           This enables all the warnings about constructions that
           some users consider questionable, and that are easy to
           avoid (or modify to prevent the warning), even in
           conjunction with macros.  This also enables some
           language-specific warnings described in CC++++ DDiiaalleecctt
           OOppttiioonnss and OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleecctt
           OOppttiioonnss.

           --WWaallll turns on the following warning flags:

           --WWaaddddrreessss --WWaarrrraayy--bboouunnddss (only with --OO22)
           --WWcc++++00xx--ccoommppaatt --WWcchhaarr--ssuubbssccrriippttss --WWiimmpplliicciitt--iinntt
           --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn --WWccoommmmeenntt --WWffoorrmmaatt
           --WWmmaaiinn (only for C/ObjC and unless --ffffrreeeessttaannddiinngg)
           --WWmmiissssiinngg--bbrraacceess --WWnnoonnnnuullll --WWppaarreenntthheesseess
           --WWppooiinntteerr--ssiiggnn --WWrreeoorrddeerr --WWrreettuurrnn--ttyyppee
           --WWsseeqquueennccee--ppooiinntt --WWssiiggnn--ccoommppaarree (only in C++)
           --WWssttrriicctt--aalliiaassiinngg --WWssttrriicctt--oovveerrffllooww==11 --WWsswwiittcchh
           --WWttrriiggrraapphhss --WWuunniinniittiiaalliizzeedd (only with --OO11 and above)
           --WWuunnkknnoowwnn--pprraaggmmaass --WWuunnuusseedd--ffuunnccttiioonn --WWuunnuusseedd--llaabbeell
           --WWuunnuusseedd--vvaalluuee --WWuunnuusseedd--vvaarriiaabbllee

           Note that some warning flags are not implied by --WWaallll.
           Some of them warn about constructions that users
           generally do not consider questionable, but which
           occasionally you might wish to check for; others warn
           about constructions that are necessary or hard to
           avoid in some cases, and there is no simple way to
           modify the code to suppress the warning. Some of them
           are enabled by --WWeexxttrraa but many of them must be
           enabled individually.

       --WWeexxttrraa
           This enables some extra warning flags that are not
           enabled by --WWaallll. (This option used to be called --WW.
           The older name is still supported, but the newer name
           is more descriptive.)



gcc-4.3.2                   2008-08-27                         44





GCC(1)                         GNU                         GCC(1)


           --WWcclloobbbbeerreedd --WWeemmppttyy--bbooddyy --WWiiggnnoorreedd--qquuaalliiffiieerrss
           --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee
           (C only) --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn (C only)
           --WWoovveerrrriiddee--iinniitt --WWssiiggnn--ccoommppaarree --WWttyyppee--lliimmiittss
           --WWuunniinniittiiaalliizzeedd (only with --OO11 and above)
           --WWuunnuusseedd--ppaarraammeetteerr (only with --WWuunnuusseedd or --WWaallll)

           The option --WWeexxttrraa also prints warning messages for
           the following cases:

           *   A pointer is compared against integer zero with <<,
               <<==, >>, or >>==.

           *   (C++ only) An enumerator and a non-enumerator both
               appear in a conditional expression.

           *   (C++ only) A non-static reference or non-static
               ccoonnsstt member appears in a class without
               constructors.

           *   (C++ only) Ambiguous virtual bases.

           *   (C++ only) Subscripting an array which has been
               declared rreeggiisstteerr.

           *   (C++ only) Taking the address of a variable which
               has been declared rreeggiisstteerr.

           *   (C++ only) A base class is not initialized in a
               derived class' copy constructor.

       --WWnnoo--iimmppoorrtt
           Inhibit warning messages about the use of ##iimmppoorrtt.

       --WWcchhaarr--ssuubbssccrriippttss
           Warn if an array subscript has type "char".  This is a
           common cause of error, as programmers often forget
           that this type is signed on some machines.  This
           warning is enabled by --WWaallll.

       --WWccoommmmeenntt
           Warn whenever a comment-start sequence //** appears in a
           //** comment, or whenever a Backslash-Newline appears in
           a //// comment.  This warning is enabled by --WWaallll.

       --WWffoorrmmaatt
           Check calls to "printf" and "scanf", etc., to make
           sure that the arguments supplied have types
           appropriate to the format string specified, and that
           the conversions specified in the format string make
           sense.  This includes standard functions, and others
           specified by format attributes, in the "printf",
           "scanf", "strftime" and "strfmon" (an X/Open
           extension, not in the C standard) families (or other



gcc-4.3.2                   2008-08-27                         45





GCC(1)                         GNU                         GCC(1)


           target-specific families).  Which functions are
           checked without format attributes having been
           specified depends on the standard version selected,
           and such checks of functions without the attribute
           specified are disabled by --ffffrreeeessttaannddiinngg or
           --ffnnoo--bbuuiillttiinn.

           The formats are checked against the format features
           supported by GNU libc version 2.2.  These include all
           ISO C90 and C99 features, as well as features from the
           Single Unix Specification and some BSD and GNU
           extensions.  Other library implementations may not
           support all these features; GCC does not support
           warning about features that go beyond a particular
           library's limitations.  However, if --ppeeddaannttiicc is used
           with --WWffoorrmmaatt, warnings will be given about format
           features not in the selected standard version (but not
           for "strfmon" formats, since those are not in any
           version of the C standard).

           Since --WWffoorrmmaatt also checks for null format arguments
           for several functions, --WWffoorrmmaatt also implies
           --WWnnoonnnnuullll.

           --WWffoorrmmaatt is included in --WWaallll.  For more control over
           some aspects of format checking, the options
           --WWffoorrmmaatt--yy22kk, --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss,
           --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh, --WWffoorrmmaatt--nnoonnlliitteerraall,
           --WWffoorrmmaatt--sseeccuurriittyy, and --WWffoorrmmaatt==22 are available, but
           are not included in --WWaallll.

       --WWffoorrmmaatt--yy22kk
           If --WWffoorrmmaatt is specified, also warn about "strftime"
           formats which may yield only a two-digit year.

       --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss
           If --WWffoorrmmaatt is specified, do not warn about excess
           arguments to a "printf" or "scanf" format function.
           The C standard specifies that such arguments are
           ignored.

           Where the unused arguments lie between used arguments
           that are specified with $$ operand number
           specifications, normally warnings are still given,
           since the implementation could not know what type to
           pass to "va_arg" to skip the unused arguments.
           However, in the case of "scanf" formats, this option
           will suppress the warning if the unused arguments are
           all pointers, since the Single Unix Specification says
           that such unused arguments are allowed.

       --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh (C and Objective-C only)
           If --WWffoorrmmaatt is specified, do not warn about zero-
           length formats.  The C standard specifies that zero-



gcc-4.3.2                   2008-08-27                         46





GCC(1)                         GNU                         GCC(1)


           length formats are allowed.

       --WWffoorrmmaatt--nnoonnlliitteerraall
           If --WWffoorrmmaatt is specified, also warn if the format
           string is not a string literal and so cannot be
           checked, unless the format function takes its format
           arguments as a "va_list".

       --WWffoorrmmaatt--sseeccuurriittyy
           If --WWffoorrmmaatt is specified, also warn about uses of
           format functions that represent possible security
           problems.  At present, this warns about calls to
           "printf" and "scanf" functions where the format string
           is not a string literal and there are no format
           arguments, as in "printf (foo);".  This may be a
           security hole if the format string came from untrusted
           input and contains %%nn.  (This is currently a subset of
           what --WWffoorrmmaatt--nnoonnlliitteerraall warns about, but in future
           warnings may be added to --WWffoorrmmaatt--sseeccuurriittyy that are
           not included in --WWffoorrmmaatt--nnoonnlliitteerraall.)

       --WWffoorrmmaatt==22
           Enable --WWffoorrmmaatt plus format checks not included in
           --WWffoorrmmaatt.  Currently equivalent to --WWffoorrmmaatt
           --WWffoorrmmaatt--nnoonnlliitteerraall --WWffoorrmmaatt--sseeccuurriittyy --WWffoorrmmaatt--yy22kk.

       --WWnnoonnnnuullll (C and Objective-C only)
           Warn about passing a null pointer for arguments marked
           as requiring a non-null value by the "nonnull"
           function attribute.

           --WWnnoonnnnuullll is included in --WWaallll and --WWffoorrmmaatt.  It can
           be disabled with the --WWnnoo--nnoonnnnuullll option.

       --WWiinniitt--sseellff (C, C++, Objective-C and Objective-C++ only)
           Warn about uninitialized variables which are
           initialized with themselves.  Note this option can
           only be used with the --WWuunniinniittiiaalliizzeedd option, which in
           turn only works with --OO11 and above.

           For example, GCC will warn about "i" being
           uninitialized in the following snippet only when
           --WWiinniitt--sseellff has been specified:

                   int f()
                   {
                     int i = i;
                     return i;
                   }

       --WWiimmpplliicciitt--iinntt (C and Objective-C only)
           Warn when a declaration does not specify a type.  This
           warning is enabled by --WWaallll.




gcc-4.3.2                   2008-08-27                         47





GCC(1)                         GNU                         GCC(1)


       --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn (C and Objective-C only)
           Give a warning whenever a function is used before
           being declared. In C99 mode (--ssttdd==cc9999 or --ssttdd==ggnnuu9999),
           this warning is enabled by default and it is made into
           an error by --ppeeddaannttiicc--eerrrroorrss. This warning is also
           enabled by --WWaallll.

       --WWiimmpplliicciitt
           Same as --WWiimmpplliicciitt--iinntt and
           --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn.  This warning is
           enabled by --WWaallll.

       --WWiiggnnoorreedd--qquuaalliiffiieerrss (C and C++ only)
           Warn if the return type of a function has a type
           qualifier such as "const".  For ISO C such a type
           qualifier has no effect, since the value returned by a
           function is not an lvalue.  For C++, the warning is
           only emitted for scalar types or "void".  ISO C
           prohibits qualified "void" return types on function
           definitions, so such return types always receive a
           warning even without this option.

           This warning is also enabled by --WWeexxttrraa.

       --WWmmaaiinn
           Warn if the type of mmaaiinn is suspicious.  mmaaiinn should
           be a function with external linkage, returning int,
           taking either zero arguments, two, or three arguments
           of appropriate types.  This warning is enabled by
           --WWaallll.

       --WWmmiissssiinngg--bbrraacceess
           Warn if an aggregate or union initializer is not fully
           bracketed.  In the following example, the initializer
           for aa is not fully bracketed, but that for bb is fully
           bracketed.

                   int a[2][2] = { 0, 1, 2, 3 };
                   int b[2][2] = { { 0, 1 }, { 2, 3 } };

           This warning is enabled by --WWaallll.

       --WWmmiissssiinngg--iinncclluuddee--ddiirrss (C, C++, Objective-C and
       Objective-C++ only)
           Warn if a user-supplied include directory does not
           exist.

       --WWppaarreenntthheesseess
           Warn if parentheses are omitted in certain contexts,
           such as when there is an assignment in a context where
           a truth value is expected, or when operators are
           nested whose precedence people often get confused
           about.




gcc-4.3.2                   2008-08-27                         48





GCC(1)                         GNU                         GCC(1)


           Also warn if a comparison like xx<<==yy<<==zz appears; this
           is equivalent to ((xx<<==yy ?? 11 :: 00)) <<== zz, which is a
           different interpretation from that of ordinary
           mathematical notation.

           Also warn about constructions where there may be
           confusion to which "if" statement an "else" branch
           belongs.  Here is an example of such a case:

                   {
                     if (a)
                       if (b)
                         foo ();
                     else
                       bar ();
                   }

           In C/C++, every "else" branch belongs to the innermost
           possible "if" statement, which in this example is "if
           (b)".  This is often not what the programmer expected,
           as illustrated in the above example by indentation the
           programmer chose.  When there is the potential for
           this confusion, GCC will issue a warning when this
           flag is specified.  To eliminate the warning, add
           explicit braces around the innermost "if" statement so
           there is no way the "else" could belong to the
           enclosing "if".  The resulting code would look like
           this:

                   {
                     if (a)
                       {
                         if (b)
                           foo ();
                         else
                           bar ();
                       }
                   }

           This warning is enabled by --WWaallll.

       --WWsseeqquueennccee--ppooiinntt
           Warn about code that may have undefined semantics
           because of violations of sequence point rules in the C
           and C++ standards.

           The C and C++ standards defines the order in which
           expressions in a C/C++ program are evaluated in terms
           of _s_e_q_u_e_n_c_e _p_o_i_n_t_s, which represent a partial ordering
           between the execution of parts of the program: those
           executed before the sequence point, and those executed
           after it.  These occur after the evaluation of a full
           expression (one which is not part of a larger
           expression), after the evaluation of the first operand



gcc-4.3.2                   2008-08-27                         49





GCC(1)                         GNU                         GCC(1)


           of a "&&", "||", "? :" or "," (comma) operator, before
           a function is called (but after the evaluation of its
           arguments and the expression denoting the called
           function), and in certain other places.  Other than as
           expressed by the sequence point rules, the order of
           evaluation of subexpressions of an expression is not
           specified.  All these rules describe only a partial
           order rather than a total order, since, for example,
           if two functions are called within one expression with
           no sequence point between them, the order in which the
           functions are called is not specified.  However, the
           standards committee have ruled that function calls do
           not overlap.

           It is not specified when between sequence points
           modifications to the values of objects take effect.
           Programs whose behavior depends on this have undefined
           behavior; the C and C++ standards specify that
           "Between the previous and next sequence point an
           object shall have its stored value modified at most
           once by the evaluation of an expression.  Furthermore,
           the prior value shall be read only to determine the
           value to be stored.".  If a program breaks these
           rules, the results on any particular implementation
           are entirely unpredictable.

           Examples of code with undefined behavior are "a =
           a++;", "a[n] = b[n++]" and "a[i++] = i;".  Some more
           complicated cases are not diagnosed by this option,
           and it may give an occasional false positive result,
           but in general it has been found fairly effective at
           detecting this sort of problem in programs.

           The standard is worded confusingly, therefore there is
           some debate over the precise meaning of the sequence
           point rules in subtle cases.  Links to discussions of
           the problem, including proposed formal definitions,
           may be found on the GCC readings page, at
           <hhttttpp::////ggcccc..ggnnuu..oorrgg//rreeaaddiinnggss..hhttmmll>.

           This warning is enabled by --WWaallll for C and C++.

       --WWrreettuurrnn--ttyyppee
           Warn whenever a function is defined with a return-type
           that defaults to "int".  Also warn about any "return"
           statement with no return-value in a function whose
           return-type is not "void" (falling off the end of the
           function body is considered returning without a
           value), and about a "return" statement with a
           expression in a function whose return-type is "void".

           For C++, a function without return type always
           produces a diagnostic message, even when
           --WWnnoo--rreettuurrnn--ttyyppee is specified.  The only exceptions



gcc-4.3.2                   2008-08-27                         50





GCC(1)                         GNU                         GCC(1)


           are mmaaiinn and functions defined in system headers.

           This warning is enabled by --WWaallll.

       --WWsswwiittcchh
           Warn whenever a "switch" statement has an index of
           enumerated type and lacks a "case" for one or more of
           the named codes of that enumeration.  (The presence of
           a "default" label prevents this warning.)  "case"
           labels outside the enumeration range also provoke
           warnings when this option is used.  This warning is
           enabled by --WWaallll.

       --WWsswwiittcchh--ddeeffaauulltt
           Warn whenever a "switch" statement does not have a
           "default" case.

       --WWsswwiittcchh--eennuumm
           Warn whenever a "switch" statement has an index of
           enumerated type and lacks a "case" for one or more of
           the named codes of that enumeration.  "case" labels
           outside the enumeration range also provoke warnings
           when this option is used.

       --WWttrriiggrraapphhss
           Warn if any trigraphs are encountered that might
           change the meaning of the program (trigraphs within
           comments are not warned about).  This warning is
           enabled by --WWaallll.

       --WWuunnuusseedd--ffuunnccttiioonn
           Warn whenever a static function is declared but not
           defined or a non-inline static function is unused.
           This warning is enabled by --WWaallll.

       --WWuunnuusseedd--llaabbeell
           Warn whenever a label is declared but not used.  This
           warning is enabled by --WWaallll.

           To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--ppaarraammeetteerr
           Warn whenever a function parameter is unused aside
           from its declaration.

           To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--vvaarriiaabbllee
           Warn whenever a local variable or non-constant static
           variable is unused aside from its declaration.  This
           warning is enabled by --WWaallll.

           To suppress this warning use the uunnuusseedd attribute.




gcc-4.3.2                   2008-08-27                         51





GCC(1)                         GNU                         GCC(1)


       --WWuunnuusseedd--vvaalluuee
           Warn whenever a statement computes a result that is
           explicitly not used. To suppress this warning cast the
           unused expression to vvooiidd. This includes an
           expression-statement or the left-hand side of a comma
           expression that contains no side effects. For example,
           an expression such as xx[[ii,,jj]] will cause a warning,
           while xx[[((vvooiidd))ii,,jj]] will not.

           This warning is enabled by --WWaallll.

       --WWuunnuusseedd
           All the above --WWuunnuusseedd options combined.

           In order to get a warning about an unused function
           parameter, you must either specify --WWeexxttrraa --WWuunnuusseedd
           (note that --WWaallll implies --WWuunnuusseedd), or separately
           specify --WWuunnuusseedd--ppaarraammeetteerr.

       --WWuunniinniittiiaalliizzeedd
           Warn if an automatic variable is used without first
           being initialized or if a variable may be clobbered by
           a "setjmp" call.

           These warnings are possible only in optimizing
           compilation, because they require data flow
           information that is computed only when optimizing.  If
           you do not specify --OO, you will not get these
           warnings. Instead, GCC will issue a warning about
           --WWuunniinniittiiaalliizzeedd requiring --OO.

           If you want to warn about code which uses the
           uninitialized value of the variable in its own
           initializer, use the --WWiinniitt--sseellff option.

           These warnings occur for individual uninitialized or
           clobbered elements of structure, union or array
           variables as well as for variables which are
           uninitialized or clobbered as a whole.  They do not
           occur for variables or elements declared "volatile".
           Because these warnings depend on optimization, the
           exact variables or elements for which there are
           warnings will depend on the precise optimization
           options and version of GCC used.

           Note that there may be no warning about a variable
           that is used only to compute a value that itself is
           never used, because such computations may be deleted
           by data flow analysis before the warnings are printed.

           These warnings are made optional because GCC is not
           smart enough to see all the reasons why the code might
           be correct despite appearing to have an error.  Here
           is one example of how this can happen:



gcc-4.3.2                   2008-08-27                         52





GCC(1)                         GNU                         GCC(1)


                   {
                     int x;
                     switch (y)
                       {
                       case 1: x = 1;
                         break;
                       case 2: x = 4;
                         break;
                       case 3: x = 5;
                       }
                     foo (x);
                   }

           If the value of "y" is always 1, 2 or 3, then "x" is
           always initialized, but GCC doesn't know this.  Here
           is another common case:

                   {
                     int save_y;
                     if (change_y) save_y = y, y = new_y;
                     ...
                     if (change_y) y = save_y;
                   }

           This has no bug because "save_y" is used only if it is
           set.

           This option also warns when a non-volatile automatic
           variable might be changed by a call to "longjmp".
           These warnings as well are possible only in optimizing
           compilation.

           The compiler sees only the calls to "setjmp".  It
           cannot know where "longjmp" will be called; in fact, a
           signal handler could call it at any point in the code.
           As a result, you may get a warning even when there is
           in fact no problem because "longjmp" cannot in fact be
           called at the place which would cause a problem.

           Some spurious warnings can be avoided if you declare
           all the functions you use that never return as
           "noreturn".

           This warning is enabled by --WWaallll or --WWeexxttrraa in
           optimizing compilations (--OO11 and above).

       --WWuunnkknnoowwnn--pprraaggmmaass
           Warn when a #pragma directive is encountered which is
           not understood by GCC.  If this command line option is
           used, warnings will even be issued for unknown pragmas
           in system header files.  This is not the case if the
           warnings were only enabled by the --WWaallll command line
           option.




gcc-4.3.2                   2008-08-27                         53





GCC(1)                         GNU                         GCC(1)


       --WWnnoo--pprraaggmmaass
           Do not warn about misuses of pragmas, such as
           incorrect parameters, invalid syntax, or conflicts
           between pragmas.  See also --WWuunnkknnoowwnn--pprraaggmmaass.

       --WWssttrriicctt--aalliiaassiinngg
           This option is only active when --ffssttrriicctt--aalliiaassiinngg is
           active.  It warns about code which might break the
           strict aliasing rules that the compiler is using for
           optimization.  The warning does not catch all cases,
           but does attempt to catch the more common pitfalls.
           It is included in --WWaallll.  It is equivalent to
           --WWssttrriicctt--aalliiaassiinngg==33

       --WWssttrriicctt--aalliiaassiinngg==nn
           This option is only active when --ffssttrriicctt--aalliiaassiinngg is
           active.  It warns about code which might break the
           strict aliasing rules that the compiler is using for
           optimization.  Higher levels correspond to higher
           accuracy (fewer false positives).  Higher levels also
           correspond to more effort, similar to the way -O
           works.  --WWssttrriicctt--aalliiaassiinngg is equivalent to
           --WWssttrriicctt--aalliiaassiinngg==nn, with n=3.

           Level 1: Most aggressive, quick, least accurate.
           Possibly useful when higher levels do not warn but
           -fstrict-aliasing still breaks the code, as it has
           very few false negatives.  However, it has many false
           positives.  Warns for all pointer conversions between
           possibly incompatible types, even if never
           dereferenced.  Runs in the frontend only.

           Level 2: Aggressive, quick, not too precise.  May
           still have many false positives (not as many as level
           1 though), and few false negatives (but possibly more
           than level 1).  Unlike level 1, it only warns when an
           address is taken.  Warns about incomplete types.  Runs
           in the frontend only.

           Level 3 (default for --WWssttrriicctt--aalliiaassiinngg): Should have
           very few false positives and few false negatives.
           Slightly slower than levels 1 or 2 when optimization
           is enabled.  Takes care of the common punn+dereference
           pattern in the frontend: "*(int*)&some_float".  If
           optimization is enabled, it also runs in the backend,
           where it deals with multiple statement cases using
           flow-sensitive points-to information.  Only warns when
           the converted pointer is dereferenced.  Does not warn
           about incomplete types.

       --WWssttrriicctt--oovveerrffllooww
       --WWssttrriicctt--oovveerrffllooww==_n
           This option is only active when --ffssttrriicctt--oovveerrffllooww is
           active.  It warns about cases where the compiler



gcc-4.3.2                   2008-08-27                         54





GCC(1)                         GNU                         GCC(1)


           optimizes based on the assumption that signed overflow
           does not occur.  Note that it does not warn about all
           cases where the code might overflow: it only warns
           about cases where the compiler implements some
           optimization.  Thus this warning depends on the
           optimization level.

           An optimization which assumes that signed overflow
           does not occur is perfectly safe if the values of the
           variables involved are such that overflow never does,
           in fact, occur.  Therefore this warning can easily
           give a false positive: a warning about code which is
           not actually a problem.  To help focus on important
           issues, several warning levels are defined.  No
           warnings are issued for the use of undefined signed
           overflow when estimating how many iterations a loop
           will require, in particular when determining whether a
           loop will be executed at all.

           --WWssttrriicctt--oovveerrffllooww==11
               Warn about cases which are both questionable and
               easy to avoid.  For example: "x + 1 > x"; with
               --ffssttrriicctt--oovveerrffllooww, the compiler will simplify this
               to 1.  This level of --WWssttrriicctt--oovveerrffllooww is enabled
               by --WWaallll; higher levels are not, and must be
               explicitly requested.

           --WWssttrriicctt--oovveerrffllooww==22
               Also warn about other cases where a comparison is
               simplified to a constant.  For example: "abs (x)
               >= 0".  This can only be simplified when
               --ffssttrriicctt--oovveerrffllooww is in effect, because "abs
               (INT_MIN)" overflows to "INT_MIN", which is less
               than zero.  --WWssttrriicctt--oovveerrffllooww (with no level) is
               the same as --WWssttrriicctt--oovveerrffllooww==22.

           --WWssttrriicctt--oovveerrffllooww==33
               Also warn about other cases where a comparison is
               simplified.  For example: "x + 1 > 1" will be
               simplified to "x > 0".

           --WWssttrriicctt--oovveerrffllooww==44
               Also warn about other simplifications not covered
               by the above cases.  For example: "(x * 10) / 5"
               will be simplified to "x * 2".

           --WWssttrriicctt--oovveerrffllooww==55
               Also warn about cases where the compiler reduces
               the magnitude of a constant involved in a
               comparison.  For example: "x + 2 > y" will be
               simplified to "x + 1 >= y".  This is reported only
               at the highest warning level because this
               simplification applies to many comparisons, so
               this warning level will give a very large number



gcc-4.3.2                   2008-08-27                         55





GCC(1)                         GNU                         GCC(1)


               of false positives.

       --WWaarrrraayy--bboouunnddss
           This option is only active when --ffttrreeee--vvrrpp is active
           (default for -O2 and above). It warns about subscripts
           to arrays that are always out of bounds. This warning
           is enabled by --WWaallll.

       --WWnnoo--ddiivv--bbyy--zzeerroo
           Do not warn about compile-time integer division by
           zero.  Floating point division by zero is not warned
           about, as it can be a legitimate way of obtaining
           infinities and NaNs.

       --WWssyysstteemm--hheeaaddeerrss
           Print warning messages for constructs found in system
           header files.  Warnings from system headers are
           normally suppressed, on the assumption that they
           usually do not indicate real problems and would only
           make the compiler output harder to read.  Using this
           command line option tells GCC to emit warnings from
           system headers as if they occurred in user code.
           However, note that using --WWaallll in conjunction with
           this option will _n_o_t warn about unknown pragmas in
           system headers---for that, --WWuunnkknnoowwnn--pprraaggmmaass must also
           be used.

       --WWffllooaatt--eeqquuaall
           Warn if floating point values are used in equality
           comparisons.

           The idea behind this is that sometimes it is
           convenient (for the programmer) to consider floating-
           point values as approximations to infinitely precise
           real numbers.  If you are doing this, then you need to
           compute (by analyzing the code, or in some other way)
           the maximum or likely maximum error that the
           computation introduces, and allow for it when
           performing comparisons (and when producing output, but
           that's a different problem).  In particular, instead
           of testing for equality, you would check to see
           whether the two values have ranges that overlap; and
           this is done with the relational operators, so
           equality comparisons are probably mistaken.

       --WWttrraaddiittiioonnaall (C and Objective-C only)
           Warn about certain constructs that behave differently
           in traditional and ISO C.  Also warn about ISO C
           constructs that have no traditional C equivalent,
           and/or problematic constructs which should be avoided.

           *   Macro parameters that appear within string
               literals in the macro body.  In traditional C
               macro replacement takes place within string



gcc-4.3.2                   2008-08-27                         56





GCC(1)                         GNU                         GCC(1)


               literals, but does not in ISO C.

           *   In traditional C, some preprocessor directives did
               not exist.  Traditional preprocessors would only
               consider a line to be a directive if the ##
               appeared in column 1 on the line.  Therefore
               --WWttrraaddiittiioonnaall warns about directives that
               traditional C understands but would ignore because
               the ## does not appear as the first character on
               the line.  It also suggests you hide directives
               like ##pprraaggmmaa not understood by traditional C by
               indenting them.  Some traditional implementations
               would not recognize ##eelliiff, so it suggests avoiding
               it altogether.

           *   A function-like macro that appears without
               arguments.

           *   The unary plus operator.

           *   The UU integer constant suffix, or the FF or LL
               floating point constant suffixes.  (Traditional C
               does support the LL suffix on integer constants.)
               Note, these suffixes appear in macros defined in
               the system headers of most modern systems, e.g.
               the __MMIINN/__MMAAXX macros in "<limits.h>".  Use of
               these macros in user code might normally lead to
               spurious warnings, however GCC's integrated
               preprocessor has enough context to avoid warning
               in these cases.

           *   A function declared external in one block and then
               used after the end of the block.

           *   A "switch" statement has an operand of type
               "long".

           *   A non-"static" function declaration follows a
               "static" one.  This construct is not accepted by
               some traditional C compilers.

           *   The ISO type of an integer constant has a
               different width or signedness from its traditional
               type.  This warning is only issued if the base of
               the constant is ten.  I.e. hexadecimal or octal
               values, which typically represent bit patterns,
               are not warned about.

           *   Usage of ISO string concatenation is detected.

           *   Initialization of automatic aggregates.

           *   Identifier conflicts with labels.  Traditional C
               lacks a separate namespace for labels.



gcc-4.3.2                   2008-08-27                         57





GCC(1)                         GNU                         GCC(1)


           *   Initialization of unions.  If the initializer is
               zero, the warning is omitted.  This is done under
               the assumption that the zero initializer in user
               code appears conditioned on e.g. "__STDC__" to
               avoid missing initializer warnings and relies on
               default initialization to zero in the traditional
               C case.

           *   Conversions by prototypes between fixed/floating
               point values and vice versa.  The absence of these
               prototypes when compiling with traditional C would
               cause serious problems.  This is a subset of the
               possible conversion warnings, for the full set use
               --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn.

           *   Use of ISO C style function definitions.  This
               warning intentionally is _n_o_t issued for prototype
               declarations or variadic functions because these
               ISO C features will appear in your code when using
               libiberty's traditional C compatibility macros,
               "PARAMS" and "VPARAMS".  This warning is also
               bypassed for nested functions because that feature
               is already a GCC extension and thus not relevant
               to traditional C compatibility.

       --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn (C and Objective-C only)
           Warn if a prototype causes a type conversion that is
           different from what would happen to the same argument
           in the absence of a prototype.  This includes
           conversions of fixed point to floating and vice versa,
           and conversions changing the width or signedness of a
           fixed point argument except when the same as the
           default promotion.

       --WWddeeccllaarraattiioonn--aafftteerr--ssttaatteemmeenntt (C and Objective-C only)
           Warn when a declaration is found after a statement in
           a block.  This construct, known from C++, was
           introduced with ISO C99 and is by default allowed in
           GCC.  It is not supported by ISO C90 and was not
           supported by GCC versions before GCC 3.0.

       --WWuunnddeeff
           Warn if an undefined identifier is evaluated in an ##iiff
           directive.

       --WWnnoo--eennddiiff--llaabbeellss
           Do not warn whenever an ##eellssee or an ##eennddiiff are
           followed by text.

       --WWsshhaaddooww
           Warn whenever a local variable shadows another local
           variable, parameter or global variable or whenever a
           built-in function is shadowed.




gcc-4.3.2                   2008-08-27                         58





GCC(1)                         GNU                         GCC(1)


       --WWllaarrggeerr--tthhaann--_l_e_n
           Warn whenever an object of larger than _l_e_n bytes is
           defined.

       --WWuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           Warn if the loop cannot be optimized because the
           compiler could not assume anything on the bounds of
           the loop indices.  With --ffuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           warn if the compiler made such assumptions.

       --WWppooiinntteerr--aarriitthh
           Warn about anything that depends on the "size of" a
           function type or of "void".  GNU C assigns these types
           a size of 1, for convenience in calculations with
           "void *" pointers and pointers to functions.  In C++,
           warn also when an arithmetic operation involves
           "NULL".  This warning is also enabled by --ppeeddaannttiicc.

       --WWttyyppee--lliimmiittss
           Warn if a comparison is always true or always false
           due to the limited range of the data type, but do not
           warn for constant expressions.  For example, warn if
           an unsigned variable is compared against zero with <<
           or >>==.  This warning is also enabled by --WWeexxttrraa.

       --WWbbaadd--ffuunnccttiioonn--ccaasstt (C and Objective-C only)
           Warn whenever a function call is cast to a non-
           matching type.  For example, warn if "int malloc()" is
           cast to "anything *".

       --WWcc++++--ccoommppaatt (C and Objective-C only)
           Warn about ISO C constructs that are outside of the
           common subset of ISO C and ISO C++, e.g. request for
           implicit conversion from "void *" to a pointer to
           non-"void" type.

       --WWcc++++00xx--ccoommppaatt (C++ and Objective-C++ only)
           Warn about C++ constructs whose meaning differs
           between ISO C++ 1998 and ISO C++ 200x, e.g.,
           identifiers in ISO C++ 1998 that will become keywords
           in ISO C++ 200x.  This warning is enabled by --WWaallll.

       --WWccaasstt--qquuaall
           Warn whenever a pointer is cast so as to remove a type
           qualifier from the target type.  For example, warn if
           a "const char *" is cast to an ordinary "char *".

       --WWccaasstt--aalliiggnn
           Warn whenever a pointer is cast such that the required
           alignment of the target is increased.  For example,
           warn if a "char *" is cast to an "int *" on machines
           where integers can only be accessed at two- or four-
           byte boundaries.




gcc-4.3.2                   2008-08-27                         59





GCC(1)                         GNU                         GCC(1)


       --WWwwrriittee--ssttrriinnggss
           When compiling C, give string constants the type
           "const char[length]" so that copying the address of
           one into a non-"const" "char *" pointer will get a
           warning; when compiling C++, warn about the deprecated
           conversion from string literals to "char *".  This
           warning, by default, is enabled for C++ programs.
           These warnings will help you find at compile time code
           that can try to write into a string constant, but only
           if you have been very careful about using "const" in
           declarations and prototypes.  Otherwise, it will just
           be a nuisance; this is why we did not make --WWaallll
           request these warnings.

       --WWcclloobbbbeerreedd
           Warn for variables that might be changed by lloonnggjjmmpp or
           vvffoorrkk.  This warning is also enabled by --WWeexxttrraa.

       --WWccoonnvveerrssiioonn
           Warn for implicit conversions that may alter a value.
           This includes conversions between real and integer,
           like "abs (x)" when "x" is "double"; conversions
           between signed and unsigned, like "unsigned ui = -1";
           and conversions to smaller types, like "sqrtf (M_PI)".
           Do not warn for explicit casts like "abs ((int) x)"
           and "ui = (unsigned) -1", or if the value is not
           changed by the conversion like in "abs (2.0)".
           Warnings about conversions between signed and unsigned
           integers can be disabled by using
           --WWnnoo--ssiiggnn--ccoonnvveerrssiioonn.

           For C++, also warn for conversions between "NULL" and
           non-pointer types; confusing overload resolution for
           user-defined conversions; and conversions that will
           never use a type conversion operator: conversions to
           "void", the same type, a base class or a reference to
           them. Warnings about conversions between signed and
           unsigned integers are disabled by default in C++
           unless --WWssiiggnn--ccoonnvveerrssiioonn is explicitly enabled.

       --WWeemmppttyy--bbooddyy
           Warn if an empty body occurs in an iiff, eellssee or ddoo
           wwhhiillee statement.  Additionally, in C++, warn when an
           empty body occurs in a wwhhiillee or ffoorr statement with no
           whitespacing before the semicolon.  This warning is
           also enabled by --WWeexxttrraa.

       --WWssiiggnn--ccoommppaarree
           Warn when a comparison between signed and unsigned
           values could produce an incorrect result when the
           signed value is converted to unsigned.  This warning
           is also enabled by --WWeexxttrraa; to get the other warnings
           of --WWeexxttrraa without this warning, use --WWeexxttrraa
           --WWnnoo--ssiiggnn--ccoommppaarree.



gcc-4.3.2                   2008-08-27                         60





GCC(1)                         GNU                         GCC(1)


       --WWssiiggnn--ccoonnvveerrssiioonn
           Warn for implicit conversions that may change the sign
           of an integer value, like assigning a signed integer
           expression to an unsigned integer variable. An
           explicit cast silences the warning. In C, this option
           is enabled also by --WWccoonnvveerrssiioonn.

       --WWaaddddrreessss
           Warn about suspicious uses of memory addresses. These
           include using the address of a function in a
           conditional expression, such as "void func(void); if
           (func)", and comparisons against the memory address of
           a string literal, such as "if (x == "abc")".  Such
           uses typically indicate a programmer error: the
           address of a function always evaluates to true, so
           their use in a conditional usually indicate that the
           programmer forgot the parentheses in a function call;
           and comparisons against string literals result in
           unspecified behavior and are not portable in C, so
           they usually indicate that the programmer intended to
           use "strcmp".  This warning is enabled by --WWaallll.

       --WWllooggiiccaall--oopp
           Warn about suspicious uses of logical operators in
           expressions.  This includes using logical operators in
           contexts where a bit-wise operator is likely to be
           expected.

       --WWaaggggrreeggaattee--rreettuurrnn
           Warn if any functions that return structures or unions
           are defined or called.  (In languages where you can
           return an array, this also elicits a warning.)

       --WWnnoo--aattttrriibbuutteess
           Do not warn if an unexpected "__attribute__" is used,
           such as unrecognized attributes, function attributes
           applied to variables, etc.  This will not stop errors
           for incorrect use of supported attributes.

       --WWssttrriicctt--pprroottoottyyppeess (C and Objective-C only)
           Warn if a function is declared or defined without
           specifying the argument types.  (An old-style function
           definition is permitted without a warning if preceded
           by a declaration which specifies the argument types.)

       --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn (C and Objective-C only)
           Warn for obsolescent usages, according to the C
           Standard, in a declaration. For example, warn if
           storage-class specifiers like "static" are not the
           first things in a declaration.  This warning is also
           enabled by --WWeexxttrraa.

       --WWoolldd--ssttyyllee--ddeeffiinniittiioonn (C and Objective-C only)
           Warn if an old-style function definition is used.  A



gcc-4.3.2                   2008-08-27                         61





GCC(1)                         GNU                         GCC(1)


           warning is given even if there is a previous
           prototype.

       --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee (C and Objective-C only)
           A function parameter is declared without a type
           specifier in K&R-style functions:

                   void foo(bar) { }

           This warning is also enabled by --WWeexxttrraa.

       --WWmmiissssiinngg--pprroottoottyyppeess (C and Objective-C only)
           Warn if a global function is defined without a
           previous prototype declaration.  This warning is
           issued even if the definition itself provides a
           prototype.  The aim is to detect global functions that
           fail to be declared in header files.

       --WWmmiissssiinngg--ddeeccllaarraattiioonnss
           Warn if a global function is defined without a
           previous declaration.  Do so even if the definition
           itself provides a prototype.  Use this option to
           detect global functions that are not declared in
           header files.  In C++, no warnings are issued for
           function templates, or for inline functions, or for
           functions in anonymous namespaces.

       --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss
           Warn if a structure's initializer has some fields
           missing.  For example, the following code would cause
           such a warning, because "x.h" is implicitly zero:

                   struct s { int f, g, h; };
                   struct s x = { 3, 4 };

           This option does not warn about designated
           initializers, so the following modification would not
           trigger a warning:

                   struct s { int f, g, h; };
                   struct s x = { .f = 3, .g = 4 };

           This warning is included in --WWeexxttrraa.  To get other
           --WWeexxttrraa warnings without this one, use --WWeexxttrraa
           --WWnnoo--mmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss.

       --WWmmiissssiinngg--nnoorreettuurrnn
           Warn about functions which might be candidates for
           attribute "noreturn".  Note these are only possible
           candidates, not absolute ones.  Care should be taken
           to manually verify functions actually do not ever
           return before adding the "noreturn" attribute,
           otherwise subtle code generation bugs could be
           introduced.  You will not get a warning for "main" in



gcc-4.3.2                   2008-08-27                         62





GCC(1)                         GNU                         GCC(1)


           hosted C environments.

       --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee
           Warn about function pointers which might be candidates
           for "format" attributes.  Note these are only possible
           candidates, not absolute ones.  GCC will guess that
           function pointers with "format" attributes that are
           used in assignment, initialization, parameter passing
           or return statements should have a corresponding
           "format" attribute in the resulting type.  I.e. the
           left-hand side of the assignment or initialization,
           the type of the parameter variable, or the return type
           of the containing function respectively should also
           have a "format" attribute to avoid the warning.

           GCC will also warn about function definitions which
           might be candidates for "format" attributes.  Again,
           these are only possible candidates.  GCC will guess
           that "format" attributes might be appropriate for any
           function that calls a function like "vprintf" or
           "vscanf", but this might not always be the case, and
           some functions for which "format" attributes are
           appropriate may not be detected.

       --WWnnoo--mmuullttiicchhaarr
           Do not warn if a multicharacter constant (''FFOOOOFF'') is
           used.  Usually they indicate a typo in the user's
           code, as they have implementation-defined values, and
           should not be used in portable code.

       --WWnnoorrmmaalliizzeedd==<<nnoonnee||iidd||nnffcc||nnffkkcc>>
           In ISO C and ISO C++, two identifiers are different if
           they are different sequences of characters.  However,
           sometimes when characters outside the basic ASCII
           character set are used, you can have two different
           character sequences that look the same.  To avoid
           confusion, the ISO 10646 standard sets out some
           _n_o_r_m_a_l_i_z_a_t_i_o_n _r_u_l_e_s which when applied ensure that two
           sequences that look the same are turned into the same
           sequence.  GCC can warn you if you are using
           identifiers which have not been normalized; this
           option controls that warning.

           There are four levels of warning that GCC supports.
           The default is --WWnnoorrmmaalliizzeedd==nnffcc, which warns about any
           identifier which is not in the ISO 10646 "C"
           normalized form, _N_F_C.  NFC is the recommended form for
           most uses.

           Unfortunately, there are some characters which ISO C
           and ISO C++ allow in identifiers that when turned into
           NFC aren't allowable as identifiers.  That is, there's
           no way to use these symbols in portable ISO C or C++
           and have all your identifiers in NFC.  --WWnnoorrmmaalliizzeedd==iidd



gcc-4.3.2                   2008-08-27                         63





GCC(1)                         GNU                         GCC(1)


           suppresses the warning for these characters.  It is
           hoped that future versions of the standards involved
           will correct this, which is why this option is not the
           default.

           You can switch the warning off for all characters by
           writing --WWnnoorrmmaalliizzeedd==nnoonnee.  You would only want to do
           this if you were using some other normalization scheme
           (like "D"), because otherwise you can easily create
           bugs that are literally impossible to see.

           Some characters in ISO 10646 have distinct meanings
           but look identical in some fonts or display
           methodologies, especially once formatting has been
           applied.  For instance "\u207F", "SUPERSCRIPT LATIN
           SMALL LETTER N", will display just like a regular "n"
           which has been placed in a superscript.  ISO 10646
           defines the _N_F_K_C normalization scheme to convert all
           these into a standard form as well, and GCC will warn
           if your code is not in NFKC if you use
           --WWnnoorrmmaalliizzeedd==nnffkkcc.  This warning is comparable to
           warning about every identifier that contains the
           letter O because it might be confused with the digit
           0, and so is not the default, but may be useful as a
           local coding convention if the programming environment
           is unable to be fixed to display these characters
           distinctly.

       --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss
           Do not warn about uses of functions, variables, and
           types marked as deprecated by using the "deprecated"
           attribute.

       --WWnnoo--oovveerrffllooww
           Do not warn about compile-time overflow in constant
           expressions.

       --WWoovveerrrriiddee--iinniitt (C and Objective-C only)
           Warn if an initialized field without side effects is
           overridden when using designated initializers.

           This warning is included in --WWeexxttrraa.  To get other
           --WWeexxttrraa warnings without this one, use --WWeexxttrraa
           --WWnnoo--oovveerrrriiddee--iinniitt.

       --WWppaacckkeedd
           Warn if a structure is given the packed attribute, but
           the packed attribute has no effect on the layout or
           size of the structure.  Such structures may be mis-
           aligned for little benefit.  For instance, in this
           code, the variable "f.x" in "struct bar" will be
           misaligned even though "struct bar" does not itself
           have the packed attribute:




gcc-4.3.2                   2008-08-27                         64





GCC(1)                         GNU                         GCC(1)


                   struct foo {
                     int x;
                     char a, b, c, d;
                   } __attribute__((packed));
                   struct bar {
                     char z;
                     struct foo f;
                   };

       --WWppaaddddeedd
           Warn if padding is included in a structure, either to
           align an element of the structure or to align the
           whole structure.  Sometimes when this happens it is
           possible to rearrange the fields of the structure to
           reduce the padding and so make the structure smaller.

       --WWrreedduunnddaanntt--ddeeccllss
           Warn if anything is declared more than once in the
           same scope, even in cases where multiple declaration
           is valid and changes nothing.

       --WWnneesstteedd--eexxtteerrnnss (C and Objective-C only)
           Warn if an "extern" declaration is encountered within
           a function.

       --WWuunnrreeaacchhaabbllee--ccooddee
           Warn if the compiler detects that code will never be
           executed.

           This option is intended to warn when the compiler
           detects that at least a whole line of source code will
           never be executed, because some condition is never
           satisfied or because it is after a procedure that
           never returns.

           It is possible for this option to produce a warning
           even though there are circumstances under which part
           of the affected line can be executed, so care should
           be taken when removing apparently-unreachable code.

           For instance, when a function is inlined, a warning
           may mean that the line is unreachable in only one
           inlined copy of the function.

           This option is not made part of --WWaallll because in a
           debugging version of a program there is often
           substantial code which checks correct functioning of
           the program and is, hopefully, unreachable because the
           program does work.  Another common use of unreachable
           code is to provide behavior which is selectable at
           compile-time.

       --WWiinnlliinnee
           Warn if a function can not be inlined and it was



gcc-4.3.2                   2008-08-27                         65





GCC(1)                         GNU                         GCC(1)


           declared as inline.  Even with this option, the
           compiler will not warn about failures to inline
           functions declared in system headers.

           The compiler uses a variety of heuristics to determine
           whether or not to inline a function.  For example, the
           compiler takes into account the size of the function
           being inlined and the amount of inlining that has
           already been done in the current function.  Therefore,
           seemingly insignificant changes in the source program
           can cause the warnings produced by --WWiinnlliinnee to appear
           or disappear.

       --WWnnoo--iinnvvaalliidd--ooffffsseettooff (C++ and Objective-C++ only)
           Suppress warnings from applying the ooffffsseettooff macro to
           a non-POD type.  According to the 1998 ISO C++
           standard, applying ooffffsseettooff to a non-POD type is
           undefined.  In existing C++ implementations, however,
           ooffffsseettooff typically gives meaningful results even when
           applied to certain kinds of non-POD types. (Such as a
           simple ssttrruucctt that fails to be a POD type only by
           virtue of having a constructor.)  This flag is for
           users who are aware that they are writing nonportable
           code and who have deliberately chosen to ignore the
           warning about it.

           The restrictions on ooffffsseettooff may be relaxed in a
           future version of the C++ standard.

       --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt (C and Objective-C only)
           Suppress warnings from casts to pointer type of an
           integer of a different size.

       --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt (C and Objective-C only)
           Suppress warnings from casts from a pointer to an
           integer type of a different size.

       --WWiinnvvaalliidd--ppcchh
           Warn if a precompiled header is found in the search
           path but can't be used.

       --WWlloonngg--lloonngg
           Warn if lloonngg lloonngg type is used.  This is default.  To
           inhibit the warning messages, use --WWnnoo--lloonngg--lloonngg.
           Flags --WWlloonngg--lloonngg and --WWnnoo--lloonngg--lloonngg are taken into
           account only when --ppeeddaannttiicc flag is used.

       --WWvvaarriiaaddiicc--mmaaccrrooss
           Warn if variadic macros are used in pedantic ISO C90
           mode, or the GNU alternate syntax when in pedantic ISO
           C99 mode.  This is default.  To inhibit the warning
           messages, use --WWnnoo--vvaarriiaaddiicc--mmaaccrrooss.





gcc-4.3.2                   2008-08-27                         66





GCC(1)                         GNU                         GCC(1)


       --WWvvllaa
           Warn if variable length array is used in the code.
           --WWnnoo--vvllaa will prevent the --ppeeddaannttiicc warning of the
           variable length array.

       --WWvvoollaattiillee--rreeggiisstteerr--vvaarr
           Warn if a register variable is declared volatile.  The
           volatile modifier does not inhibit all optimizations
           that may eliminate reads and/or writes to register
           variables.

       --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
           Warn if a requested optimization pass is disabled.
           This warning does not generally indicate that there is
           anything wrong with your code; it merely indicates
           that GCC's optimizers were unable to handle the code
           effectively.  Often, the problem is that your code is
           too big or too complex; GCC will refuse to optimize
           programs when the optimization itself is likely to
           take inordinate amounts of time.

       --WWppooiinntteerr--ssiiggnn (C and Objective-C only)
           Warn for pointer argument passing or assignment with
           different signedness.  This option is only supported
           for C and Objective-C.  It is implied by --WWaallll and by
           --ppeeddaannttiicc, which can be disabled with
           --WWnnoo--ppooiinntteerr--ssiiggnn.

       --WWssttaacckk--pprrootteeccttoorr
           This option is only active when --ffssttaacckk--pprrootteeccttoorr is
           active.  It warns about functions that will not be
           protected against stack smashing.

       --WWoovveerrlleennggtthh--ssttrriinnggss
           Warn about string constants which are longer than the
           "minimum maximum" length specified in the C standard.
           Modern compilers generally allow string constants
           which are much longer than the standard's minimum
           limit, but very portable programs should avoid using
           longer strings.

           The limit applies _a_f_t_e_r string constant concatenation,
           and does not count the trailing NUL.  In C89, the
           limit was 509 characters; in C99, it was raised to
           4095.  C++98 does not specify a normative minimum
           maximum, so we do not diagnose overlength strings in
           C++.

           This option is implied by --ppeeddaannttiicc, and can be
           disabled with --WWnnoo--oovveerrlleennggtthh--ssttrriinnggss.







gcc-4.3.2                   2008-08-27                         67





GCC(1)                         GNU                         GCC(1)


       OOppttiioonnss ffoorr DDeebbuuggggiinngg YYoouurr PPrrooggrraamm oorr GGCCCC

       GCC has various special options that are used for
       debugging either your program or GCC:

       --gg  Produce debugging information in the operating
           system's native format (stabs, COFF, XCOFF, or DWARF
           2).  GDB can work with this debugging information.

           On most systems that use stabs format, --gg enables use
           of extra debugging information that only GDB can use;
           this extra information makes debugging work better in
           GDB but will probably make other debuggers crash or
           refuse to read the program.  If you want to control
           for certain whether to generate the extra information,
           use --ggssttaabbss++, --ggssttaabbss, --ggxxccooffff++, --ggxxccooffff, or --ggvvmmss
           (see below).

           GCC allows you to use --gg with --OO.  The shortcuts taken
           by optimized code may occasionally produce surprising
           results: some variables you declared may not exist at
           all; flow of control may briefly move where you did
           not expect it; some statements may not be executed
           because they compute constant results or their values
           were already at hand; some statements may execute in
           different places because they were moved out of loops.

           Nevertheless it proves possible to debug optimized
           output.  This makes it reasonable to use the optimizer
           for programs that might have bugs.

           The following options are useful when GCC is generated
           with the capability for more than one debugging
           format.

       --ggggddbb
           Produce debugging information for use by GDB.  This
           means to use the most expressive format available
           (DWARF 2, stabs, or the native format if neither of
           those are supported), including GDB extensions if at
           all possible.

       --ggssttaabbss
           Produce debugging information in stabs format (if that
           is supported), without GDB extensions.  This is the
           format used by DBX on most BSD systems.  On MIPS,
           Alpha and System V Release 4 systems this option
           produces stabs debugging output which is not
           understood by DBX or SDB.  On System V Release 4
           systems this option requires the GNU assembler.

       --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss
           Produce debugging information in stabs format (if that
           is supported), for only symbols that are actually



gcc-4.3.2                   2008-08-27                         68





GCC(1)                         GNU                         GCC(1)


           used.

       --ffeemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss
           Instead of emitting debugging information for a C++
           class in only one object file, emit it in all object
           files using the class.  This option should be used
           only with debuggers that are unable to handle the way
           GCC normally emits debugging information for classes
           because using this option will increase the size of
           debugging information by as much as a factor of two.

       --ggssttaabbss++
           Produce debugging information in stabs format (if that
           is supported), using GNU extensions understood only by
           the GNU debugger (GDB).  The use of these extensions
           is likely to make other debuggers crash or refuse to
           read the program.

       --ggccooffff
           Produce debugging information in COFF format (if that
           is supported).  This is the format used by SDB on most
           System V systems prior to System V Release 4.

       --ggxxccooffff
           Produce debugging information in XCOFF format (if that
           is supported).  This is the format used by the DBX
           debugger on IBM RS/6000 systems.

       --ggxxccooffff++
           Produce debugging information in XCOFF format (if that
           is supported), using GNU extensions understood only by
           the GNU debugger (GDB).  The use of these extensions
           is likely to make other debuggers crash or refuse to
           read the program, and may cause assemblers other than
           the GNU assembler (GAS) to fail with an error.

       --ggddwwaarrff--22
           Produce debugging information in DWARF version 2
           format (if that is supported).  This is the format
           used by DBX on IRIX 6.  With this option, GCC uses
           features of DWARF version 3 when they are useful;
           version 3 is upward compatible with version 2, but may
           still cause problems for older debuggers.

       --ggvvmmss
           Produce debugging information in VMS debug format (if
           that is supported).  This is the format used by DEBUG
           on VMS systems.

       --gg_l_e_v_e_l
       --ggggddbb_l_e_v_e_l
       --ggssttaabbss_l_e_v_e_l
       --ggccooffff_l_e_v_e_l




gcc-4.3.2                   2008-08-27                         69





GCC(1)                         GNU                         GCC(1)


       --ggxxccooffff_l_e_v_e_l
       --ggvvmmss_l_e_v_e_l
           Request debugging information and also use _l_e_v_e_l to
           specify how much information.  The default level is 2.

           Level 0 produces no debug information at all.  Thus,
           --gg00 negates --gg.

           Level 1 produces minimal information, enough for
           making backtraces in parts of the program that you
           don't plan to debug.  This includes descriptions of
           functions and external variables, but no information
           about local variables and no line numbers.

           Level 3 includes extra information, such as all the
           macro definitions present in the program.  Some
           debuggers support macro expansion when you use --gg33.

           --ggddwwaarrff--22 does not accept a concatenated debug level,
           because GCC used to support an option --ggddwwaarrff that
           meant to generate debug information in version 1 of
           the DWARF format (which is very different from version
           2), and it would have been too confusing.  That debug
           format is long obsolete, but the option cannot be
           changed now.  Instead use an additional --gg_l_e_v_e_l option
           to change the debug level for DWARF2.

       --ffeelliimmiinnaattee--ddwwaarrff22--dduuppss
           Compress DWARF2 debugging information by eliminating
           duplicated information about each symbol.  This option
           only makes sense when generating DWARF2 debugging
           information with --ggddwwaarrff--22.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy
           Emit debug information for struct-like types only when
           the base name of the compilation source file matches
           the base name of file in which the struct was defined.

           This option substantially reduces the size of
           debugging information, but at significant potential
           loss in type information to the debugger.  See
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd for a less aggressive
           option.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd for more
           detailed control.

           This option works only with DWARF 2.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd
           Emit debug information for struct-like types only when
           the base name of the compilation source file matches
           the base name of file in which the type was defined,
           unless the struct is a template or defined in a system
           header.




gcc-4.3.2                   2008-08-27                         70





GCC(1)                         GNU                         GCC(1)


           This option significantly reduces the size of
           debugging information, with some potential loss in
           type information to the debugger.  See
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy for a more aggressive
           option.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd for more
           detailed control.

           This option works only with DWARF 2.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd[==_s_p_e_c_-_l_i_s_t]
           Specify the struct-like types for which the compiler
           will generate debug information.  The intent is to
           reduce duplicate struct debug information between
           different object files within the same program.

           This option is a detailed version of
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd and
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy, which will serve for
           most needs.

           A specification has the syntax
           [ddiirr::|iinndd::][oorrdd::|ggeenn::](aannyy|ssyyss|bbaassee|nnoonnee)

           The optional first word limits the specification to
           structs that are used directly (ddiirr::) or used
           indirectly (iinndd::).  A struct type is used directly
           when it is the type of a variable, member.  Indirect
           uses arise through pointers to structs.  That is, when
           use of an incomplete struct would be legal, the use is
           indirect.  An example is ssttrruucctt oonnee ddiirreecctt;; ssttrruucctt ttwwoo
           ** iinnddiirreecctt;;.

           The optional second word limits the specification to
           ordinary structs (oorrdd::) or generic structs (ggeenn::).
           Generic structs are a bit complicated to explain.  For
           C++, these are non-explicit specializations of
           template classes, or non-template classes within the
           above.  Other programming languages have generics, but
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd does not yet implement
           them.

           The third word specifies the source files for those
           structs for which the compiler will emit debug
           information.  The values nnoonnee and aannyy have the normal
           meaning.  The value bbaassee means that the base of name
           of the file in which the type declaration appears must
           match the base of the name of the main compilation
           file.  In practice, this means that types declared in
           _f_o_o_._c and _f_o_o_._h will have debug information, but types
           declared in other header will not.  The value ssyyss
           means those types satisfying bbaassee or declared in
           system or compiler headers.

           You may need to experiment to determine the best



gcc-4.3.2                   2008-08-27                         71





GCC(1)                         GNU                         GCC(1)


           settings for your application.

           The default is --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd==aallll.

           This option works only with DWARF 2.

       --ffnnoo--mmeerrggee--ddeebbuugg--ssttrriinnggss
           Direct the linker to merge together strings which are
           identical in different object files.  This is not
           supported by all assemblers or linker.  This decreases
           the size of the debug information in the output file
           at the cost of increasing link processing time.  This
           is on by default.

       --ffddeebbuugg--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           When compiling files in directory _o_l_d, record
           debugging information describing them as in _n_e_w
           instead.

       --pp  Generate extra code to write profile information
           suitable for the analysis program pprrooff.  You must use
           this option when compiling the source files you want
           data about, and you must also use it when linking.

       --ppgg Generate extra code to write profile information
           suitable for the analysis program ggpprrooff.  You must use
           this option when compiling the source files you want
           data about, and you must also use it when linking.

       --QQ  Makes the compiler print out each function name as it
           is compiled, and print some statistics about each pass
           when it finishes.

       --ffttiimmee--rreeppoorrtt
           Makes the compiler print some statistics about the
           time consumed by each pass when it finishes.

       --ffmmeemm--rreeppoorrtt
           Makes the compiler print some statistics about
           permanent memory allocation when it finishes.

       --ffpprree--iippaa--mmeemm--rreeppoorrtt
       --ffppoosstt--iippaa--mmeemm--rreeppoorrtt
           Makes the compiler print some statistics about
           permanent memory allocation before or after
           interprocedural optimization.

       --ffpprrooffiillee--aarrccss
           Add code so that program flow _a_r_c_s are instrumented.
           During execution the program records how many times
           each branch and call is executed and how many times it
           is taken or returns.  When the compiled program exits
           it saves this data to a file called _a_u_x_n_a_m_e_._g_c_d_a for
           each source file.  The data may be used for profile-



gcc-4.3.2                   2008-08-27                         72





GCC(1)                         GNU                         GCC(1)


           directed optimizations (--ffbbrraanncchh--pprroobbaabbiilliittiieess), or
           for test coverage analysis (--fftteesstt--ccoovveerraaggee).  Each
           object file's _a_u_x_n_a_m_e is generated from the name of
           the output file, if explicitly specified and it is not
           the final executable, otherwise it is the basename of
           the source file.  In both cases any suffix is removed
           (e.g. _f_o_o_._g_c_d_a for input file _d_i_r_/_f_o_o_._c, or
           _d_i_r_/_f_o_o_._g_c_d_a for output file specified as --oo
           ddiirr//ffoooo..oo).

       ----ccoovveerraaggee
           This option is used to compile and link code
           instrumented for coverage analysis.  The option is a
           synonym for --ffpprrooffiillee--aarrccss --fftteesstt--ccoovveerraaggee (when
           compiling) and --llggccoovv (when linking).  See the
           documentation for those options for more details.

           *   Compile the source files with --ffpprrooffiillee--aarrccss plus
               optimization and code generation options.  For
               test coverage analysis, use the additional
               --fftteesstt--ccoovveerraaggee option.  You do not need to
               profile every source file in a program.

           *   Link your object files with --llggccoovv or
               --ffpprrooffiillee--aarrccss (the latter implies the former).

           *   Run the program on a representative workload to
               generate the arc profile information.  This may be
               repeated any number of times.  You can run
               concurrent instances of your program, and provided
               that the file system supports locking, the data
               files will be correctly updated.  Also "fork"
               calls are detected and correctly handled (double
               counting will not happen).

           *   For profile-directed optimizations, compile the
               source files again with the same optimization and
               code generation options plus
               --ffbbrraanncchh--pprroobbaabbiilliittiieess.

           *   For test coverage analysis, use ggccoovv to produce
               human readable information from the _._g_c_n_o and
               _._g_c_d_a files.  Refer to the ggccoovv documentation for
               further information.

           With --ffpprrooffiillee--aarrccss, for each function of your program
           GCC creates a program flow graph, then finds a
           spanning tree for the graph.  Only arcs that are not
           on the spanning tree have to be instrumented: the
           compiler adds code to count the number of times that
           these arcs are executed.  When an arc is the only exit
           or only entrance to a block, the instrumentation code
           can be added to the block; otherwise, a new basic
           block must be created to hold the instrumentation



gcc-4.3.2                   2008-08-27                         73





GCC(1)                         GNU                         GCC(1)


           code.

       --fftteesstt--ccoovveerraaggee
           Produce a notes file that the ggccoovv code-coverage
           utility can use to show program coverage.  Each source
           file's note file is called _a_u_x_n_a_m_e_._g_c_n_o.  Refer to the
           --ffpprrooffiillee--aarrccss option above for a description of
           _a_u_x_n_a_m_e and instructions on how to generate test
           coverage data.  Coverage data will match the source
           files more closely, if you do not optimize.

       --ffddbbgg--ccnntt--lliisstt
           Print the name and the counter upperbound for all
           debug counters.

       --ffddbbgg--ccnntt==_c_o_u_n_t_e_r_-_v_a_l_u_e_-_l_i_s_t
           Set the internal debug counter upperbound. _c_o_u_n_t_e_r_-
           _v_a_l_u_e_-_l_i_s_t is a comma-separated list of _n_a_m_e:_v_a_l_u_e
           pairs which sets the upperbound of each debug counter
           _n_a_m_e to _v_a_l_u_e.  All debug counters have the initial
           upperbound of _U_I_N_T___M_A_X, thus _d_b_g___c_n_t_(_) returns true
           always unless the upperbound is set by this option.
           e.g. With -fdbg-cnt=dce:10,tail_call:0 dbg_cnt(dce)
           will return true only for first 10 invocations and
           dbg_cnt(tail_call) will return false always.

       --dd_l_e_t_t_e_r_s
       --ffdduummpp--rrttll--_p_a_s_s
           Says to make debugging dumps during compilation at
           times specified by _l_e_t_t_e_r_s.    This is used for
           debugging the RTL-based passes of the compiler.  The
           file names for most of the dumps are made by appending
           a pass number and a word to the _d_u_m_p_n_a_m_e.  _d_u_m_p_n_a_m_e is
           generated from the name of the output file, if
           explicitly specified and it is not an executable,
           otherwise it is the basename of the source file. These
           switches may have different effects when --EE is used
           for preprocessing.

           Most debug dumps can be enabled either passing a
           letter to the --dd option, or with a long --ffdduummpp--rrttll
           switch; here are the possible letters for use in
           _l_e_t_t_e_r_s and _p_a_s_s, and their meanings:

           --ddAA Annotate the assembler output with miscellaneous
               debugging information.

           --ddBB
           --ffdduummpp--rrttll--bbbbrroo
               Dump after block reordering, to _f_i_l_e_._1_4_8_r_._b_b_r_o.

           --ddcc
           --ffdduummpp--rrttll--ccoommbbiinnee
               Dump after the RTL instruction combination pass,



gcc-4.3.2                   2008-08-27                         74





GCC(1)                         GNU                         GCC(1)


               to the file _f_i_l_e_._1_2_9_r_._c_o_m_b_i_n_e.

           --ddCC
           --ffdduummpp--rrttll--ccee11
           --ffdduummpp--rrttll--ccee22
               --ddCC and --ffdduummpp--rrttll--ccee11 enable dumping after the
               first if conversion, to the file _f_i_l_e_._1_1_7_r_._c_e_1.
               --ddCC and --ffdduummpp--rrttll--ccee22 enable dumping after the
               second if conversion, to the file _f_i_l_e_._1_3_0_r_._c_e_2.

           --dddd
           --ffdduummpp--rrttll--bbttll
           --ffdduummpp--rrttll--ddbbrr
               --dddd and --ffdduummpp--rrttll--bbttll enable dumping after branch
               target load optimization, to _f_i_l_e_._3_1_._b_t_l.  --dddd and
               --ffdduummpp--rrttll--ddbbrr enable dumping after delayed branch
               scheduling, to _f_i_l_e_._3_6_._d_b_r.

           --ddDD Dump all macro definitions, at the end of
               preprocessing, in addition to normal output.

           --ddEE
           --ffdduummpp--rrttll--ccee33
               Dump after the third if conversion, to
               _f_i_l_e_._1_4_6_r_._c_e_3.

           --ddff
           --ffdduummpp--rrttll--ccffgg
           --ffdduummpp--rrttll--lliiffee
               --ddff and --ffdduummpp--rrttll--ccffgg enable dumping after
               control and data flow analysis, to _f_i_l_e_._1_1_6_r_._c_f_g.
               --ddff and --ffdduummpp--rrttll--ccffgg enable dumping dump after
               life analysis, to _f_i_l_e_._1_2_8_r_._l_i_f_e_1 and
               _f_i_l_e_._1_3_5_r_._l_i_f_e_2.

           --ddgg
           --ffdduummpp--rrttll--ggrreegg
               Dump after global register allocation, to
               _f_i_l_e_._1_3_9_r_._g_r_e_g.

           --ddGG
           --ffdduummpp--rrttll--ggccssee
           --ffdduummpp--rrttll--bbyyppaassss
               --ddGG and --ffdduummpp--rrttll--ggccssee enable dumping after GCSE,
               to _f_i_l_e_._1_1_4_r_._g_c_s_e.  --ddGG and --ffdduummpp--rrttll--bbyyppaassss
               enable dumping after jump bypassing and control
               flow optimizations, to _f_i_l_e_._1_1_5_r_._b_y_p_a_s_s.

           --ddhh
           --ffdduummpp--rrttll--eehh
               Dump after finalization of EH handling code, to
               _f_i_l_e_._0_2_._e_h.

           --ddii



gcc-4.3.2                   2008-08-27                         75





GCC(1)                         GNU                         GCC(1)


           --ffdduummpp--rrttll--ssiibblliinngg
               Dump after sibling call optimizations, to
               _f_i_l_e_._1_0_6_r_._s_i_b_l_i_n_g.

           --ddjj
           --ffdduummpp--rrttll--jjuummpp
               Dump after the first jump optimization, to
               _f_i_l_e_._1_1_2_r_._j_u_m_p.

           --ddkk
           --ffdduummpp--rrttll--ssttaacckk
               Dump after conversion from GCC's "flat register
               file" registers to the x87's stack-like registers,
               to _f_i_l_e_._1_5_2_r_._s_t_a_c_k.

           --ddll
           --ffdduummpp--rrttll--llrreegg
               Dump after local register allocation, to
               _f_i_l_e_._1_3_8_r_._l_r_e_g.

           --ddLL
           --ffdduummpp--rrttll--lloooopp22
               --ddLL and --ffdduummpp--rrttll--lloooopp22 enable dumping after the
               loop optimization pass, to _f_i_l_e_._1_1_9_r_._l_o_o_p_2,
               _f_i_l_e_._1_2_0_r_._l_o_o_p_2___i_n_i_t, _f_i_l_e_._1_2_1_r_._l_o_o_p_2___i_n_v_a_r_i_a_n_t,
               and _f_i_l_e_._1_2_5_r_._l_o_o_p_2___d_o_n_e.

           --ddmm
           --ffdduummpp--rrttll--ssmmss
               Dump after modulo scheduling, to _f_i_l_e_._1_3_6_r_._s_m_s.

           --ddMM
           --ffdduummpp--rrttll--mmaacchh
               Dump after performing the machine dependent
               reorganization pass, to _f_i_l_e_._1_5_5_r_._m_a_c_h if that
               pass exists.

           --ddnn
           --ffdduummpp--rrttll--rrnnrreegg
               Dump after register renumbering, to
               _f_i_l_e_._1_4_7_r_._r_n_r_e_g.

           --ddNN
           --ffdduummpp--rrttll--rreeggmmoovvee
               Dump after the register move pass, to
               _f_i_l_e_._1_3_2_r_._r_e_g_m_o_v_e.

           --ddoo
           --ffdduummpp--rrttll--ppoossttrreellooaadd
               Dump after post-reload optimizations, to
               _f_i_l_e_._2_4_._p_o_s_t_r_e_l_o_a_d.

           --ddrr




gcc-4.3.2                   2008-08-27                         76





GCC(1)                         GNU                         GCC(1)


           --ffdduummpp--rrttll--eexxppaanndd
               Dump after RTL generation, to _f_i_l_e_._1_0_4_r_._e_x_p_a_n_d.

           --ddRR
           --ffdduummpp--rrttll--sscchheedd22
               Dump after the second scheduling pass, to
               _f_i_l_e_._1_4_9_r_._s_c_h_e_d_2.

           --ddss
           --ffdduummpp--rrttll--ccssee
               Dump after CSE (including the jump optimization
               that sometimes follows CSE), to _f_i_l_e_._1_1_3_r_._c_s_e.

           --ddSS
           --ffdduummpp--rrttll--sscchheedd11
               Dump after the first scheduling pass, to
               _f_i_l_e_._1_3_6_r_._s_c_h_e_d_1.

           --ddtt
           --ffdduummpp--rrttll--ccssee22
               Dump after the second CSE pass (including the jump
               optimization that sometimes follows CSE), to
               _f_i_l_e_._1_2_7_r_._c_s_e_2.

           --ddTT
           --ffdduummpp--rrttll--ttrraacceerr
               Dump after running tracer, to _f_i_l_e_._1_1_8_r_._t_r_a_c_e_r.

           --ddVV
           --ffdduummpp--rrttll--vvpptt
           --ffdduummpp--rrttll--vvaarrttrraacckk
               --ddVV and --ffdduummpp--rrttll--vvpptt enable dumping after the
               value profile transformations, to _f_i_l_e_._1_0_._v_p_t.
               --ddVV and --ffdduummpp--rrttll--vvaarrttrraacckk enable dumping after
               variable tracking, to _f_i_l_e_._1_5_4_r_._v_a_r_t_r_a_c_k.

           --ddww
           --ffdduummpp--rrttll--ffllooww22
               Dump after the second flow pass, to
               _f_i_l_e_._1_4_2_r_._f_l_o_w_2.

           --ddzz
           --ffdduummpp--rrttll--ppeeeepphhoollee22
               Dump after the peephole pass, to
               _f_i_l_e_._1_4_5_r_._p_e_e_p_h_o_l_e_2.

           --ddZZ
           --ffdduummpp--rrttll--wweebb
               Dump after live range splitting, to _f_i_l_e_._1_2_6_r_._w_e_b.

           --ddaa
           --ffdduummpp--rrttll--aallll
               Produce all the dumps listed above.




gcc-4.3.2                   2008-08-27                         77





GCC(1)                         GNU                         GCC(1)


           --ddHH Produce a core dump whenever an error occurs.

           --ddmm Print statistics on memory usage, at the end of
               the run, to standard error.

           --ddpp Annotate the assembler output with a comment
               indicating which pattern and alternative was used.
               The length of each instruction is also printed.

           --ddPP Dump the RTL in the assembler output as a comment
               before each instruction.  Also turns on --ddpp
               annotation.

           --ddvv For each of the other indicated dump files (either
               with --dd or --ffdduummpp--rrttll--_p_a_s_s), dump a representation
               of the control flow graph suitable for viewing
               with VCG to _f_i_l_e_._p_a_s_s_._v_c_g.

           --ddxx Just generate RTL for a function instead of
               compiling it.  Usually used with rr
               (--ffdduummpp--rrttll--eexxppaanndd).

           --ddyy Dump debugging information during parsing, to
               standard error.

       --ffdduummpp--nnooaaddddrr
           When doing debugging dumps (see --dd option above),
           suppress address output.  This makes it more feasible
           to use diff on debugging dumps for compiler
           invocations with different compiler binaries and/or
           different text / bss / data / heap / stack / dso start
           locations.

       --ffdduummpp--uunnnnuummbbeerreedd
           When doing debugging dumps (see --dd option above),
           suppress instruction numbers and address output.  This
           makes it more feasible to use diff on debugging dumps
           for compiler invocations with different options, in
           particular with and without --gg.

       --ffdduummpp--ttrraannssllaattiioonn--uunniitt (C++ only)
       --ffdduummpp--ttrraannssllaattiioonn--uunniitt--_o_p_t_i_o_n_s (C++ only)
           Dump a representation of the tree structure for the
           entire translation unit to a file.  The file name is
           made by appending _._t_u to the source file name.  If the
           --_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s controls the details of
           the dump as described for the --ffdduummpp--ttrreeee options.

       --ffdduummpp--ccllaassss--hhiieerraarrcchhyy (C++ only)
       --ffdduummpp--ccllaassss--hhiieerraarrcchhyy--_o_p_t_i_o_n_s (C++ only)
           Dump a representation of each class's hierarchy and
           virtual function table layout to a file.  The file
           name is made by appending _._c_l_a_s_s to the source file
           name.  If the --_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s controls



gcc-4.3.2                   2008-08-27                         78





GCC(1)                         GNU                         GCC(1)


           the details of the dump as described for the
           --ffdduummpp--ttrreeee options.

       --ffdduummpp--iippaa--_s_w_i_t_c_h
           Control the dumping at various stages of inter-
           procedural analysis language tree to a file.  The file
           name is generated by appending a switch specific
           suffix to the source file name.  The following dumps
           are possible:

           aallll Enables all inter-procedural analysis dumps.

           ccggrraapphh
               Dumps information about call-graph optimization,
               unused function removal, and inlining decisions.

           iinnlliinnee
               Dump after function inlining.

       --ffdduummpp--ttrreeee--_s_w_i_t_c_h
       --ffdduummpp--ttrreeee--_s_w_i_t_c_h--_o_p_t_i_o_n_s
           Control the dumping at various stages of processing
           the intermediate language tree to a file.  The file
           name is generated by appending a switch specific
           suffix to the source file name.  If the --_o_p_t_i_o_n_s form
           is used, _o_p_t_i_o_n_s is a list of -- separated options that
           control the details of the dump.  Not all options are
           applicable to all dumps, those which are not
           meaningful will be ignored.  The following options are
           available

           aaddddrreessss
               Print the address of each node.  Usually this is
               not meaningful as it changes according to the
               environment and source file.  Its primary use is
               for tying up a dump file with a debug environment.

           sslliimm
               Inhibit dumping of members of a scope or body of a
               function merely because that scope has been
               reached.  Only dump such items when they are
               directly reachable by some other path.  When
               dumping pretty-printed trees, this option inhibits
               dumping the bodies of control structures.

           rraaww Print a raw representation of the tree.  By
               default, trees are pretty-printed into a C-like
               representation.

           ddeettaaiillss
               Enable more detailed dumps (not honored by every
               dump option).





gcc-4.3.2                   2008-08-27                         79





GCC(1)                         GNU                         GCC(1)


           ssttaattss
               Enable dumping various statistics about the pass
               (not honored by every dump option).

           bblloocckkss
               Enable showing basic block boundaries (disabled in
               raw dumps).

           vvooppss
               Enable showing virtual operands for every
               statement.

           lliinneennoo
               Enable showing line numbers for statements.

           uuiidd Enable showing the unique ID ("DECL_UID") for each
               variable.

           aallll Turn on all options, except rraaww, sslliimm and lliinneennoo.

           The following tree dumps are possible:

           oorriiggiinnaall
               Dump before any tree based optimization, to
               _f_i_l_e_._o_r_i_g_i_n_a_l.

           ooppttiimmiizzeedd
               Dump after all tree based optimization, to
               _f_i_l_e_._o_p_t_i_m_i_z_e_d.

           ggiimmppllee
               Dump each function before and after the
               gimplification pass to a file.  The file name is
               made by appending _._g_i_m_p_l_e to the source file name.

           ccffgg Dump the control flow graph of each function to a
               file.  The file name is made by appending _._c_f_g to
               the source file name.

           vvccgg Dump the control flow graph of each function to a
               file in VCG format.  The file name is made by
               appending _._v_c_g to the source file name.  Note that
               if the file contains more than one function, the
               generated file cannot be used directly by VCG.
               You will need to cut and paste each function's
               graph into its own separate file first.

           cchh  Dump each function after copying loop headers.
               The file name is made by appending _._c_h to the
               source file name.

           ssssaa Dump SSA related information to a file.  The file
               name is made by appending _._s_s_a to the source file
               name.



gcc-4.3.2                   2008-08-27                         80





GCC(1)                         GNU                         GCC(1)


           ssaalliiaass
               Dump structure aliasing variable information to a
               file.  This file name is made by appending _._s_a_l_i_a_s
               to the source file name.

           aalliiaass
               Dump aliasing information for each function.  The
               file name is made by appending _._a_l_i_a_s to the
               source file name.

           ccccpp Dump each function after CCP.  The file name is
               made by appending _._c_c_p to the source file name.

           ssttoorreeccccpp
               Dump each function after STORE-CCP.  The file name
               is made by appending _._s_t_o_r_e_c_c_p to the source file
               name.

           pprree Dump trees after partial redundancy elimination.
               The file name is made by appending _._p_r_e to the
               source file name.

           ffrree Dump trees after full redundancy elimination.  The
               file name is made by appending _._f_r_e to the source
               file name.

           ccooppyypprroopp
               Dump trees after copy propagation.  The file name
               is made by appending _._c_o_p_y_p_r_o_p to the source file
               name.

           ssttoorree__ccooppyypprroopp
               Dump trees after store copy-propagation.  The file
               name is made by appending _._s_t_o_r_e___c_o_p_y_p_r_o_p to the
               source file name.

           ddccee Dump each function after dead code elimination.
               The file name is made by appending _._d_c_e to the
               source file name.

           mmuuddffllaapp
               Dump each function after adding mudflap
               instrumentation.  The file name is made by
               appending _._m_u_d_f_l_a_p to the source file name.

           ssrraa Dump each function after performing scalar
               replacement of aggregates.  The file name is made
               by appending _._s_r_a to the source file name.

           ssiinnkk
               Dump each function after performing code sinking.
               The file name is made by appending _._s_i_n_k to the
               source file name.




gcc-4.3.2                   2008-08-27                         81





GCC(1)                         GNU                         GCC(1)


           ddoomm Dump each function after applying dominator tree
               optimizations.  The file name is made by appending
               _._d_o_m to the source file name.

           ddssee Dump each function after applying dead store
               elimination.  The file name is made by appending
               _._d_s_e to the source file name.

           pphhiioopptt
               Dump each function after optimizing PHI nodes into
               straightline code.  The file name is made by
               appending _._p_h_i_o_p_t to the source file name.

           ffoorrwwpprroopp
               Dump each function after forward propagating
               single use variables.  The file name is made by
               appending _._f_o_r_w_p_r_o_p to the source file name.

           ccooppyyrreennaammee
               Dump each function after applying the copy rename
               optimization.  The file name is made by appending
               _._c_o_p_y_r_e_n_a_m_e to the source file name.

           nnrrvv Dump each function after applying the named return
               value optimization on generic trees.  The file
               name is made by appending _._n_r_v to the source file
               name.

           vveecctt
               Dump each function after applying vectorization of
               loops.  The file name is made by appending _._v_e_c_t
               to the source file name.

           vvrrpp Dump each function after Value Range Propagation
               (VRP).  The file name is made by appending _._v_r_p to
               the source file name.

           aallll Enable all the available tree dumps with the flags
               provided in this option.

       --ffttrreeee--vveeccttoorriizzeerr--vveerrbboossee==_n
           This option controls the amount of debugging output
           the vectorizer prints.  This information is written to
           standard error, unless --ffdduummpp--ttrreeee--aallll or
           --ffdduummpp--ttrreeee--vveecctt is specified, in which case it is
           output to the usual dump listing file, _._v_e_c_t.  For _n=0
           no diagnostic information is reported.  If _n=1 the
           vectorizer reports each loop that got vectorized, and
           the total number of loops that got vectorized.  If _n=2
           the vectorizer also reports non-vectorized loops that
           passed the first analysis phase
           (vect_analyze_loop_form) - i.e. countable, inner-most,
           single-bb, single-entry/exit loops.  This is the same
           verbosity level that --ffdduummpp--ttrreeee--vveecctt--ssttaattss uses.



gcc-4.3.2                   2008-08-27                         82





GCC(1)                         GNU                         GCC(1)


           Higher verbosity levels mean either more information
           dumped for each reported loop, or same amount of
           information reported for more loops: If _n=3, alignment
           related information is added to the reports.  If _n=4,
           data-references related information (e.g. memory
           dependences, memory access-patterns) is added to the
           reports.  If _n=5, the vectorizer reports also non-
           vectorized inner-most loops that did not pass the
           first analysis phase (i.e., may not be countable, or
           may have complicated control-flow).  If _n=6, the
           vectorizer reports also non-vectorized nested loops.
           For _n=7, all the information the vectorizer generates
           during its analysis and transformation is reported.
           This is the same verbosity level that
           --ffdduummpp--ttrreeee--vveecctt--ddeettaaiillss uses.

       --ffrraannddoomm--sseeeedd==_s_t_r_i_n_g
           This option provides a seed that GCC uses when it
           would otherwise use random numbers.  It is used to
           generate certain symbol names that have to be
           different in every compiled file.  It is also used to
           place unique stamps in coverage data files and the
           object files that produce them.  You can use the
           --ffrraannddoomm--sseeeedd option to produce reproducibly identical
           object files.

           The _s_t_r_i_n_g should be different for every file you
           compile.

       --ffsscchheedd--vveerrbboossee==_n
           On targets that use instruction scheduling, this
           option controls the amount of debugging output the
           scheduler prints.  This information is written to
           standard error, unless --ddSS or --ddRR is specified, in
           which case it is output to the usual dump listing
           file, _._s_c_h_e_d or _._s_c_h_e_d_2 respectively.  However for _n
           greater than nine, the output is always printed to
           standard error.

           For _n greater than zero, --ffsscchheedd--vveerrbboossee outputs the
           same information as --ddRRSS.  For _n greater than one, it
           also output basic block probabilities, detailed ready
           list information and unit/insn info.  For _n greater
           than two, it includes RTL at abort point, control-flow
           and regions info.  And for _n over four,
           --ffsscchheedd--vveerrbboossee also includes dependence info.

       --ssaavvee--tteemmppss
           Store the usual "temporary" intermediate files
           permanently; place them in the current directory and
           name them based on the source file.  Thus, compiling
           _f_o_o_._c with --cc --ssaavvee--tteemmppss would produce files _f_o_o_._i
           and _f_o_o_._s, as well as _f_o_o_._o.  This creates a
           preprocessed _f_o_o_._i output file even though the



gcc-4.3.2                   2008-08-27                         83





GCC(1)                         GNU                         GCC(1)


           compiler now normally uses an integrated preprocessor.

           When used in combination with the --xx command line
           option, --ssaavvee--tteemmppss is sensible enough to avoid over
           writing an input source file with the same extension
           as an intermediate file.  The corresponding
           intermediate file may be obtained by renaming the
           source file before using --ssaavvee--tteemmppss.

       --ttiimmee
           Report the CPU time taken by each subprocess in the
           compilation sequence.  For C source files, this is the
           compiler proper and assembler (plus the linker if
           linking is done).  The output looks like this:

                   # cc1 0.12 0.01
                   # as 0.00 0.01

           The first number on each line is the "user time", that
           is time spent executing the program itself.  The
           second number is "system time", time spent executing
           operating system routines on behalf of the program.
           Both numbers are in seconds.

       --ffvvaarr--ttrraacckkiinngg
           Run variable tracking pass.  It computes where
           variables are stored at each position in code.  Better
           debugging information is then generated (if the
           debugging information format supports this
           information).

           It is enabled by default when compiling with
           optimization (--OOss, --OO, --OO22, ...), debugging
           information (--gg) and the debug info format supports
           it.

       --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y
           Print the full absolute name of the library file
           _l_i_b_r_a_r_y that would be used when linking---and don't do
           anything else.  With this option, GCC does not compile
           or link anything; it just prints the file name.

       --pprriinntt--mmuullttii--ddiirreeccttoorryy
           Print the directory name corresponding to the multilib
           selected by any other switches present in the command
           line.  This directory is supposed to exist in
           GGCCCC__EEXXEECC__PPRREEFFIIXX.

       --pprriinntt--mmuullttii--lliibb
           Print the mapping from multilib directory names to
           compiler switches that enable them.  The directory
           name is separated from the switches by ;;, and each
           switch starts with an @@}} iinnsstteeaadd ooff tthhee @@ssaammpp{{--,
           without spaces between multiple switches.  This is



gcc-4.3.2                   2008-08-27                         84





GCC(1)                         GNU                         GCC(1)


           supposed to ease shell-processing.

       --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m
           Like --pprriinntt--ffiillee--nnaammee, but searches for a program such
           as ccpppp.

       --pprriinntt--lliibbggcccc--ffiillee--nnaammee
           Same as --pprriinntt--ffiillee--nnaammee==lliibbggcccc..aa.

           This is useful when you use --nnoossttddlliibb or
           --nnooddeeffaauullttlliibbss but you do want to link with _l_i_b_g_c_c_._a.
           You can do

                   gcc -nostdlib <files>... `gcc -print-libgcc-file-name`

       --pprriinntt--sseeaarrcchh--ddiirrss
           Print the name of the configured installation
           directory and a list of program and library
           directories ggcccc will search---and don't do anything
           else.

           This is useful when ggcccc prints the error message
           iinnssttaallllaattiioonn pprroobblleemm,, ccaannnnoott eexxeecc ccpppp00:: NNoo ssuucchh ffiillee
           oorr ddiirreeccttoorryy.  To resolve this you either need to put
           _c_p_p_0 and the other compiler components where ggcccc
           expects to find them, or you can set the environment
           variable GGCCCC__EEXXEECC__PPRREEFFIIXX to the directory where you
           installed them.  Don't forget the trailing //.

       --pprriinntt--ssyyssrroooott--hheeaaddeerrss--ssuuffffiixx
           Print the suffix added to the target sysroot when
           searching for headers, or give an error if the
           compiler is not configured with such a suffix---and
           don't do anything else.

       --dduummppmmaacchhiinnee
           Print the compiler's target machine (for example,
           ii668866--ppcc--lliinnuuxx--ggnnuu)---and don't do anything else.

       --dduummppvveerrssiioonn
           Print the compiler version (for example, 33..00)---and
           don't do anything else.

       --dduummppssppeeccss
           Print the compiler's built-in specs---and don't do
           anything else.  (This is used when GCC itself is being
           built.)

       --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess
           Normally, when producing DWARF2 output, GCC will emit
           debugging information for all types declared in a
           compilation unit, regardless of whether or not they
           are actually used in that compilation unit.  Sometimes
           this is useful, such as if, in the debugger, you want



gcc-4.3.2                   2008-08-27                         85





GCC(1)                         GNU                         GCC(1)


           to cast a value to a type that is not actually used in
           your program (but is declared).  More often, however,
           this results in a significant amount of wasted space.
           With this option, GCC will avoid producing debug
           symbol output for types that are nowhere used in the
           source file being compiled.

       OOppttiioonnss TThhaatt CCoonnttrrooll OOppttiimmiizzaattiioonn

       These options control various sorts of optimizations.

       Without any optimization option, the compiler's goal is to
       reduce the cost of compilation and to make debugging
       produce the expected results.  Statements are independent:
       if you stop the program with a breakpoint between
       statements, you can then assign a new value to any
       variable or change the program counter to any other
       statement in the function and get exactly the results you
       would expect from the source code.

       Turning on optimization flags makes the compiler attempt
       to improve the performance and/or code size at the expense
       of compilation time and possibly the ability to debug the
       program.

       The compiler performs optimization based on the knowledge
       it has of the program.  Optimization levels --OO and above,
       in particular, enable _u_n_i_t_-_a_t_-_a_-_t_i_m_e mode, which allows
       the compiler to consider information gained from later
       functions in the file when compiling a function.
       Compiling multiple files at once to a single output file
       in _u_n_i_t_-_a_t_-_a_-_t_i_m_e mode allows the compiler to use
       information gained from all of the files when compiling
       each of them.

       Not all optimizations are controlled directly by a flag.
       Only optimizations that have a flag are listed.

       --OO
       --OO11 Optimize.  Optimizing compilation takes somewhat more
           time, and a lot more memory for a large function.

           With --OO, the compiler tries to reduce code size and
           execution time, without performing any optimizations
           that take a great deal of compilation time.

           --OO turns on the following optimization flags:

           --ffaauuttoo--iinncc--ddeecc --ffccpprroopp--rreeggiisstteerrss --ffddccee --ffddeeffeerr--ppoopp
           --ffddeellaayyeedd--bbrraanncchh --ffddssee --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy
           --ffiiff--ccoonnvveerrssiioonn22 --ffiiff--ccoonnvveerrssiioonn
           --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss --ffiippaa--ppuurree--ccoonnsstt
           --ffiippaa--rreeffeerreennccee --ffmmeerrggee--ccoonnssttaannttss --ffsspplliitt--wwiiddee--ttyyppeess
           --ffttrreeee--ccccpp --ffttrreeee--cchh --ffttrreeee--ccooppyyrreennaammee --ffttrreeee--ddccee



gcc-4.3.2                   2008-08-27                         86





GCC(1)                         GNU                         GCC(1)


           --ffttrreeee--ddoommiinnaattoorr--ooppttss --ffttrreeee--ddssee --ffttrreeee--ffrree --ffttrreeee--ssrraa
           --ffttrreeee--tteerr --ffuunniitt--aatt--aa--ttiimmee

           --OO also turns on --ffoommiitt--ffrraammee--ppooiinntteerr on machines
           where doing so does not interfere with debugging.

       --OO22 Optimize even more.  GCC performs nearly all supported
           optimizations that do not involve a space-speed
           tradeoff.  The compiler does not perform loop
           unrolling or function inlining when you specify --OO22.
           As compared to --OO, this option increases both
           compilation time and the performance of the generated
           code.

           --OO22 turns on all optimization flags specified by --OO.
           It also turns on the following optimization flags:
           --fftthhrreeaadd--jjuummppss --ffaalliiggnn--ffuunnccttiioonnss  --ffaalliiggnn--jjuummppss
           --ffaalliiggnn--llooooppss  --ffaalliiggnn--llaabbeellss --ffccaalllleerr--ssaavveess
           --ffccrroossssjjuummppiinngg --ffccssee--ffoollllooww--jjuummppss  --ffccssee--sskkiipp--bblloocckkss
           --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
           --ffggccssee  --ffggccssee--llmm --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --ffppeeeepphhoollee22
           --ffrreeggmmoovvee --ffrreeoorrddeerr--bblloocckkss  --ffrreeoorrddeerr--ffuunnccttiioonnss
           --ffrreerruunn--ccssee--aafftteerr--lloooopp --ffsscchheedd--iinntteerrbblloocckk
           --ffsscchheedd--ssppeecc --ffsscchheedduullee--iinnssnnss  --ffsscchheedduullee--iinnssnnss22
           --ffssttrriicctt--aalliiaassiinngg --ffssttrriicctt--oovveerrffllooww --ffttrreeee--pprree
           --ffttrreeee--vvrrpp

           Please note the warning under --ffggccssee about invoking
           --OO22 on programs that use computed gotos.

       --OO33 Optimize yet more.  --OO33 turns on all optimizations
           specified by --OO22 and also turns on the
           --ffiinnlliinnee--ffuunnccttiioonnss, --ffuunnsswwiittcchh--llooooppss,
           --ffpprreeddiiccttiivvee--ccoommmmoonniinngg, --ffggccssee--aafftteerr--rreellooaadd and
           --ffttrreeee--vveeccttoorriizzee options.

       --OO00 Reduce compilation time and make debugging produce the
           expected results.  This is the default.

       --OOss Optimize for size.  --OOss enables all --OO22 optimizations
           that do not typically increase code size.  It also
           performs further optimizations designed to reduce code
           size.

           --OOss disables the following optimization flags:
           --ffaalliiggnn--ffuunnccttiioonnss  --ffaalliiggnn--jjuummppss  --ffaalliiggnn--llooooppss
           --ffaalliiggnn--llaabbeellss  --ffrreeoorrddeerr--bblloocckkss
           --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn --ffpprreeffeettcchh--lloooopp--aarrrraayyss
           --ffttrreeee--vveecctt--lloooopp--vveerrssiioonn

           If you use multiple --OO options, with or without level
           numbers, the last such option is the one that is
           effective.




gcc-4.3.2                   2008-08-27                         87





GCC(1)                         GNU                         GCC(1)


       Options of the form --ff_f_l_a_g specify machine-independent
       flags.  Most flags have both positive and negative forms;
       the negative form of --ffffoooo would be --ffnnoo--ffoooo.  In the
       table below, only one of the forms is listed---the one you
       typically will use.  You can figure out the other form by
       either removing nnoo-- or adding it.

       The following options control specific optimizations.
       They are either activated by --OO options or are related to
       ones that are.  You can use the following flags in the
       rare cases when "fine-tuning" of optimizations to be
       performed is desired.

       --ffnnoo--ddeeffaauulltt--iinnlliinnee
           Do not make member functions inline by default merely
           because they are defined inside the class scope (C++
           only).  Otherwise, when you specify --OO, member
           functions defined inside class scope are compiled
           inline by default; i.e., you don't need to add iinnlliinnee
           in front of the member function name.

       --ffnnoo--ddeeffeerr--ppoopp
           Always pop the arguments to each function call as soon
           as that function returns.  For machines which must pop
           arguments after a function call, the compiler normally
           lets arguments accumulate on the stack for several
           function calls and pops them all at once.

           Disabled at levels --OO, --OO22, --OO33, --OOss.

       --ffffoorrwwaarrdd--pprrooppaaggaattee
           Perform a forward propagation pass on RTL.  The pass
           tries to combine two instructions and checks if the
           result can be simplified.  If loop unrolling is
           active, two passes are performed and the second is
           scheduled after loop unrolling.

           This option is enabled by default at optimization
           levels --OO22, --OO33, --OOss.

       --ffoommiitt--ffrraammee--ppooiinntteerr
           Don't keep the frame pointer in a register for
           functions that don't need one.  This avoids the
           instructions to save, set up and restore frame
           pointers; it also makes an extra register available in
           many functions.  IItt aallssoo mmaakkeess ddeebbuuggggiinngg iimmppoossssiibbllee oonn
           ssoommee mmaacchhiinneess..

           On some machines, such as the VAX, this flag has no
           effect, because the standard calling sequence
           automatically handles the frame pointer and nothing is
           saved by pretending it doesn't exist.  The machine-
           description macro "FRAME_POINTER_REQUIRED" controls
           whether a target machine supports this flag.



gcc-4.3.2                   2008-08-27                         88





GCC(1)                         GNU                         GCC(1)


           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss
           Optimize sibling and tail recursive calls.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--iinnlliinnee
           Don't pay attention to the "inline" keyword.  Normally
           this option is used to keep the compiler from
           expanding any functions inline.  Note that if you are
           not optimizing, no functions can be expanded inline.

       --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss
           Integrate functions into their callers when their body
           is smaller than expected function call code (so
           overall size of program gets smaller).  The compiler
           heuristically decides which functions are simple
           enough to be worth integrating in this way.

           Enabled at level --OO22.

       --ffiinnlliinnee--ffuunnccttiioonnss
           Integrate all simple functions into their callers.
           The compiler heuristically decides which functions are
           simple enough to be worth integrating in this way.

           If all calls to a given function are integrated, and
           the function is declared "static", then the function
           is normally not output as assembler code in its own
           right.

           Enabled at level --OO33.

       --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee
           Consider all "static" functions called once for
           inlining into their caller even if they are not marked
           "inline".  If a call to a given function is
           integrated, then the function is not output as
           assembler code in its own right.

           Enabled if --ffuunniitt--aatt--aa--ttiimmee is enabled.

       --ffeeaarrllyy--iinnlliinniinngg
           Inline functions marked by "always_inline" and
           functions whose body seems smaller than the function
           call overhead early before doing --ffpprrooffiillee--ggeenneerraattee
           instrumentation and real inlining pass.  Doing so
           makes profiling significantly cheaper and usually
           inlining faster on programs having large chains of
           nested wrapper functions.

           Enabled by default.




gcc-4.3.2                   2008-08-27                         89





GCC(1)                         GNU                         GCC(1)


       --ffiinnlliinnee--lliimmiitt==_n
           By default, GCC limits the size of functions that can
           be inlined.  This flag allows coarse control of this
           limit.  _n is the size of functions that can be inlined
           in number of pseudo instructions.

           Inlining is actually controlled by a number of
           parameters, which may be specified individually by
           using ----ppaarraamm _n_a_m_e==_v_a_l_u_e.  The --ffiinnlliinnee--lliimmiitt==_n option
           sets some of these parameters as follows:

           mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
                is set to I<n>/2.

           mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
                is set to I<n>/2.

           See below for a documentation of the individual
           parameters controlling inlining and for the defaults
           of these parameters.

           _N_o_t_e_: there may be no value to --ffiinnlliinnee--lliimmiitt that
           results in default behavior.

           _N_o_t_e_: pseudo instruction represents, in this
           particular context, an abstract measurement of
           function's size.  In no way does it represent a count
           of assembly instructions and as such its exact meaning
           might change from one release to an another.

       --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss
           In C, emit "static" functions that are declared
           "inline" into the object file, even if the function
           has been inlined into all of its callers.  This switch
           does not affect functions using the "extern inline"
           extension in GNU C89.  In C++, emit any and all inline
           functions into the object file.

       --ffkkeeeepp--ssttaattiicc--ccoonnssttss
           Emit variables declared "static const" when
           optimization isn't turned on, even if the variables
           aren't referenced.

           GCC enables this option by default.  If you want to
           force the compiler to check if the variable was
           referenced, regardless of whether or not optimization
           is turned on, use the --ffnnoo--kkeeeepp--ssttaattiicc--ccoonnssttss option.

       --ffmmeerrggee--ccoonnssttaannttss
           Attempt to merge identical constants (string constants
           and floating point constants) across compilation
           units.

           This option is the default for optimized compilation



gcc-4.3.2                   2008-08-27                         90





GCC(1)                         GNU                         GCC(1)


           if the assembler and linker support it.  Use
           --ffnnoo--mmeerrggee--ccoonnssttaannttss to inhibit this behavior.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffmmeerrggee--aallll--ccoonnssttaannttss
           Attempt to merge identical constants and identical
           variables.

           This option implies --ffmmeerrggee--ccoonnssttaannttss.  In addition to
           --ffmmeerrggee--ccoonnssttaannttss this considers e.g. even constant
           initialized arrays or initialized constant variables
           with integral or floating point types.  Languages like
           C or C++ require each non-automatic variable to have
           distinct location, so using this option will result in
           non-conforming behavior.

       --ffmmoodduulloo--sscchheedd
           Perform swing modulo scheduling immediately before the
           first scheduling pass.  This pass looks at innermost
           loops and reorders their instructions by overlapping
           different iterations.

       --ffmmoodduulloo--sscchheedd--aallllooww--rreeggmmoovveess
           Perform more aggressive SMS based modulo scheduling
           with register moves allowed.  By setting this flag
           certain anti-dependences edges will be deleted which
           will trigger the generation of reg-moves based on the
           life-range analysis.  This option is effective only
           with --ffmmoodduulloo--sscchheedd enabled.

       --ffnnoo--bbrraanncchh--ccoouunntt--rreegg
           Do not use "decrement and branch" instructions on a
           count register, but instead generate a sequence of
           instructions that decrement a register, compare it
           against zero, then branch based upon the result.  This
           option is only meaningful on architectures that
           support such instructions, which include x86, PowerPC,
           IA-64 and S/390.

           The default is --ffbbrraanncchh--ccoouunntt--rreegg.

       --ffnnoo--ffuunnccttiioonn--ccssee
           Do not put function addresses in registers; make each
           instruction that calls a constant function contain the
           function's address explicitly.

           This option results in less efficient code, but some
           strange hacks that alter the assembler output may be
           confused by the optimizations performed when this
           option is not used.

           The default is --ffffuunnccttiioonn--ccssee




gcc-4.3.2                   2008-08-27                         91





GCC(1)                         GNU                         GCC(1)


       --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss
           If the target supports a BSS section, GCC by default
           puts variables that are initialized to zero into BSS.
           This can save space in the resulting code.

           This option turns off this behavior because some
           programs explicitly rely on variables going to the
           data section.  E.g., so that the resulting executable
           can find the beginning of that section and/or make
           assumptions based on that.

           The default is --ffzzeerroo--iinniittiiaalliizzeedd--iinn--bbssss.

       --ffmmuuddffllaapp --ffmmuuddffllaapptthh --ffmmuuddffllaappiirr
           For front-ends that support it (C and C++), instrument
           all risky pointer/array dereferencing operations, some
           standard library string/heap functions, and some other
           associated constructs with range/validity tests.
           Modules so instrumented should be immune to buffer
           overflows, invalid heap use, and some other classes of
           C/C++ programming errors.  The instrumentation relies
           on a separate runtime library (_l_i_b_m_u_d_f_l_a_p), which will
           be linked into a program if --ffmmuuddffllaapp is given at link
           time.  Run-time behavior of the instrumented program
           is controlled by the MMUUDDFFLLAAPP__OOPPTTIIOONNSS environment
           variable.  See "env MUDFLAP_OPTIONS=-help a.out" for
           its options.

           Use --ffmmuuddffllaapptthh instead of --ffmmuuddffllaapp to compile and to
           link if your program is multi-threaded.  Use
           --ffmmuuddffllaappiirr, in addition to --ffmmuuddffllaapp or --ffmmuuddffllaapptthh,
           if instrumentation should ignore pointer reads.  This
           produces less instrumentation (and therefore faster
           execution) and still provides some protection against
           outright memory corrupting writes, but allows
           erroneously read data to propagate within a program.

       --fftthhrreeaadd--jjuummppss
           Perform optimizations where we check to see if a jump
           branches to a location where another comparison
           subsumed by the first is found.  If so, the first
           branch is redirected to either the destination of the
           second branch or a point immediately following it,
           depending on whether the condition is known to be true
           or false.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffsspplliitt--wwiiddee--ttyyppeess
           When using a type that occupies multiple registers,
           such as "long long" on a 32-bit system, split the
           registers apart and allocate them independently.  This
           normally generates better code for those types, but
           may make debugging more difficult.



gcc-4.3.2                   2008-08-27                         92





GCC(1)                         GNU                         GCC(1)


           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccssee--ffoollllooww--jjuummppss
           In common subexpression elimination (CSE), scan
           through jump instructions when the target of the jump
           is not reached by any other path.  For example, when
           CSE encounters an "if" statement with an "else"
           clause, CSE will follow the jump when the condition
           tested is false.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffccssee--sskkiipp--bblloocckkss
           This is similar to --ffccssee--ffoollllooww--jjuummppss, but causes CSE
           to follow jumps which conditionally skip over blocks.
           When CSE encounters a simple "if" statement with no
           else clause, --ffccssee--sskkiipp--bblloocckkss causes CSE to follow
           the jump around the body of the "if".

           Enabled at levels --OO22, --OO33, --OOss.

       --ffrreerruunn--ccssee--aafftteerr--lloooopp
           Re-run common subexpression elimination after loop
           optimizations has been performed.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee
           Perform a global common subexpression elimination
           pass.  This pass also performs global constant and
           copy propagation.

           _N_o_t_e_: When compiling a program using computed gotos, a
           GCC extension, you may get better runtime performance
           if you disable the global common subexpression
           elimination pass by adding --ffnnoo--ggccssee to the command
           line.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee--llmm
           When --ffggccssee--llmm is enabled, global common subexpression
           elimination will attempt to move loads which are only
           killed by stores into themselves.  This allows a loop
           containing a load/store sequence to be changed to a
           load outside the loop, and a copy/store within the
           loop.

           Enabled by default when gcse is enabled.

       --ffggccssee--ssmm
           When --ffggccssee--ssmm is enabled, a store motion pass is run
           after global common subexpression elimination.  This
           pass will attempt to move stores out of loops.  When



gcc-4.3.2                   2008-08-27                         93





GCC(1)                         GNU                         GCC(1)


           used in conjunction with --ffggccssee--llmm, loops containing a
           load/store sequence can be changed to a load before
           the loop and a store after the loop.

           Not enabled at any optimization level.

       --ffggccssee--llaass
           When --ffggccssee--llaass is enabled, the global common
           subexpression elimination pass eliminates redundant
           loads that come after stores to the same memory
           location (both partial and full redundancies).

           Not enabled at any optimization level.

       --ffggccssee--aafftteerr--rreellooaadd
           When --ffggccssee--aafftteerr--rreellooaadd is enabled, a redundant load
           elimination pass is performed after reload.  The
           purpose of this pass is to cleanup redundant spilling.

       --ffuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss
           If given, the loop optimizer will assume that loop
           indices do not overflow, and that the loops with
           nontrivial exit condition are not infinite.  This
           enables a wider range of loop optimizations even if
           the loop optimizer itself cannot prove that these
           assumptions are valid.  Using
           --WWuunnssaaffee--lloooopp--ooppttiimmiizzaattiioonnss, the compiler will warn
           you if it finds this kind of loop.

       --ffccrroossssjjuummppiinngg
           Perform cross-jumping transformation.  This
           transformation unifies equivalent code and save code
           size.  The resulting code may or may not perform
           better than without cross-jumping.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffaauuttoo--iinncc--ddeecc
           Combine increments or decrements of addresses with
           memory accesses.  This pass is always skipped on
           architectures that do not have instructions to support
           this.  Enabled by default at --OO and higher on
           architectures that support this.

       --ffddccee
           Perform dead code elimination (DCE) on RTL.  Enabled
           by default at --OO and higher.

       --ffddssee
           Perform dead store elimination (DSE) on RTL.  Enabled
           by default at --OO and higher.

       --ffiiff--ccoonnvveerrssiioonn
           Attempt to transform conditional jumps into branch-



gcc-4.3.2                   2008-08-27                         94





GCC(1)                         GNU                         GCC(1)


           less equivalents.  This include use of conditional
           moves, min, max, set flags and abs instructions, and
           some tricks doable by standard arithmetics.  The use
           of conditional execution on chips where it is
           available is controlled by "if-conversion2".

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffiiff--ccoonnvveerrssiioonn22
           Use conditional execution (where available) to
           transform conditional jumps into branch-less
           equivalents.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss
           Use global dataflow analysis to identify and eliminate
           useless checks for null pointers.  The compiler
           assumes that dereferencing a null pointer would have
           halted the program.  If a pointer is checked after it
           has already been dereferenced, it cannot be null.

           In some environments, this assumption is not true, and
           programs can safely dereference null pointers.  Use
           --ffnnoo--ddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss to disable this
           optimization for programs which depend on that
           behavior.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
           Perform a number of minor optimizations that are
           relatively expensive.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee
       --ffrreeggmmoovvee
           Attempt to reassign register numbers in move
           instructions and as operands of other simple
           instructions in order to maximize the amount of
           register tying.  This is especially helpful on
           machines with two-operand instructions.

           Note --ffrreeggmmoovvee and --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee are the
           same optimization.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffddeellaayyeedd--bbrraanncchh
           If supported for the target machine, attempt to
           reorder instructions to exploit instruction slots
           available after delayed branch instructions.




gcc-4.3.2                   2008-08-27                         95





GCC(1)                         GNU                         GCC(1)


           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffsscchheedduullee--iinnssnnss
           If supported for the target machine, attempt to
           reorder instructions to eliminate execution stalls due
           to required data being unavailable.  This helps
           machines that have slow floating point or memory load
           instructions by allowing other instructions to be
           issued until the result of the load or floating point
           instruction is required.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffsscchheedduullee--iinnssnnss22
           Similar to --ffsscchheedduullee--iinnssnnss, but requests an
           additional pass of instruction scheduling after
           register allocation has been done.  This is especially
           useful on machines with a relatively small number of
           registers and where memory load instructions take more
           than one cycle.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--sscchheedd--iinntteerrbblloocckk
           Don't schedule instructions across basic blocks.  This
           is normally enabled by default when scheduling before
           register allocation, i.e.  with --ffsscchheedduullee--iinnssnnss or at
           --OO22 or higher.

       --ffnnoo--sscchheedd--ssppeecc
           Don't allow speculative motion of non-load
           instructions.  This is normally enabled by default
           when scheduling before register allocation, i.e.  with
           --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--ssppeecc--llooaadd
           Allow speculative motion of some load instructions.
           This only makes sense when scheduling before register
           allocation, i.e. with --ffsscchheedduullee--iinnssnnss or at --OO22 or
           higher.

       --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss
           Allow speculative motion of more load instructions.
           This only makes sense when scheduling before register
           allocation, i.e. with --ffsscchheedduullee--iinnssnnss or at --OO22 or
           higher.

       --ffsscchheedd--ssttaalllleedd--iinnssnnss
       --ffsscchheedd--ssttaalllleedd--iinnssnnss==_n
           Define how many insns (if any) can be moved
           prematurely from the queue of stalled insns into the
           ready list, during the second scheduling pass.
           --ffnnoo--sscchheedd--ssttaalllleedd--iinnssnnss means that no insns will be
           moved prematurely, --ffsscchheedd--ssttaalllleedd--iinnssnnss==00 means there



gcc-4.3.2                   2008-08-27                         96





GCC(1)                         GNU                         GCC(1)


           is no limit on how many queued insns can be moved
           prematurely.  --ffsscchheedd--ssttaalllleedd--iinnssnnss without a value is
           equivalent to --ffsscchheedd--ssttaalllleedd--iinnssnnss==11.

       --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp
       --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==_n
           Define how many insn groups (cycles) will be examined
           for a dependency on a stalled insn that is candidate
           for premature removal from the queue of stalled insns.
           This has an effect only during the second scheduling
           pass, and only if --ffsscchheedd--ssttaalllleedd--iinnssnnss is used.
           --ffnnoo--sscchheedd--ssttaalllleedd--iinnssnnss--ddeepp is equivalent to
           --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==00.
           --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp without a value is
           equivalent to --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==11.

       --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss
           When scheduling after register allocation, do use
           superblock scheduling algorithm.  Superblock
           scheduling allows motion across basic block boundaries
           resulting on faster schedules.  This option is
           experimental, as not all machine descriptions used by
           GCC model the CPU closely enough to avoid unreliable
           results from the algorithm.

           This only makes sense when scheduling after register
           allocation, i.e. with --ffsscchheedduullee--iinnssnnss22 or at --OO22 or
           higher.

       --ffsscchheedd22--uussee--ttrraacceess
           Use --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss algorithm when scheduling
           after register allocation and additionally perform
           code duplication in order to increase the size of
           superblocks using tracer pass.  See --ffttrraacceerr for
           details on trace formation.

           This mode should produce faster but significantly
           longer programs.  Also without --ffbbrraanncchh--pprroobbaabbiilliittiieess
           the traces constructed may not match the reality and
           hurt the performance.  This only makes sense when
           scheduling after register allocation, i.e. with
           --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsseeee
           Eliminate redundant sign extension instructions and
           move the non-redundant ones to optimal placement using
           lazy code motion (LCM).

       --ffrreesscchheedduullee--mmoodduulloo--sscchheedduulleedd--llooooppss
           The modulo scheduling comes before the traditional
           scheduling, if a loop was modulo scheduled we may want
           to prevent the later scheduling passes from changing
           its schedule, we use this option to control that.




gcc-4.3.2                   2008-08-27                         97





GCC(1)                         GNU                         GCC(1)


       --ffccaalllleerr--ssaavveess
           Enable values to be allocated in registers that will
           be clobbered by function calls, by emitting extra
           instructions to save and restore the registers around
           such calls.  Such allocation is done only when it
           seems to result in better code than would otherwise be
           produced.

           This option is always enabled by default on certain
           machines, usually those which have no call-preserved
           registers to use instead.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffttrreeee--rreeaassssoocc
           Perform reassociation on trees.  This flag is enabled
           by default at --OO and higher.

       --ffttrreeee--pprree
           Perform partial redundancy elimination (PRE) on trees.
           This flag is enabled by default at --OO22 and --OO33.

       --ffttrreeee--ffrree
           Perform full redundancy elimination (FRE) on trees.
           The difference between FRE and PRE is that FRE only
           considers expressions that are computed on all paths
           leading to the redundant computation.  This analysis
           is faster than PRE, though it exposes fewer
           redundancies.  This flag is enabled by default at --OO
           and higher.

       --ffttrreeee--ccooppyy--pprroopp
           Perform copy propagation on trees.  This pass
           eliminates unnecessary copy operations.  This flag is
           enabled by default at --OO and higher.

       --ffttrreeee--ssaalliiaass
           Perform structural alias analysis on trees.  This flag
           is enabled by default at --OO and higher.

       --ffiippaa--ppuurree--ccoonnsstt
           Discover which functions are pure or constant.
           Enabled by default at --OO and higher.

       --ffiippaa--rreeffeerreennccee
           Discover which static variables do not escape cannot
           escape the compilation unit.  Enabled by default at --OO
           and higher.

       --ffiippaa--ssttrruucctt--rreeoorrgg
           Perform structure reorganization optimization, that
           change C-like structures layout in order to better
           utilize spatial locality.  This transformation is
           affective for programs containing arrays of



gcc-4.3.2                   2008-08-27                         98





GCC(1)                         GNU                         GCC(1)


           structures.  Available in two compilation modes:
           profile-based (enabled with --ffpprrooffiillee--ggeenneerraattee) or
           static (which uses built-in heuristics).  Require
           --ffiippaa--ttyyppee--eessccaappee to provide the safety of this
           transformation.  It works only in whole program mode,
           so it requires --ffwwhhoollee--pprrooggrraamm and --ccoommbbiinnee to be
           enabled.  Structures considered ccoolldd by this
           transformation are not affected (see ----ppaarraamm
           ssttrruucctt--rreeoorrgg--ccoolldd--ssttrruucctt--rraattiioo==_v_a_l_u_e).

           With this flag, the program debug info reflects a new
           structure layout.

       --ffiippaa--ppttaa
           Perform interprocedural pointer analysis.

       --ffiippaa--ccpp
           Perform interprocedural constant propagation.  This
           optimization analyzes the program to determine when
           values passed to functions are constants and then
           optimizes accordingly.  This optimization can
           substantially increase performance if the application
           has constants passed to functions, but because this
           optimization can create multiple copies of functions,
           it may significantly increase code size.

       --ffiippaa--mmaattrriixx--rreeoorrgg
           Perform matrix flattening and transposing.  Matrix
           flattening tries to replace a m-dimensional matrix
           with its equivalent n-dimensional matrix, where n < m.
           This reduces the level of indirection needed for
           accessing the elements of the matrix. The second
           optimization is matrix transposing that attemps to
           change the order of the matrix's dimensions in order
           to improve cache locality.  Both optimizations need
           fwhole-program flag.  Transposing is enabled only if
           profiling information is avaliable.

       --ffttrreeee--ssiinnkk
           Perform forward store motion  on trees.  This flag is
           enabled by default at --OO and higher.

       --ffttrreeee--ccccpp
           Perform sparse conditional constant propagation (CCP)
           on trees.  This pass only operates on local scalar
           variables and is enabled by default at --OO and higher.

       --ffttrreeee--ssttoorree--ccccpp
           Perform sparse conditional constant propagation (CCP)
           on trees.  This pass operates on both local scalar
           variables and memory stores and loads (global
           variables, structures, arrays, etc).  This flag is
           enabled by default at --OO22 and higher.




gcc-4.3.2                   2008-08-27                         99





GCC(1)                         GNU                         GCC(1)


       --ffttrreeee--ddccee
           Perform dead code elimination (DCE) on trees.  This
           flag is enabled by default at --OO and higher.

       --ffttrreeee--ddoommiinnaattoorr--ooppttss
           Perform a variety of simple scalar cleanups
           (constant/copy propagation, redundancy elimination,
           range propagation and expression simplification) based
           on a dominator tree traversal.  This also performs
           jump threading (to reduce jumps to jumps). This flag
           is enabled by default at --OO and higher.

       --ffttrreeee--ddssee
           Perform dead store elimination (DSE) on trees.  A dead
           store is a store into a memory location which will
           later be overwritten by another store without any
           intervening loads.  In this case the earlier store can
           be deleted.  This flag is enabled by default at --OO and
           higher.

       --ffttrreeee--cchh
           Perform loop header copying on trees.  This is
           beneficial since it increases effectiveness of code
           motion optimizations.  It also saves one jump.  This
           flag is enabled by default at --OO and higher.  It is
           not enabled for --OOss, since it usually increases code
           size.

       --ffttrreeee--lloooopp--ooppttiimmiizzee
           Perform loop optimizations on trees.  This flag is
           enabled by default at --OO and higher.

       --ffttrreeee--lloooopp--lliinneeaarr
           Perform linear loop transformations on tree.  This
           flag can improve cache performance and allow further
           loop optimizations to take place.

       --ffcchheecckk--ddaattaa--ddeeppss
           Compare the results of several data dependence
           analyzers.  This option is used for debugging the data
           dependence analyzers.

       --ffttrreeee--lloooopp--iimm
           Perform loop invariant motion on trees.  This pass
           moves only invariants that would be hard to handle at
           RTL level (function calls, operations that expand to
           nontrivial sequences of insns).  With --ffuunnsswwiittcchh--llooooppss
           it also moves operands of conditions that are
           invariant out of the loop, so that we can use just
           trivial invariantness analysis in loop unswitching.
           The pass also includes store motion.

       --ffttrreeee--lloooopp--iivvccaannoonn
           Create a canonical counter for number of iterations in



gcc-4.3.2                   2008-08-27                        100





GCC(1)                         GNU                         GCC(1)


           the loop for that determining number of iterations
           requires complicated analysis.  Later optimizations
           then may determine the number easily.  Useful
           especially in connection with unrolling.

       --ffiivvooppttss
           Perform induction variable optimizations (strength
           reduction, induction variable merging and induction
           variable elimination) on trees.

       --ffttrreeee--ppaarraalllleelliizzee--llooooppss==nn
           Parallelize loops, i.e., split their iteration space
           to run in n threads.  This is only possible for loops
           whose iterations are independent and can be
           arbitrarily reordered.  The optimization is only
           profitable on multiprocessor machines, for loops that
           are CPU-intensive, rather than constrained e.g. by
           memory bandwidth.  This option implies --pptthhrreeaadd, and
           thus is only supported on targets that have support
           for --pptthhrreeaadd.

       --ffttrreeee--ssrraa
           Perform scalar replacement of aggregates.  This pass
           replaces structure references with scalars to prevent
           committing structures to memory too early.  This flag
           is enabled by default at --OO and higher.

       --ffttrreeee--ccooppyyrreennaammee
           Perform copy renaming on trees.  This pass attempts to
           rename compiler temporaries to other variables at copy
           locations, usually resulting in variable names which
           more closely resemble the original variables.  This
           flag is enabled by default at --OO and higher.

       --ffttrreeee--tteerr
           Perform temporary expression replacement during the
           SSA->normal phase.  Single use/single def temporaries
           are replaced at their use location with their defining
           expression.  This results in non-GIMPLE code, but
           gives the expanders much more complex trees to work on
           resulting in better RTL generation.  This is enabled
           by default at --OO and higher.

       --ffttrreeee--vveeccttoorriizzee
           Perform loop vectorization on trees. This flag is
           enabled by default at --OO33.

       --ffttrreeee--vveecctt--lloooopp--vveerrssiioonn
           Perform loop versioning when doing loop vectorization
           on trees.  When a loop appears to be vectorizable
           except that data alignment or data dependence cannot
           be determined at compile time then vectorized and non-
           vectorized versions of the loop are generated along
           with runtime checks for alignment or dependence to



gcc-4.3.2                   2008-08-27                        101





GCC(1)                         GNU                         GCC(1)


           control which version is executed.  This option is
           enabled by default except at level --OOss where it is
           disabled.

       --ffvveecctt--ccoosstt--mmooddeell
           Enable cost model for vectorization.

       --ffttrreeee--vvrrpp
           Perform Value Range Propagation on trees.  This is
           similar to the constant propagation pass, but instead
           of values, ranges of values are propagated.  This
           allows the optimizers to remove unnecessary range
           checks like array bound checks and null pointer
           checks.  This is enabled by default at --OO22 and higher.
           Null pointer check elimination is only done if
           --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss is enabled.

       --ffttrraacceerr
           Perform tail duplication to enlarge superblock size.
           This transformation simplifies the control flow of the
           function allowing other optimizations to do better
           job.

       --ffuunnrroollll--llooooppss
           Unroll loops whose number of iterations can be
           determined at compile time or upon entry to the loop.
           --ffuunnrroollll--llooooppss implies --ffrreerruunn--ccssee--aafftteerr--lloooopp.  This
           option makes code larger, and may or may not make it
           run faster.

       --ffuunnrroollll--aallll--llooooppss
           Unroll all loops, even if their number of iterations
           is uncertain when the loop is entered.  This usually
           makes programs run more slowly.  --ffuunnrroollll--aallll--llooooppss
           implies the same options as --ffuunnrroollll--llooooppss,

       --ffsspplliitt--iivvss--iinn--uunnrroolllleerr
           Enables expressing of values of induction variables in
           later iterations of the unrolled loop using the value
           in the first iteration.  This breaks long dependency
           chains, thus improving efficiency of the scheduling
           passes.

           Combination of --ffwweebb and CSE is often sufficient to
           obtain the same effect.  However in cases the loop
           body is more complicated than a single basic block,
           this is not reliable.  It also does not work at all on
           some of the architectures due to restrictions in the
           CSE pass.

           This optimization is enabled by default.

       --ffvvaarriiaabbllee--eexxppaannssiioonn--iinn--uunnrroolllleerr
           With this option, the compiler will create multiple



gcc-4.3.2                   2008-08-27                        102





GCC(1)                         GNU                         GCC(1)


           copies of some local variables when unrolling a loop
           which can result in superior code.

       --ffpprreeddiiccttiivvee--ccoommmmoonniinngg
           Perform predictive commoning optimization, i.e.,
           reusing computations (especially memory loads and
           stores) performed in previous iterations of loops.

           This option is enabled at level --OO33.

       --ffpprreeffeettcchh--lloooopp--aarrrraayyss
           If supported by the target machine, generate
           instructions to prefetch memory to improve the
           performance of loops that access large arrays.

           This option may generate better or worse code; results
           are highly dependent on the structure of loops within
           the source code.

           Disabled at level --OOss.

       --ffnnoo--ppeeeepphhoollee
       --ffnnoo--ppeeeepphhoollee22
           Disable any machine-specific peephole optimizations.
           The difference between --ffnnoo--ppeeeepphhoollee and
           --ffnnoo--ppeeeepphhoollee22 is in how they are implemented in the
           compiler; some targets use one, some use the other, a
           few use both.

           --ffppeeeepphhoollee is enabled by default.  --ffppeeeepphhoollee22 enabled
           at levels --OO22, --OO33, --OOss.

       --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy
           Do not guess branch probabilities using heuristics.

           GCC will use heuristics to guess branch probabilities
           if they are not provided by profiling feedback
           (--ffpprrooffiillee--aarrccss).  These heuristics are based on the
           control flow graph.  If some branch probabilities are
           specified by ____bbuuiillttiinn__eexxppeecctt, then the heuristics
           will be used to guess branch probabilities for the
           rest of the control flow graph, taking the
           ____bbuuiillttiinn__eexxppeecctt info into account.  The interactions
           between the heuristics and ____bbuuiillttiinn__eexxppeecctt can be
           complex, and in some cases, it may be useful to
           disable the heuristics so that the effects of
           ____bbuuiillttiinn__eexxppeecctt are easier to understand.

           The default is --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy at levels
           --OO, --OO22, --OO33, --OOss.

       --ffrreeoorrddeerr--bblloocckkss
           Reorder basic blocks in the compiled function in order
           to reduce number of taken branches and improve code



gcc-4.3.2                   2008-08-27                        103





GCC(1)                         GNU                         GCC(1)


           locality.

           Enabled at levels --OO22, --OO33.

       --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn
           In addition to reordering basic blocks in the compiled
           function, in order to reduce number of taken branches,
           partitions hot and cold basic blocks into separate
           sections of the assembly and .o files, to improve
           paging and cache locality performance.

           This optimization is automatically turned off in the
           presence of exception handling, for linkonce sections,
           for functions with a user-defined section attribute
           and on any architecture that does not support named
           sections.

       --ffrreeoorrddeerr--ffuunnccttiioonnss
           Reorder functions in the object file in order to
           improve code locality.  This is implemented by using
           special subsections ".text.hot" for most frequently
           executed functions and ".text.unlikely" for unlikely
           executed functions.  Reordering is done by the linker
           so object file format must support named sections and
           linker must place them in a reasonable way.

           Also profile feedback must be available in to make
           this option effective.  See --ffpprrooffiillee--aarrccss for
           details.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffssttrriicctt--aalliiaassiinngg
           Allows the compiler to assume the strictest aliasing
           rules applicable to the language being compiled.  For
           C (and C++), this activates optimizations based on the
           type of expressions.  In particular, an object of one
           type is assumed never to reside at the same address as
           an object of a different type, unless the types are
           almost the same.  For example, an "unsigned int" can
           alias an "int", but not a "void*" or a "double".  A
           character type may alias any other type.

           Pay special attention to code like this:

                   union a_union {
                     int i;
                     double d;
                   };








gcc-4.3.2                   2008-08-27                        104





GCC(1)                         GNU                         GCC(1)


                   int f() {
                     a_union t;
                     t.d = 3.0;
                     return t.i;
                   }

           The practice of reading from a different union member
           than the one most recently written to (called
           "type-punning") is common.  Even with
           --ffssttrriicctt--aalliiaassiinngg, type-punning is allowed, provided
           the memory is accessed through the union type.  So,
           the code above will work as expected.    However, this
           code might not:

                   int f() {
                     a_union t;
                     int* ip;
                     t.d = 3.0;
                     ip = &t.i;
                     return *ip;
                   }

           Similarly, access by taking the address, casting the
           resulting pointer and dereferencing the result has
           undefined behavior, even if the cast uses a union
           type, e.g.:

                   int f() {
                     double d = 3.0;
                     return ((union a_union *) &d)->i;
                   }

           The --ffssttrriicctt--aalliiaassiinngg option is enabled at levels --OO22,
           --OO33, --OOss.

       --ffssttrriicctt--oovveerrffllooww
           Allow the compiler to assume strict signed overflow
           rules, depending on the language being compiled.  For
           C (and C++) this means that overflow when doing
           arithmetic with signed numbers is undefined, which
           means that the compiler may assume that it will not
           happen.  This permits various optimizations.  For
           example, the compiler will assume that an expression
           like "i + 10 > i" will always be true for signed "i".
           This assumption is only valid if signed overflow is
           undefined, as the expression is false if "i + 10"
           overflows when using twos complement arithmetic.  When
           this option is in effect any attempt to determine
           whether an operation on signed numbers will overflow
           must be written carefully to not actually involve
           overflow.

           This option also allows the compiler to assume strict
           pointer semantics: given a pointer to an object, if



gcc-4.3.2                   2008-08-27                        105





GCC(1)                         GNU                         GCC(1)


           adding an offset to that pointer does not produce a
           pointer to the same object, the addition is undefined.
           This permits the compiler to conclude that "p + u > p"
           is always true for a pointer "p" and unsigned integer
           "u".  This assumption is only valid because pointer
           wraparound is undefined, as the expression is false if
           "p + u" overflows using twos complement arithmetic.

           See also the --ffwwrraappvv option.  Using --ffwwrraappvv means that
           integer signed overflow is fully defined: it wraps.
           When --ffwwrraappvv is used, there is no difference between
           --ffssttrriicctt--oovveerrffllooww and --ffnnoo--ssttrriicctt--oovveerrffllooww for
           integers.  With --ffwwrraappvv certain types of overflow are
           permitted.  For example, if the compiler gets an
           overflow when doing arithmetic on constants, the
           overflowed value can still be used with --ffwwrraappvv, but
           not otherwise.

           The --ffssttrriicctt--oovveerrffllooww option is enabled at levels --OO22,
           --OO33, --OOss.

       --ffaalliiggnn--ffuunnccttiioonnss
       --ffaalliiggnn--ffuunnccttiioonnss==_n
           Align the start of functions to the next power-of-two
           greater than _n, skipping up to _n bytes.  For instance,
           --ffaalliiggnn--ffuunnccttiioonnss==3322 aligns functions to the next
           32-byte boundary, but --ffaalliiggnn--ffuunnccttiioonnss==2244 would align
           to the next 32-byte boundary only if this can be done
           by skipping 23 bytes or less.

           --ffnnoo--aalliiggnn--ffuunnccttiioonnss and --ffaalliiggnn--ffuunnccttiioonnss==11 are
           equivalent and mean that functions will not be
           aligned.

           Some assemblers only support this flag when _n is a
           power of two; in that case, it is rounded up.

           If _n is not specified or is zero, use a machine-
           dependent default.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llaabbeellss
       --ffaalliiggnn--llaabbeellss==_n
           Align all branch targets to a power-of-two boundary,
           skipping up to _n bytes like --ffaalliiggnn--ffuunnccttiioonnss.  This
           option can easily make code slower, because it must
           insert dummy operations for when the branch target is
           reached in the usual flow of the code.

           --ffnnoo--aalliiggnn--llaabbeellss and --ffaalliiggnn--llaabbeellss==11 are equivalent
           and mean that labels will not be aligned.

           If --ffaalliiggnn--llooooppss or --ffaalliiggnn--jjuummppss are applicable and



gcc-4.3.2                   2008-08-27                        106





GCC(1)                         GNU                         GCC(1)


           are greater than this value, then their values are
           used instead.

           If _n is not specified or is zero, use a machine-
           dependent default which is very likely to be 11,
           meaning no alignment.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llooooppss
       --ffaalliiggnn--llooooppss==_n
           Align loops to a power-of-two boundary, skipping up to
           _n bytes like --ffaalliiggnn--ffuunnccttiioonnss.  The hope is that the
           loop will be executed many times, which will make up
           for any execution of the dummy operations.

           --ffnnoo--aalliiggnn--llooooppss and --ffaalliiggnn--llooooppss==11 are equivalent
           and mean that loops will not be aligned.

           If _n is not specified or is zero, use a machine-
           dependent default.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--jjuummppss
       --ffaalliiggnn--jjuummppss==_n
           Align branch targets to a power-of-two boundary, for
           branch targets where the targets can only be reached
           by jumping, skipping up to _n bytes like
           --ffaalliiggnn--ffuunnccttiioonnss.  In this case, no dummy operations
           need be executed.

           --ffnnoo--aalliiggnn--jjuummppss and --ffaalliiggnn--jjuummppss==11 are equivalent
           and mean that loops will not be aligned.

           If _n is not specified or is zero, use a machine-
           dependent default.

           Enabled at levels --OO22, --OO33.

       --ffuunniitt--aatt--aa--ttiimmee
           Parse the whole compilation unit before starting to
           produce code.  This allows some extra optimizations to
           take place but consumes more memory (in general).
           There are some compatibility issues with _u_n_i_t_-_a_t_-_a_-
           _t_i_m_e mode:

           *   enabling _u_n_i_t_-_a_t_-_a_-_t_i_m_e mode may change the order
               in which functions, variables, and top-level "asm"
               statements are emitted, and will likely break code
               relying on some particular ordering.  The majority
               of such top-level "asm" statements, though, can be
               replaced by "section" attributes.  The ffnnoo--
               ttoopplleevveell--rreeoorrddeerr option may be used to keep the



gcc-4.3.2                   2008-08-27                        107





GCC(1)                         GNU                         GCC(1)


               ordering used in the input file, at the cost of
               some optimizations.

           *   _u_n_i_t_-_a_t_-_a_-_t_i_m_e mode removes unreferenced static
               variables and functions.  This may result in
               undefined references when an "asm" statement
               refers directly to variables or functions that are
               otherwise unused.  In that case either the
               variable/function shall be listed as an operand of
               the "asm" statement operand or, in the case of
               top-level "asm" statements the attribute "used"
               shall be used on the declaration.

           *   Static functions now can use non-standard passing
               conventions that may break "asm" statements
               calling functions directly.  Again, attribute
               "used" will prevent this behavior.

           As a temporary workaround, --ffnnoo--uunniitt--aatt--aa--ttiimmee can be
           used, but this scheme may not be supported by future
           releases of GCC.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffnnoo--ttoopplleevveell--rreeoorrddeerr
           Do not reorder top-level functions, variables, and
           "asm" statements.  Output them in the same order that
           they appear in the input file.  When this option is
           used, unreferenced static variables will not be
           removed.  This option is intended to support existing
           code which relies on a particular ordering.  For new
           code, it is better to use attributes.

       --ffwweebb
           Constructs webs as commonly used for register
           allocation purposes and assign each web individual
           pseudo register.  This allows the register allocation
           pass to operate on pseudos directly, but also
           strengthens several other optimization passes, such as
           CSE, loop optimizer and trivial dead code remover.  It
           can, however, make debugging impossible, since
           variables will no longer stay in a "home register".

           Enabled by default with --ffuunnrroollll--llooooppss.

       --ffwwhhoollee--pprrooggrraamm
           Assume that the current compilation unit represents
           whole program being compiled.  All public functions
           and variables with the exception of "main" and those
           merged by attribute "externally_visible" become static
           functions and in a affect gets more aggressively
           optimized by interprocedural optimizers.  While this
           option is equivalent to proper use of "static" keyword
           for programs consisting of single file, in combination



gcc-4.3.2                   2008-08-27                        108





GCC(1)                         GNU                         GCC(1)


           with option ----ccoommbbiinnee this flag can be used to compile
           most of smaller scale C programs since the functions
           and variables become local for the whole combined
           compilation unit, not for the single source file
           itself.

           This option is not supported for Fortran programs.

       --ffccpprroopp--rreeggiisstteerrss
           After register allocation and post-register allocation
           instruction splitting, we perform a copy-propagation
           pass to try to reduce scheduling dependencies and
           occasionally eliminate the copy.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffpprrooffiillee--ggeenneerraattee
           Enable options usually used for instrumenting
           application to produce profile useful for later
           recompilation with profile feedback based
           optimization.  You must use --ffpprrooffiillee--ggeenneerraattee both
           when compiling and when linking your program.

           The following options are enabled: "-fprofile-arcs",
           "-fprofile-values", "-fvpt".

       --ffpprrooffiillee--uussee
           Enable profile feedback directed optimizations, and
           optimizations generally profitable only with profile
           feedback available.

           The following options are enabled:
           "-fbranch-probabilities", "-fvpt", "-funroll-loops",
           "-fpeel-loops", "-ftracer"

           By default, GCC emits an error message if the feedback
           profiles do not match the source code.  This error can
           be turned into a warning by using --WWccoovveerraaggee--mmiissmmaattcchh.
           Note this may result in poorly optimized code.

       The following options control compiler behavior regarding
       floating point arithmetic.  These options trade off
       between speed and correctness.  All must be specifically
       enabled.

       --ffffllooaatt--ssttoorree
           Do not store floating point variables in registers,
           and inhibit other options that might change whether a
           floating point value is taken from a register or
           memory.

           This option prevents undesirable excess precision on
           machines such as the 68000 where the floating
           registers (of the 68881) keep more precision than a



gcc-4.3.2                   2008-08-27                        109





GCC(1)                         GNU                         GCC(1)


           "double" is supposed to have.  Similarly for the x86
           architecture.  For most programs, the excess precision
           does only good, but a few programs rely on the precise
           definition of IEEE floating point.  Use --ffffllooaatt--ssttoorree
           for such programs, after modifying them to store all
           pertinent intermediate computations into variables.

       --ffffaasstt--mmaatthh
           Sets --ffnnoo--mmaatthh--eerrrrnnoo, --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss,
           --ffffiinniittee--mmaatthh--oonnllyy, --ffnnoo--rroouunnddiinngg--mmaatthh,
           --ffnnoo--ssiiggnnaalliinngg--nnaannss and --ffccxx--lliimmiitteedd--rraannggee.

           This option causes the preprocessor macro
           "__FAST_MATH__" to be defined.

           This option is not turned on by any --OO option since it
           can result in incorrect output for programs which
           depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions. It may,
           however, yield faster code for programs that do not
           require the guarantees of these specifications.

       --ffnnoo--mmaatthh--eerrrrnnoo
           Do not set ERRNO after calling math functions that are
           executed with a single instruction, e.g., sqrt.  A
           program that relies on IEEE exceptions for math error
           handling may want to use this flag for speed while
           maintaining IEEE arithmetic compatibility.

           This option is not turned on by any --OO option since it
           can result in incorrect output for programs which
           depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions. It may,
           however, yield faster code for programs that do not
           require the guarantees of these specifications.

           The default is --ffmmaatthh--eerrrrnnoo.

           On Darwin systems, the math library never sets
           "errno".  There is therefore no reason for the
           compiler to consider the possibility that it might,
           and --ffnnoo--mmaatthh--eerrrrnnoo is the default.

       --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
           Allow optimizations for floating-point arithmetic that
           (a) assume that arguments and results are valid and
           (b) may violate IEEE or ANSI standards.  When used at
           link-time, it may include libraries or startup files
           that change the default FPU control word or other
           similar optimizations.

           This option is not turned on by any --OO option since it
           can result in incorrect output for programs which
           depend on an exact implementation of IEEE or ISO



gcc-4.3.2                   2008-08-27                        110





GCC(1)                         GNU                         GCC(1)


           rules/specifications for math functions. It may,
           however, yield faster code for programs that do not
           require the guarantees of these specifications.
           Enables --ffnnoo--ssiiggnneedd--zzeerrooss, --ffnnoo--ttrraappppiinngg--mmaatthh,
           --ffaassssoocciiaattiivvee--mmaatthh and --ffrreecciipprrooccaall--mmaatthh.

           The default is --ffnnoo--uunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss.

       --ffaassssoocciiaattiivvee--mmaatthh
           Allow re-association of operands in series of
           floating-point operations.  This violates the ISO C
           and C++ language standard by possibly changing
           computation result.  NOTE: re-ordering may change the
           sign of zero as well as ignore NaNs and inhibit or
           create underflow or overflow (and thus cannot be used
           on a code which relies on rounding behavior like "(x +
           2**52) - 2**52)".  May also reorder floating-point
           comparisons and thus may not be used when ordered
           comparisons are required.  This option requires that
           both --ffnnoo--ssiiggnneedd--zzeerrooss and --ffnnoo--ttrraappppiinngg--mmaatthh be in
           effect.  Moreover, it doesn't make much sense with
           --ffrroouunnddiinngg--mmaatthh.

           The default is --ffnnoo--aassssoocciiaattiivvee--mmaatthh.

       --ffrreecciipprrooccaall--mmaatthh
           Allow the reciprocal of a value to be used instead of
           dividing by the value if this enables optimizations.
           For example "x / y" can be replaced with "x * (1/y)"
           which is useful if "(1/y)" is subject to common
           subexpression elimination.  Note that this loses
           precision and increases the number of flops operating
           on the value.

           The default is --ffnnoo--rreecciipprrooccaall--mmaatthh.

       --ffffiinniittee--mmaatthh--oonnllyy
           Allow optimizations for floating-point arithmetic that
           assume that arguments and results are not NaNs or
           +-Infs.

           This option is not turned on by any --OO option since it
           can result in incorrect output for programs which
           depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions. It may,
           however, yield faster code for programs that do not
           require the guarantees of these specifications.

           The default is --ffnnoo--ffiinniittee--mmaatthh--oonnllyy.

       --ffnnoo--ssiiggnneedd--zzeerrooss
           Allow optimizations for floating point arithmetic that
           ignore the signedness of zero.  IEEE arithmetic
           specifies the behavior of distinct +0.0 and -0.0



gcc-4.3.2                   2008-08-27                        111





GCC(1)                         GNU                         GCC(1)


           values, which then prohibits simplification of
           expressions such as x+0.0 or 0.0*x (even with
           --ffffiinniittee--mmaatthh--oonnllyy).  This option implies that the
           sign of a zero result isn't significant.

           The default is --ffssiiggnneedd--zzeerrooss.

       --ffnnoo--ttrraappppiinngg--mmaatthh
           Compile code assuming that floating-point operations
           cannot generate user-visible traps.  These traps
           include division by zero, overflow, underflow, inexact
           result and invalid operation.  This option requires
           that --ffnnoo--ssiiggnnaalliinngg--nnaannss be in effect.  Setting this
           option may allow faster code if one relies on
           "non-stop" IEEE arithmetic, for example.

           This option should never be turned on by any --OO option
           since it can result in incorrect output for programs
           which depend on an exact implementation of IEEE or ISO
           rules/specifications for math functions.

           The default is --ffttrraappppiinngg--mmaatthh.

       --ffrroouunnddiinngg--mmaatthh
           Disable transformations and optimizations that assume
           default floating point rounding behavior.  This is
           round-to-zero for all floating point to integer
           conversions, and round-to-nearest for all other
           arithmetic truncations.  This option should be
           specified for programs that change the FP rounding
           mode dynamically, or that may be executed with a non-
           default rounding mode.  This option disables constant
           folding of floating point expressions at compile-time
           (which may be affected by rounding mode) and
           arithmetic transformations that are unsafe in the
           presence of sign-dependent rounding modes.

           The default is --ffnnoo--rroouunnddiinngg--mmaatthh.

           This option is experimental and does not currently
           guarantee to disable all GCC optimizations that are
           affected by rounding mode.  Future versions of GCC may
           provide finer control of this setting using C99's
           "FENV_ACCESS" pragma.  This command line option will
           be used to specify the default state for
           "FENV_ACCESS".

       --ffrrttll--aabbssttrraacctt--sseeqquueenncceess
           It is a size optimization method. This option is to
           find identical sequences of code, which can be turned
           into pseudo-procedures  and then  replace  all
           occurrences with  calls to  the  newly created
           subroutine. It is kind of an opposite of
           --ffiinnlliinnee--ffuunnccttiioonnss.  This optimization runs at RTL



gcc-4.3.2                   2008-08-27                        112





GCC(1)                         GNU                         GCC(1)


           level.

       --ffssiiggnnaalliinngg--nnaannss
           Compile code assuming that IEEE signaling NaNs may
           generate user-visible traps during floating-point
           operations.  Setting this option disables
           optimizations that may change the number of exceptions
           visible with signaling NaNs.  This option implies
           --ffttrraappppiinngg--mmaatthh.

           This option causes the preprocessor macro
           "__SUPPORT_SNAN__" to be defined.

           The default is --ffnnoo--ssiiggnnaalliinngg--nnaannss.

           This option is experimental and does not currently
           guarantee to disable all GCC optimizations that affect
           signaling NaN behavior.

       --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
           Treat floating point constant as single precision
           constant instead of implicitly converting it to double
           precision constant.

       --ffccxx--lliimmiitteedd--rraannggee
           When enabled, this option states that a range
           reduction step is not needed when performing complex
           division.  The default is --ffnnoo--ccxx--lliimmiitteedd--rraannggee, but
           is enabled by --ffffaasstt--mmaatthh.

           This option controls the default setting of the ISO
           C99 "CX_LIMITED_RANGE" pragma.  Nevertheless, the
           option applies to all languages.

       The following options control optimizations that may
       improve performance, but are not enabled by any --OO
       options.  This section includes experimental options that
       may produce broken code.

       --ffbbrraanncchh--pprroobbaabbiilliittiieess
           After running a program compiled with --ffpprrooffiillee--aarrccss,
           you can compile it a second time using
           --ffbbrraanncchh--pprroobbaabbiilliittiieess, to improve optimizations based
           on the number of times each branch was taken.  When
           the program compiled with --ffpprrooffiillee--aarrccss exits it
           saves arc execution counts to a file called
           _s_o_u_r_c_e_n_a_m_e_._g_c_d_a for each source file.  The information
           in this data file is very dependent on the structure
           of the generated code, so you must use the same source
           code and the same optimization options for both
           compilations.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, GCC puts a RREEGG__BBRR__PPRROOBB
           note on each JJUUMMPP__IINNSSNN and CCAALLLL__IINNSSNN.  These can be



gcc-4.3.2                   2008-08-27                        113





GCC(1)                         GNU                         GCC(1)


           used to improve optimization.  Currently, they are
           only used in one place: in _r_e_o_r_g_._c, instead of
           guessing which path a branch is mostly to take, the
           RREEGG__BBRR__PPRROOBB values are used to exactly determine which
           path is taken more often.

       --ffpprrooffiillee--vvaalluueess
           If combined with --ffpprrooffiillee--aarrccss, it adds code so that
           some data about values of expressions in the program
           is gathered.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, it reads back the data
           gathered from profiling values of expressions and adds
           RREEGG__VVAALLUUEE__PPRROOFFIILLEE notes to instructions for their
           later usage in optimizations.

           Enabled with --ffpprrooffiillee--ggeenneerraattee and --ffpprrooffiillee--uussee.

       --ffvvpptt
           If combined with --ffpprrooffiillee--aarrccss, it instructs the
           compiler to add a code to gather information about
           values of expressions.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, it reads back the data
           gathered and actually performs the optimizations based
           on them.  Currently the optimizations include
           specialization of division operation using the
           knowledge about the value of the denominator.

       --ffrreennaammee--rreeggiisstteerrss
           Attempt to avoid false dependencies in scheduled code
           by making use of registers left over after register
           allocation.  This optimization will most benefit
           processors with lots of registers.  Depending on the
           debug information format adopted by the target,
           however, it can make debugging impossible, since
           variables will no longer stay in a "home register".

           Enabled by default with --ffuunnrroollll--llooooppss.

       --ffttrraacceerr
           Perform tail duplication to enlarge superblock size.
           This transformation simplifies the control flow of the
           function allowing other optimizations to do better
           job.

           Enabled with --ffpprrooffiillee--uussee.

       --ffuunnrroollll--llooooppss
           Unroll loops whose number of iterations can be
           determined at compile time or upon entry to the loop.
           --ffuunnrroollll--llooooppss implies --ffrreerruunn--ccssee--aafftteerr--lloooopp, --ffwweebb
           and --ffrreennaammee--rreeggiisstteerrss.  It also turns on complete
           loop peeling (i.e. complete removal of loops with



gcc-4.3.2                   2008-08-27                        114





GCC(1)                         GNU                         GCC(1)


           small constant number of iterations).  This option
           makes code larger, and may or may not make it run
           faster.

           Enabled with --ffpprrooffiillee--uussee.

       --ffuunnrroollll--aallll--llooooppss
           Unroll all loops, even if their number of iterations
           is uncertain when the loop is entered.  This usually
           makes programs run more slowly.  --ffuunnrroollll--aallll--llooooppss
           implies the same options as --ffuunnrroollll--llooooppss.

       --ffppeeeell--llooooppss
           Peels the loops for that there is enough information
           that they do not roll much (from profile feedback).
           It also turns on complete loop peeling (i.e. complete
           removal of loops with small constant number of
           iterations).

           Enabled with --ffpprrooffiillee--uussee.

       --ffmmoovvee--lloooopp--iinnvvaarriiaannttss
           Enables the loop invariant motion pass in the RTL loop
           optimizer.  Enabled at level --OO11

       --ffuunnsswwiittcchh--llooooppss
           Move branches with loop invariant conditions out of
           the loop, with duplicates of the loop on both branches
           (modified according to result of the condition).

       --ffffuunnccttiioonn--sseeccttiioonnss
       --ffddaattaa--sseeccttiioonnss
           Place each function or data item into its own section
           in the output file if the target supports arbitrary
           sections.  The name of the function or the name of the
           data item determines the section's name in the output
           file.

           Use these options on systems where the linker can
           perform optimizations to improve locality of reference
           in the instruction space.  Most systems using the ELF
           object format and SPARC processors running Solaris 2
           have linkers with such optimizations.  AIX may have
           these optimizations in the future.

           Only use these options when there are significant
           benefits from doing so.  When you specify these
           options, the assembler and linker will create larger
           object and executable files and will also be slower.
           You will not be able to use "gprof" on all systems if
           you specify this option and you may have problems with
           debugging if you specify both this option and --gg.





gcc-4.3.2                   2008-08-27                        115





GCC(1)                         GNU                         GCC(1)


       --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee
           Perform branch target register load optimization
           before prologue / epilogue threading.  The use of
           target registers can typically be exposed only during
           reload, thus hoisting loads out of loops and doing
           inter-block scheduling needs a separate optimization
           pass.

       --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee22
           Perform branch target register load optimization after
           prologue / epilogue threading.

       --ffbbttrr--bbbb--eexxcclluussiivvee
           When performing branch target register load
           optimization, don't reuse branch target registers in
           within any basic block.

       --ffssttaacckk--pprrootteeccttoorr
           Emit extra code to check for buffer overflows, such as
           stack smashing attacks.  This is done by adding a
           guard variable to functions with vulnerable objects.
           This includes functions that call alloca, and
           functions with buffers larger than 8 bytes.  The
           guards are initialized when a function is entered and
           then checked when the function exits.  If a guard
           check fails, an error message is printed and the
           program exits.

       --ffssttaacckk--pprrootteeccttoorr--aallll
           Like --ffssttaacckk--pprrootteeccttoorr except that all functions are
           protected.

       --ffsseeccttiioonn--aanncchhoorrss
           Try to reduce the number of symbolic address
           calculations by using shared "anchor" symbols to
           address nearby objects.  This transformation can help
           to reduce the number of GOT entries and GOT accesses
           on some targets.

           For example, the implementation of the following
           function "foo":

                   static int a, b, c;
                   int foo (void) { return a + b + c; }

           would usually calculate the addresses of all three
           variables, but if you compile it with
           --ffsseeccttiioonn--aanncchhoorrss, it will access the variables from a
           common anchor point instead.  The effect is similar to
           the following pseudocode (which isn't valid C):







gcc-4.3.2                   2008-08-27                        116





GCC(1)                         GNU                         GCC(1)


                   int foo (void)
                   {
                     register int *xr = &x;
                     return xr[&a - &x] + xr[&b - &x] + xr[&c - &x];
                   }

           Not all targets support this option.

       ----ppaarraamm _n_a_m_e==_v_a_l_u_e
           In some places, GCC uses various constants to control
           the amount of optimization that is done.  For example,
           GCC will not inline functions that contain more that a
           certain number of instructions.  You can control some
           of these constants on the command-line using the
           ----ppaarraamm option.

           The names of specific parameters, and the meaning of
           the values, are tied to the internals of the compiler,
           and are subject to change without notice in future
           releases.

           In each case, the _v_a_l_u_e is an integer.  The allowable
           choices for _n_a_m_e are given in the following table:

           ssaalliiaass--mmaaxx--iimmpplliicciitt--ffiieellddss
               The maximum number of fields in a variable without
               direct structure accesses for which structure
               aliasing will consider trying to track each field.
               The default is 5

           ssaalliiaass--mmaaxx--aarrrraayy--eelleemmeennttss
               The maximum number of elements an array can have
               and its elements still be tracked individually by
               structure aliasing. The default is 4

           ssrraa--mmaaxx--ssttrruuccttuurree--ssiizzee
               The maximum structure size, in bytes, at which the
               scalar replacement of aggregates (SRA)
               optimization will perform block copies.  The
               default value, 0, implies that GCC will select the
               most appropriate size itself.

           ssrraa--ffiieelldd--ssttrruuccttuurree--rraattiioo
               The threshold ratio (as a percentage) between
               instantiated fields and the complete structure
               size.  We say that if the ratio of the number of
               bytes in instantiated fields to the number of
               bytes in the complete structure exceeds this
               parameter, then block copies are not used.  The
               default is 75.

           ssttrruucctt--rreeoorrgg--ccoolldd--ssttrruucctt--rraattiioo
               The threshold ratio (as a percentage) between a
               structure frequency and the frequency of the



gcc-4.3.2                   2008-08-27                        117





GCC(1)                         GNU                         GCC(1)


               hottest structure in the program.  This parameter
               is used by struct-reorg optimization enabled by
               --ffiippaa--ssttrruucctt--rreeoorrgg.  We say that if the ratio of a
               structure frequency, calculated by profiling, to
               the hottest structure frequency in the program is
               less than this parameter, then structure
               reorganization is not applied to this structure.
               The default is 10.

           mmaaxx--ccrroossssjjuummpp--eeddggeess
               The maximum number of incoming edges to consider
               for crossjumping.  The algorithm used by
               --ffccrroossssjjuummppiinngg is O(N^2) in the number of edges
               incoming to each block.  Increasing values mean
               more aggressive optimization, making the compile
               time increase with probably small improvement in
               executable size.

           mmiinn--ccrroossssjjuummpp--iinnssnnss
               The minimum number of instructions which must be
               matched at the end of two blocks before
               crossjumping will be performed on them.  This
               value is ignored in the case where all
               instructions in the block being crossjumped from
               are matched.  The default value is 5.

           mmaaxx--ggrrooww--ccooppyy--bbbb--iinnssnnss
               The maximum code size expansion factor when
               copying basic blocks instead of jumping.  The
               expansion is relative to a jump instruction.  The
               default value is 8.

           mmaaxx--ggoottoo--dduupplliiccaattiioonn--iinnssnnss
               The maximum number of instructions to duplicate to
               a block that jumps to a computed goto.  To avoid
               O(N^2) behavior in a number of passes, GCC factors
               computed gotos early in the compilation process,
               and unfactors them as late as possible.  Only
               computed jumps at the end of a basic blocks with
               no more than max-goto-duplication-insns are
               unfactored.  The default value is 8.

           mmaaxx--ddeellaayy--sslloott--iinnssnn--sseeaarrcchh
               The maximum number of instructions to consider
               when looking for an instruction to fill a delay
               slot.  If more than this arbitrary number of
               instructions is searched, the time savings from
               filling the delay slot will be minimal so stop
               searching.  Increasing values mean more aggressive
               optimization, making the compile time increase
               with probably small improvement in executable run
               time.





gcc-4.3.2                   2008-08-27                        118





GCC(1)                         GNU                         GCC(1)


           mmaaxx--ddeellaayy--sslloott--lliivvee--sseeaarrcchh
               When trying to fill delay slots, the maximum
               number of instructions to consider when searching
               for a block with valid live register information.
               Increasing this arbitrarily chosen value means
               more aggressive optimization, increasing the
               compile time.  This parameter should be removed
               when the delay slot code is rewritten to maintain
               the control-flow graph.

           mmaaxx--ggccssee--mmeemmoorryy
               The approximate maximum amount of memory that will
               be allocated in order to perform the global common
               subexpression elimination optimization.  If more
               memory than specified is required, the
               optimization will not be done.

           mmaaxx--ggccssee--ppaasssseess
               The maximum number of passes of GCSE to run.  The
               default is 1.

           mmaaxx--ppeennddiinngg--lliisstt--lleennggtthh
               The maximum number of pending dependencies
               scheduling will allow before flushing the current
               state and starting over.  Large functions with few
               branches or calls can create excessively large
               lists which needlessly consume memory and
               resources.

           mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
               Several parameters control the tree inliner used
               in gcc.  This number sets the maximum number of
               instructions (counted in GCC's internal
               representation) in a single function that the tree
               inliner will consider for inlining.  This only
               affects functions declared inline and methods
               implemented in a class declaration (C++).  The
               default value is 450.

           mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
               When you use --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33),
               a lot of functions that would otherwise not be
               considered for inlining by the compiler will be
               investigated.  To those functions, a different
               (more restrictive) limit compared to functions
               declared inline can be applied.  The default value
               is 90.

           llaarrggee--ffuunnccttiioonn--iinnssnnss
               The limit specifying really large functions.  For
               functions larger than this limit after inlining
               inlining is constrained by ----ppaarraamm llaarrggee--ffuunnccttiioonn--
               ggrroowwtthh.  This parameter is useful primarily to
               avoid extreme compilation time caused by non-



gcc-4.3.2                   2008-08-27                        119





GCC(1)                         GNU                         GCC(1)


               linear algorithms used by the backend.  This
               parameter is ignored when --ffuunniitt--aatt--aa--ttiimmee is not
               used.  The default value is 2700.

           llaarrggee--ffuunnccttiioonn--ggrroowwtthh
               Specifies maximal growth of large function caused
               by inlining in percents.  This parameter is
               ignored when --ffuunniitt--aatt--aa--ttiimmee is not used.  The
               default value is 100 which limits large function
               growth to 2.0 times the original size.

           llaarrggee--uunniitt--iinnssnnss
               The limit specifying large translation unit.
               Growth caused by inlining of units larger than
               this limit is limited by ----ppaarraamm iinnlliinnee--uunniitt--
               ggrroowwtthh.  For small units this might be too tight
               (consider unit consisting of function A that is
               inline and B that just calls A three time.  If B
               is small relative to A, the growth of unit is
               300\% and yet such inlining is very sane.  For
               very large units consisting of small inlineable
               functions however the overall unit growth limit is
               needed to avoid exponential explosion of code
               size.  Thus for smaller units, the size is
               increased to ----ppaarraamm llaarrggee--uunniitt--iinnssnnss before
               applying ----ppaarraamm iinnlliinnee--uunniitt--ggrroowwtthh.  The default
               is 10000

           iinnlliinnee--uunniitt--ggrroowwtthh
               Specifies maximal overall growth of the
               compilation unit caused by inlining.  This
               parameter is ignored when --ffuunniitt--aatt--aa--ttiimmee is not
               used.  The default value is 30 which limits unit
               growth to 1.3 times the original size.

           llaarrggee--ssttaacckk--ffrraammee
               The limit specifying large stack frames.  While
               inlining the algorithm is trying to not grow past
               this limit too much.  Default value is 256 bytes.

           llaarrggee--ssttaacckk--ffrraammee--ggrroowwtthh
               Specifies maximal growth of large stack frames
               caused by inlining in percents.  The default value
               is 1000 which limits large stack frame growth to
               11 times the original size.

           mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee
           mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee--aauuttoo
               Specifies maximum number of instructions out-of-
               line copy of self recursive inline function can
               grow into by performing recursive inlining.

               For functions declared inline ----ppaarraamm mmaaxx--iinnlliinnee--
               iinnssnnss--rreeccuurrssiivvee is taken into account.  For



gcc-4.3.2                   2008-08-27                        120





GCC(1)                         GNU                         GCC(1)


               function not declared inline, recursive inlining
               happens only when --ffiinnlliinnee--ffuunnccttiioonnss (included in
               --OO33) is enabled and ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--
               rreeccuurrssiivvee--aauuttoo is used.  The default value is 450.

           mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh
           mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh--aauuttoo
               Specifies maximum recursion depth used by the
               recursive inlining.

               For functions declared inline ----ppaarraamm mmaaxx--iinnlliinnee--
               rreeccuurrssiivvee--ddeepptthh is taken into account.  For
               function not declared inline, recursive inlining
               happens only when --ffiinnlliinnee--ffuunnccttiioonnss (included in
               --OO33) is enabled and ----ppaarraamm mmaaxx--iinnlliinnee--rreeccuurrssiivvee--
               ddeepptthh--aauuttoo is used.  The default value is 8.

           mmiinn--iinnlliinnee--rreeccuurrssiivvee--pprroobbaabbiilliittyy
               Recursive inlining is profitable only for function
               having deep recursion in average and can hurt for
               function having little recursion depth by
               increasing the prologue size or complexity of
               function body to other optimizers.

               When profile feedback is available (see
               --ffpprrooffiillee--ggeenneerraattee) the actual recursion depth can
               be guessed from probability that function will
               recurse via given call expression.  This parameter
               limits inlining only to call expression whose
               probability exceeds given threshold (in percents).
               The default value is 10.

           iinnlliinnee--ccaallll--ccoosstt
               Specify cost of call instruction relative to
               simple arithmetics operations (having cost of 1).
               Increasing this cost disqualifies inlining of non-
               leaf functions and at the same time increases size
               of leaf function that is believed to reduce
               function size by being inlined.  In effect it
               increases amount of inlining for code having large
               abstraction penalty (many functions that just pass
               the arguments to other functions) and decrease
               inlining for code with low abstraction penalty.
               The default value is 12.

           mmiinn--vveecctt--lloooopp--bboouunndd
               The minimum number of iterations under which a
               loop will not get vectorized when --ffttrreeee--vveeccttoorriizzee
               is used.  The number of iterations after
               vectorization needs to be greater than the value
               specified by this option to allow vectorization.
               The default value is 0.





gcc-4.3.2                   2008-08-27                        121





GCC(1)                         GNU                         GCC(1)


           mmaaxx--uunnrroolllleedd--iinnssnnss
               The maximum number of instructions that a loop
               should have if that loop is unrolled, and if the
               loop is unrolled, it determines how many times the
               loop code is unrolled.

           mmaaxx--aavveerraaggee--uunnrroolllleedd--iinnssnnss
               The maximum number of instructions biased by
               probabilities of their execution that a loop
               should have if that loop is unrolled, and if the
               loop is unrolled, it determines how many times the
               loop code is unrolled.

           mmaaxx--uunnrroollll--ttiimmeess
               The maximum number of unrollings of a single loop.

           mmaaxx--ppeeeelleedd--iinnssnnss
               The maximum number of instructions that a loop
               should have if that loop is peeled, and if the
               loop is peeled, it determines how many times the
               loop code is peeled.

           mmaaxx--ppeeeell--ttiimmeess
               The maximum number of peelings of a single loop.

           mmaaxx--ccoommpplleetteellyy--ppeeeelleedd--iinnssnnss
               The maximum number of insns of a completely peeled
               loop.

           mmaaxx--ccoommpplleetteellyy--ppeeeell--ttiimmeess
               The maximum number of iterations of a loop to be
               suitable for complete peeling.

           mmaaxx--uunnsswwiittcchh--iinnssnnss
               The maximum number of insns of an unswitched loop.

           mmaaxx--uunnsswwiittcchh--lleevveell
               The maximum number of branches unswitched in a
               single loop.

           lliimm--eexxppeennssiivvee
               The minimum cost of an expensive expression in the
               loop invariant motion.

           iivv--ccoonnssiiddeerr--aallll--ccaannddiiddaatteess--bboouunndd
               Bound on number of candidates for induction
               variables below that all candidates are considered
               for each use in induction variable optimizations.
               Only the most relevant candidates are considered
               if there are more candidates, to avoid quadratic
               time complexity.

           iivv--mmaaxx--ccoonnssiiddeerreedd--uusseess
               The induction variable optimizations give up on



gcc-4.3.2                   2008-08-27                        122





GCC(1)                         GNU                         GCC(1)


               loops that contain more induction variable uses.

           iivv--aallwwaayyss--pprruunnee--ccaanndd--sseett--bboouunndd
               If number of candidates in the set is smaller than
               this value, we always try to remove unnecessary
               ivs from the set during its optimization when a
               new iv is added to the set.

           sscceevv--mmaaxx--eexxpprr--ssiizzee
               Bound on size of expressions used in the scalar
               evolutions analyzer.  Large expressions slow the
               analyzer.

           oommeeggaa--mmaaxx--vvaarrss
               The maximum number of variables in an Omega
               constraint system.  The default value is 128.

           oommeeggaa--mmaaxx--ggeeqqss
               The maximum number of inequalities in an Omega
               constraint system.  The default value is 256.

           oommeeggaa--mmaaxx--eeqqss
               The maximum number of equalities in an Omega
               constraint system.  The default value is 128.

           oommeeggaa--mmaaxx--wwiilldd--ccaarrddss
               The maximum number of wildcard variables that the
               Omega solver will be able to insert.  The default
               value is 18.

           oommeeggaa--hhaasshh--ttaabbllee--ssiizzee
               The size of the hash table in the Omega solver.
               The default value is 550.

           oommeeggaa--mmaaxx--kkeeyyss
               The maximal number of keys used by the Omega
               solver.  The default value is 500.

           oommeeggaa--eelliimmiinnaattee--rreedduunnddaanntt--ccoonnssttrraaiinnttss
               When set to 1, use expensive methods to eliminate
               all redundant constraints.  The default value is
               0.

           vveecctt--mmaaxx--vveerrssiioonn--ffoorr--aalliiggnnmmeenntt--cchheecckkss
               The maximum number of runtime checks that can be
               performed when doing loop versioning for alignment
               in the vectorizer.  See option ftree-vect-loop-
               version for more information.

           vveecctt--mmaaxx--vveerrssiioonn--ffoorr--aalliiaass--cchheecckkss
               The maximum number of runtime checks that can be
               performed when doing loop versioning for alias in
               the vectorizer.  See option ftree-vect-loop-
               version for more information.



gcc-4.3.2                   2008-08-27                        123





GCC(1)                         GNU                         GCC(1)


           mmaaxx--iitteerraattiioonnss--ttoo--ttrraacckk
               The maximum number of iterations of a loop the
               brute force algorithm for analysis of # of
               iterations of the loop tries to evaluate.

           hhoott--bbbb--ccoouunntt--ffrraaccttiioonn
               Select fraction of the maximal count of
               repetitions of basic block in program given basic
               block needs to have to be considered hot.

           hhoott--bbbb--ffrreeqquueennccyy--ffrraaccttiioonn
               Select fraction of the maximal frequency of
               executions of basic block in function given basic
               block needs to have to be considered hot

           mmaaxx--pprreeddiicctteedd--iitteerraattiioonnss
               The maximum number of loop iterations we predict
               statically.  This is useful in cases where
               function contain single loop with known bound and
               other loop with unknown.  We predict the known
               number of iterations correctly, while the unknown
               number of iterations average to roughly 10.  This
               means that the loop without bounds would appear
               artificially cold relative to the other one.

           aalliiggnn--tthhrreesshhoolldd
               Select fraction of the maximal frequency of
               executions of basic block in function given basic
               block will get aligned.

           aalliiggnn--lloooopp--iitteerraattiioonnss
               A loop expected to iterate at lest the selected
               number of iterations will get aligned.

           ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee
           ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk
               This value is used to limit superblock formation
               once the given percentage of executed instructions
               is covered.  This limits unnecessary code size
               expansion.

               The ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk is used only
               when profile feedback is available.  The real
               profiles (as opposed to statically estimated ones)
               are much less balanced allowing the threshold to
               be larger value.

           ttrraacceerr--mmaaxx--ccooddee--ggrroowwtthh
               Stop tail duplication once code growth has reached
               given percentage.  This is rather hokey argument,
               as most of the duplicates will be eliminated later
               in cross jumping, so it may be set to much higher
               values than is the desired code growth.




gcc-4.3.2                   2008-08-27                        124





GCC(1)                         GNU                         GCC(1)


           ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
               Stop reverse growth when the reverse probability
               of best edge is less than this threshold (in
               percent).

           ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
           ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo--ffeeeeddbbaacckk
               Stop forward growth if the best edge do have
               probability lower than this threshold.

               Similarly to ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee two values
               are present, one for compilation for profile
               feedback and one for compilation without.  The
               value for compilation with profile feedback needs
               to be more conservative (higher) in order to make
               tracer effective.

           mmaaxx--ccssee--ppaatthh--lleennggtthh
               Maximum number of basic blocks on path that cse
               considers.  The default is 10.

           mmaaxx--ccssee--iinnssnnss
               The maximum instructions CSE process before
               flushing. The default is 1000.

           mmaaxx--aalliiaasseedd--vvooppss
               Maximum number of virtual operands per function
               allowed to represent aliases before triggering the
               alias partitioning heuristic.  Alias partitioning
               reduces compile times and memory consumption
               needed for aliasing at the expense of precision
               loss in alias information.  The default value for
               this parameter is 100 for -O1, 500 for -O2 and
               1000 for -O3.

               Notice that if a function contains more memory
               statements than the value of this parameter, it is
               not really possible to achieve this reduction.  In
               this case, the compiler will use the number of
               memory statements as the value for mmaaxx--aalliiaasseedd--
               vvooppss.

           aavvgg--aalliiaasseedd--vvooppss
               Average number of virtual operands per statement
               allowed to represent aliases before triggering the
               alias partitioning heuristic.  This works in
               conjunction with mmaaxx--aalliiaasseedd--vvooppss.  If a function
               contains more than mmaaxx--aalliiaasseedd--vvooppss virtual
               operators, then memory symbols will be grouped
               into memory partitions until either the total
               number of virtual operators is below mmaaxx--aalliiaasseedd--
               vvooppss or the average number of virtual operators
               per memory statement is below aavvgg--aalliiaasseedd--vvooppss.
               The default value for this parameter is 1 for -O1



gcc-4.3.2                   2008-08-27                        125





GCC(1)                         GNU                         GCC(1)


               and -O2, and 3 for -O3.

           ggggcc--mmiinn--eexxppaanndd
               GCC uses a garbage collector to manage its own
               memory allocation.  This parameter specifies the
               minimum percentage by which the garbage
               collector's heap should be allowed to expand
               between collections.  Tuning this may improve
               compilation speed; it has no effect on code
               generation.

               The default is 30% + 70% * (RAM/1GB) with an upper
               bound of 100% when RAM >= 1GB.  If "getrlimit" is
               available, the notion of "RAM" is the smallest of
               actual RAM and "RLIMIT_DATA" or "RLIMIT_AS".  If
               GCC is not able to calculate RAM on a particular
               platform, the lower bound of 30% is used.  Setting
               this parameter and ggggcc--mmiinn--hheeaappssiizzee to zero causes
               a full collection to occur at every opportunity.
               This is extremely slow, but can be useful for
               debugging.

           ggggcc--mmiinn--hheeaappssiizzee
               Minimum size of the garbage collector's heap
               before it begins bothering to collect garbage.
               The first collection occurs after the heap expands
               by ggggcc--mmiinn--eexxppaanndd% beyond ggggcc--mmiinn--hheeaappssiizzee.
               Again, tuning this may improve compilation speed,
               and has no effect on code generation.

               The default is the smaller of RAM/8, RLIMIT_RSS,
               or a limit which tries to ensure that RLIMIT_DATA
               or RLIMIT_AS are not exceeded, but with a lower
               bound of 4096 (four megabytes) and an upper bound
               of 131072 (128 megabytes).  If GCC is not able to
               calculate RAM on a particular platform, the lower
               bound is used.  Setting this parameter very large
               effectively disables garbage collection.  Setting
               this parameter and ggggcc--mmiinn--eexxppaanndd to zero causes a
               full collection to occur at every opportunity.

           mmaaxx--rreellooaadd--sseeaarrcchh--iinnssnnss
               The maximum number of instruction reload should
               look backward for equivalent register.  Increasing
               values mean more aggressive optimization, making
               the compile time increase with probably slightly
               better performance.  The default value is 100.

           mmaaxx--ccsseelliibb--mmeemmoorryy--llooccaattiioonnss
               The maximum number of memory locations cselib
               should take into account.  Increasing values mean
               more aggressive optimization, making the compile
               time increase with probably slightly better
               performance.  The default value is 500.



gcc-4.3.2                   2008-08-27                        126





GCC(1)                         GNU                         GCC(1)


           mmaaxx--ffllooww--mmeemmoorryy--llooccaattiioonnss
               Similar as mmaaxx--ccsseelliibb--mmeemmoorryy--llooccaattiioonnss but for
               dataflow liveness.  The default value is 100.

           rreeoorrddeerr--bblloocckkss--dduupplliiccaattee
           rreeoorrddeerr--bblloocckkss--dduupplliiccaattee--ffeeeeddbbaacckk
               Used by basic block reordering pass to decide
               whether to use unconditional branch or duplicate
               the code on its destination.  Code is duplicated
               when its estimated size is smaller than this value
               multiplied by the estimated size of unconditional
               jump in the hot spots of the program.

               The rreeoorrddeerr--bblloocckk--dduupplliiccaattee--ffeeeeddbbaacckk is used only
               when profile feedback is available and may be set
               to higher values than rreeoorrddeerr--bblloocckk--dduupplliiccaattee
               since information about the hot spots is more
               accurate.

           mmaaxx--sscchheedd--rreeaaddyy--iinnssnnss
               The maximum number of instructions ready to be
               issued the scheduler should consider at any given
               time during the first scheduling pass.  Increasing
               values mean more thorough searches, making the
               compilation time increase with probably little
               benefit.  The default value is 100.

           mmaaxx--sscchheedd--rreeggiioonn--bblloocckkss
               The maximum number of blocks in a region to be
               considered for interblock scheduling.  The default
               value is 10.

           mmaaxx--sscchheedd--rreeggiioonn--iinnssnnss
               The maximum number of insns in a region to be
               considered for interblock scheduling.  The default
               value is 100.

           mmiinn--ssppeecc--pprroobb
               The minimum probability (in percents) of reaching
               a source block for interblock speculative
               scheduling.  The default value is 40.

           mmaaxx--sscchheedd--eexxtteenndd--rreeggiioonnss--iitteerrss
               The maximum number of iterations through CFG to
               extend regions.  0 - disable region extension, N -
               do at most N iterations.  The default value is 0.

           mmaaxx--sscchheedd--iinnssnn--ccoonnfflliicctt--ddeellaayy
               The maximum conflict delay for an insn to be
               considered for speculative motion.  The default
               value is 3.

           sscchheedd--ssppeecc--pprroobb--ccuuttooffff
               The minimal probability of speculation success (in



gcc-4.3.2                   2008-08-27                        127





GCC(1)                         GNU                         GCC(1)


               percents), so that speculative insn will be
               scheduled.  The default value is 40.

           mmaaxx--llaasstt--vvaalluuee--rrttll
               The maximum size measured as number of RTLs that
               can be recorded in an expression in combiner for a
               pseudo register as last known value of that
               register.  The default is 10000.

           iinntteeggeerr--sshhaarree--lliimmiitt
               Small integer constants can use a shared data
               structure, reducing the compiler's memory usage
               and increasing its speed.  This sets the maximum
               value of a shared integer constant.  The default
               value is 256.

           mmiinn--vviirrttuuaall--mmaappppiinnggss
               Specifies the minimum number of virtual mappings
               in the incremental SSA updater that should be
               registered to trigger the virtual mappings
               heuristic defined by virtual-mappings-ratio.  The
               default value is 100.

           vviirrttuuaall--mmaappppiinnggss--rraattiioo
               If the number of virtual mappings is virtual-
               mappings-ratio bigger than the number of virtual
               symbols to be updated, then the incremental SSA
               updater switches to a full update for those
               symbols.  The default ratio is 3.

           sssspp--bbuuffffeerr--ssiizzee
               The minimum size of buffers (i.e. arrays) that
               will receive stack smashing protection when
               --ffssttaacckk--pprrootteeccttiioonn is used.

           mmaaxx--jjuummpp--tthhrreeaadd--dduupplliiccaattiioonn--ssttmmttss
               Maximum number of statements allowed in a block
               that needs to be duplicated when threading jumps.

           mmaaxx--ffiieellddss--ffoorr--ffiieelldd--sseennssiittiivvee
               Maximum number of fields in a structure we will
               treat in a field sensitive manner during pointer
               analysis.  The default is zero for -O0, and -O1
               and 100 for -Os, -O2, and -O3.

           pprreeffeettcchh--llaatteennccyy
               Estimate on average number of instructions that
               are executed before prefetch finishes.  The
               distance we prefetch ahead is proportional to this
               constant.  Increasing this number may also lead to
               less streams being prefetched (see ssiimmuullttaanneeoouuss--
               pprreeffeettcchheess).





gcc-4.3.2                   2008-08-27                        128





GCC(1)                         GNU                         GCC(1)


           ssiimmuullttaanneeoouuss--pprreeffeettcchheess
               Maximum number of prefetches that can run at the
               same time.

           ll11--ccaacchhee--lliinnee--ssiizzee
               The size of cache line in L1 cache, in bytes.

           ll11--ccaacchhee--ssiizzee
               The size of L1 cache, in kilobytes.

           ll22--ccaacchhee--ssiizzee
               The size of L2 cache, in kilobytes.

           uussee--ccaannoonniiccaall--ttyyppeess
               Whether the compiler should use the "canonical"
               type system.  By default, this should always be 1,
               which uses a more efficient internal mechanism for
               comparing types in C++ and Objective-C++.
               However, if bugs in the canonical type system are
               causing compilation failures, set this value to 0
               to disable canonical types.

           mmaaxx--ppaarrttiiaall--aannttiicc--lleennggtthh
               Maximum length of the partial antic set computed
               during the tree partial redundancy elimination
               optimization (--ffttrreeee--pprree) when optimizing at --OO33
               and above.  For some sorts of source code the
               enhanced partial redundancy elimination
               optimization can run away, consuming all of the
               memory available on the host machine.  This
               parameter sets a limit on the length of the sets
               that are computed, which prevents the runaway
               behaviour.  Setting a value of 0 for this paramter
               will allow an unlimited set length.

           ssccccvvnn--mmaaxx--sscccc--ssiizzee
               Maximum size of a strongly connected component
               (SCC) during SCCVN processing.  If this limit is
               hit, SCCVN processing for the whole function will
               not be done and optimizations depending on it will
               be disabled.  The default maximum SCC size is
               10000.

       OOppttiioonnss CCoonnttrroolllliinngg tthhee PPrreepprroocceessssoorr

       These options control the C preprocessor, which is run on
       each C source file before actual compilation.

       If you use the --EE option, nothing is done except
       preprocessing.  Some of these options make sense only
       together with --EE because they cause the preprocessor
       output to be unsuitable for actual compilation.

           You can use --WWpp,,_o_p_t_i_o_n to bypass the compiler driver



gcc-4.3.2                   2008-08-27                        129





GCC(1)                         GNU                         GCC(1)


           and pass _o_p_t_i_o_n directly through to the preprocessor.
           If _o_p_t_i_o_n contains commas, it is split into multiple
           options at the commas.  However, many options are
           modified, translated or interpreted by the compiler
           driver before being passed to the preprocessor, and
           --WWpp forcibly bypasses this phase.  The preprocessor's
           direct interface is undocumented and subject to
           change, so whenever possible you should avoid using
           --WWpp and let the driver handle the options instead.

       --XXpprreepprroocceessssoorr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the preprocessor.  You can
           use this to supply system-specific preprocessor
           options which GCC does not know how to recognize.

           If you want to pass an option that takes an argument,
           you must use --XXpprreepprroocceessssoorr twice, once for the option
           and once for the argument.

       --DD _n_a_m_e
           Predefine _n_a_m_e as a macro, with definition 1.

       --DD _n_a_m_e==_d_e_f_i_n_i_t_i_o_n
           The contents of _d_e_f_i_n_i_t_i_o_n are tokenized and processed
           as if they appeared during translation phase three in
           a ##ddeeffiinnee directive.  In particular, the definition
           will be truncated by embedded newline characters.

           If you are invoking the preprocessor from a shell or
           shell-like program you may need to use the shell's
           quoting syntax to protect characters such as spaces
           that have a meaning in the shell syntax.

           If you wish to define a function-like macro on the
           command line, write its argument list with surrounding
           parentheses before the equals sign (if any).
           Parentheses are meaningful to most shells, so you will
           need to quote the option.  With sshh and ccsshh,
           --DD''_n_a_m_e((_a_r_g_s_._._.))==_d_e_f_i_n_i_t_i_o_n'' works.

           --DD and --UU options are processed in the order they are
           given on the command line.  All --iimmaaccrrooss _f_i_l_e and
           --iinncclluuddee _f_i_l_e options are processed after all --DD and
           --UU options.

       --UU _n_a_m_e
           Cancel any previous definition of _n_a_m_e, either built
           in or provided with a --DD option.

       --uunnddeeff
           Do not predefine any system-specific or GCC-specific
           macros.  The standard predefined macros remain
           defined.




gcc-4.3.2                   2008-08-27                        130





GCC(1)                         GNU                         GCC(1)


       --II _d_i_r
           Add the directory _d_i_r to the list of directories to be
           searched for header files.  Directories named by --II
           are searched before the standard system include
           directories.  If the directory _d_i_r is a standard
           system include directory, the option is ignored to
           ensure that the default search order for system
           directories and the special treatment of system
           headers are not defeated .  If _d_i_r begins with "=",
           then the "=" will be replaced by the sysroot prefix;
           see ----ssyyssrroooott and --iissyyssrroooott.

       --oo _f_i_l_e
           Write output to _f_i_l_e.  This is the same as specifying
           _f_i_l_e as the second non-option argument to ccpppp.  ggcccc
           has a different interpretation of a second non-option
           argument, so you must use --oo to specify the output
           file.

       --WWaallll
           Turns on all optional warnings which are desirable for
           normal code.  At present this is --WWccoommmmeenntt,
           --WWttrriiggrraapphhss, --WWmmuullttiicchhaarr and a warning about integer
           promotion causing a change of sign in "#if"
           expressions.  Note that many of the preprocessor's
           warnings are on by default and have no options to
           control them.

       --WWccoommmmeenntt
       --WWccoommmmeennttss
           Warn whenever a comment-start sequence //** appears in a
           //** comment, or whenever a backslash-newline appears in
           a //// comment.  (Both forms have the same effect.)

       --WWttrriiggrraapphhss
           Most trigraphs in comments cannot affect the meaning
           of the program.  However, a trigraph that would form
           an escaped newline (????// at the end of a line) can, by
           changing where the comment begins or ends.  Therefore,
           only trigraphs that would form escaped newlines
           produce warnings inside a comment.

           This option is implied by --WWaallll.  If --WWaallll is not
           given, this option is still enabled unless trigraphs
           are enabled.  To get trigraph conversion without
           warnings, but get the other --WWaallll warnings, use
           --ttrriiggrraapphhss --WWaallll --WWnnoo--ttrriiggrraapphhss.

       --WWttrraaddiittiioonnaall
           Warn about certain constructs that behave differently
           in traditional and ISO C.  Also warn about ISO C
           constructs that have no traditional C equivalent, and
           problematic constructs which should be avoided.




gcc-4.3.2                   2008-08-27                        131





GCC(1)                         GNU                         GCC(1)


       --WWiimmppoorrtt
           Warn the first time ##iimmppoorrtt is used.

       --WWuunnddeeff
           Warn whenever an identifier which is not a macro is
           encountered in an ##iiff directive, outside of ddeeffiinneedd.
           Such identifiers are replaced with zero.

       --WWuunnuusseedd--mmaaccrrooss
           Warn about macros defined in the main file that are
           unused.  A macro is _u_s_e_d if it is expanded or tested
           for existence at least once.  The preprocessor will
           also warn if the macro has not been used at the time
           it is redefined or undefined.

           Built-in macros, macros defined on the command line,
           and macros defined in include files are not warned
           about.

           _N_o_t_e_: If a macro is actually used, but only used in
           skipped conditional blocks, then CPP will report it as
           unused.  To avoid the warning in such a case, you
           might improve the scope of the macro's definition by,
           for example, moving it into the first skipped block.
           Alternatively, you could provide a dummy use with
           something like:

                   #if defined the_macro_causing_the_warning
                   #endif

       --WWeennddiiff--llaabbeellss
           Warn whenever an ##eellssee or an ##eennddiiff are followed by
           text.  This usually happens in code of the form

                   #if FOO
                   ...
                   #else FOO
                   ...
                   #endif FOO

           The second and third "FOO" should be in comments, but
           often are not in older programs.  This warning is on
           by default.

       --WWeerrrroorr
           Make all warnings into hard errors.  Source code which
           triggers warnings will be rejected.

       --WWssyysstteemm--hheeaaddeerrss
           Issue warnings for code in system headers.  These are
           normally unhelpful in finding bugs in your own code,
           therefore suppressed.  If you are responsible for the
           system library, you may want to see them.




gcc-4.3.2                   2008-08-27                        132





GCC(1)                         GNU                         GCC(1)


       --ww  Suppress all warnings, including those which GNU CPP
           issues by default.

       --ppeeddaannttiicc
           Issue all the mandatory diagnostics listed in the C
           standard.  Some of them are left out by default, since
           they trigger frequently on harmless code.

       --ppeeddaannttiicc--eerrrroorrss
           Issue all the mandatory diagnostics, and make all
           mandatory diagnostics into errors.  This includes
           mandatory diagnostics that GCC issues without
           --ppeeddaannttiicc but treats as warnings.

       --MM  Instead of outputting the result of preprocessing,
           output a rule suitable for mmaakkee describing the
           dependencies of the main source file.  The
           preprocessor outputs one mmaakkee rule containing the
           object file name for that source file, a colon, and
           the names of all the included files, including those
           coming from --iinncclluuddee or --iimmaaccrrooss command line options.

           Unless specified explicitly (with --MMTT or --MMQQ), the
           object file name consists of the name of the source
           file with any suffix replaced with object file suffix
           and with any leading directory parts removed.  If
           there are many included files then the rule is split
           into several lines using \\-newline.  The rule has no
           commands.

           This option does not suppress the preprocessor's debug
           output, such as --ddMM.  To avoid mixing such debug
           output with the dependency rules you should explicitly
           specify the dependency output file with --MMFF, or use an
           environment variable like DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT.  Debug
           output will still be sent to the regular output stream
           as normal.

           Passing --MM to the driver implies --EE, and suppresses
           warnings with an implicit --ww.

       --MMMM Like --MM but do not mention header files that are found
           in system header directories, nor header files that
           are included, directly or indirectly, from such a
           header.

           This implies that the choice of angle brackets or
           double quotes in an ##iinncclluuddee directive does not in
           itself determine whether that header will appear in
           --MMMM dependency output.  This is a slight change in
           semantics from GCC versions 3.0 and earlier.

       --MMFF _f_i_l_e
           When used with --MM or --MMMM, specifies a file to write



gcc-4.3.2                   2008-08-27                        133





GCC(1)                         GNU                         GCC(1)


           the dependencies to.  If no --MMFF switch is given the
           preprocessor sends the rules to the same place it
           would have sent preprocessed output.

           When used with the driver options --MMDD or --MMMMDD, --MMFF
           overrides the default dependency output file.

       --MMGG In conjunction with an option such as --MM requesting
           dependency generation, --MMGG assumes missing header
           files are generated files and adds them to the
           dependency list without raising an error.  The
           dependency filename is taken directly from the
           "#include" directive without prepending any path.  --MMGG
           also suppresses preprocessed output, as a missing
           header file renders this useless.

           This feature is used in automatic updating of
           makefiles.

       --MMPP This option instructs CPP to add a phony target for
           each dependency other than the main file, causing each
           to depend on nothing.  These dummy rules work around
           errors mmaakkee gives if you remove header files without
           updating the _M_a_k_e_f_i_l_e to match.

           This is typical output:

                   test.o: test.c test.h

                   test.h:

       --MMTT _t_a_r_g_e_t
           Change the target of the rule emitted by dependency
           generation.  By default CPP takes the name of the main
           input file, deletes any directory components and any
           file suffix such as ..cc, and appends the platform's
           usual object suffix.  The result is the target.

           An --MMTT option will set the target to be exactly the
           string you specify.  If you want multiple targets, you
           can specify them as a single argument to --MMTT, or use
           multiple --MMTT options.

           For example, --MMTT ''$$((oobbjjppffxx))ffoooo..oo'' might give

                   $(objpfx)foo.o: foo.c

       --MMQQ _t_a_r_g_e_t
           Same as --MMTT, but it quotes any characters which are
           special to Make.  --MMQQ ''$$((oobbjjppffxx))ffoooo..oo'' gives

                   $$(objpfx)foo.o: foo.c

           The default target is automatically quoted, as if it



gcc-4.3.2                   2008-08-27                        134





GCC(1)                         GNU                         GCC(1)


           were given with --MMQQ.

       --MMDD --MMDD is equivalent to --MM --MMFF _f_i_l_e, except that --EE is
           not implied.  The driver determines _f_i_l_e based on
           whether an --oo option is given.  If it is, the driver
           uses its argument but with a suffix of _._d, otherwise
           it takes the name of the input file, removes any
           directory components and suffix, and applies a _._d
           suffix.

           If --MMDD is used in conjunction with --EE, any --oo switch
           is understood to specify the dependency output file,
           but if used without --EE, each --oo is understood to
           specify a target object file.

           Since --EE is not implied, --MMDD can be used to generate a
           dependency output file as a side-effect of the
           compilation process.

       --MMMMDD
           Like --MMDD except mention only user header files, not
           system header files.

       --ffppcchh--ddeeppss
           When using precompiled headers, this flag will cause
           the dependency-output flags to also list the files
           from the precompiled header's dependencies.  If not
           specified only the precompiled header would be listed
           and not the files that were used to create it because
           those files are not consulted when a precompiled
           header is used.

       --ffppcchh--pprreepprroocceessss
           This option allows use of a precompiled header
           together with --EE.  It inserts a special "#pragma",
           "#pragma GCC pch_preprocess "<filename>"" in the
           output to mark the place where the precompiled header
           was found, and its filename.  When --ffpprreepprroocceesssseedd is
           in use, GCC recognizes this "#pragma" and loads the
           PCH.

           This option is off by default, because the resulting
           preprocessed output is only really suitable as input
           to GCC.  It is switched on by --ssaavvee--tteemmppss.

           You should not write this "#pragma" in your own code,
           but it is safe to edit the filename if the PCH file is
           available in a different location.  The filename may
           be absolute or it may be relative to GCC's current
           directory.

       --xx cc
       --xx cc++++




gcc-4.3.2                   2008-08-27                        135





GCC(1)                         GNU                         GCC(1)


       --xx oobbjjeeccttiivvee--cc
       --xx aasssseemmbblleerr--wwiitthh--ccpppp
           Specify the source language: C, C++, Objective-C, or
           assembly.  This has nothing to do with standards
           conformance or extensions; it merely selects which
           base syntax to expect.  If you give none of these
           options, cpp will deduce the language from the
           extension of the source file: ..cc, ..cccc, ..mm, or ..SS.
           Some other common extensions for C++ and assembly are
           also recognized.  If cpp does not recognize the
           extension, it will treat the file as C; this is the
           most generic mode.

           _N_o_t_e_: Previous versions of cpp accepted a --llaanngg option
           which selected both the language and the standards
           conformance level.  This option has been removed,
           because it conflicts with the --ll option.

       --ssttdd==_s_t_a_n_d_a_r_d
       --aannssii
           Specify the standard to which the code should conform.
           Currently CPP knows about C and C++ standards; others
           may be added in the future.

           _s_t_a_n_d_a_r_d may be one of:

           "iso9899:1990"
           "c89"
               The ISO C standard from 1990.  cc8899 is the
               customary shorthand for this version of the
               standard.

               The --aannssii option is equivalent to --ssttdd==cc8899.

           "iso9899:199409"
               The 1990 C standard, as amended in 1994.

           "iso9899:1999"
           "c99"
           "iso9899:199x"
           "c9x"
               The revised ISO C standard, published in December
               1999.  Before publication, this was known as C9X.

           "gnu89"
               The 1990 C standard plus GNU extensions.  This is
               the default.

           "gnu99"
           "gnu9x"
               The 1999 C standard plus GNU extensions.

           "c++98"
               The 1998 ISO C++ standard plus amendments.



gcc-4.3.2                   2008-08-27                        136





GCC(1)                         GNU                         GCC(1)


           "gnu++98"
               The same as --ssttdd==cc++++9988 plus GNU extensions.  This
               is the default for C++ code.

       --II-- Split the include path.  Any directories specified
           with --II options before --II-- are searched only for
           headers requested with "#include "file""; they are not
           searched for "#include <file>".  If additional
           directories are specified with --II options after the
           --II--, those directories are searched for all ##iinncclluuddee
           directives.

           In addition, --II-- inhibits the use of the directory of
           the current file directory as the first search
           directory for "#include "file"".  This option has been
           deprecated.

       --nnoossttddiinncc
           Do not search the standard system directories for
           header files.  Only the directories you have specified
           with --II options (and the directory of the current
           file, if appropriate) are searched.

       --nnoossttddiinncc++++
           Do not search for header files in the C++-specific
           standard directories, but do still search the other
           standard directories.  (This option is used when
           building the C++ library.)

       --iinncclluuddee _f_i_l_e
           Process _f_i_l_e as if "#include "file"" appeared as the
           first line of the primary source file.  However, the
           first directory searched for _f_i_l_e is the
           preprocessor's working directory _i_n_s_t_e_a_d _o_f the
           directory containing the main source file.  If not
           found there, it is searched for in the remainder of
           the "#include "..."" search chain as normal.

           If multiple --iinncclluuddee options are given, the files are
           included in the order they appear on the command line.

       --iimmaaccrrooss _f_i_l_e
           Exactly like --iinncclluuddee, except that any output produced
           by scanning _f_i_l_e is thrown away.  Macros it defines
           remain defined.  This allows you to acquire all the
           macros from a header without also processing its
           declarations.

           All files specified by --iimmaaccrrooss are processed before
           all files specified by --iinncclluuddee.

       --iiddiirraafftteerr _d_i_r
           Search _d_i_r for header files, but do it _a_f_t_e_r all
           directories specified with --II and the standard system



gcc-4.3.2                   2008-08-27                        137





GCC(1)                         GNU                         GCC(1)


           directories have been exhausted.  _d_i_r is treated as a
           system include directory.  If _d_i_r begins with "=",
           then the "=" will be replaced by the sysroot prefix;
           see ----ssyyssrroooott and --iissyyssrroooott.

       --iipprreeffiixx _p_r_e_f_i_x
           Specify _p_r_e_f_i_x as the prefix for subsequent
           --iiwwiitthhpprreeffiixx options.  If the prefix represents a
           directory, you should include the final //.

       --iiwwiitthhpprreeffiixx _d_i_r
       --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r
           Append _d_i_r to the prefix specified previously with
           --iipprreeffiixx, and add the resulting directory to the
           include search path.  --iiwwiitthhpprreeffiixxbbeeffoorree puts it in
           the same place --II would; --iiwwiitthhpprreeffiixx puts it where
           --iiddiirraafftteerr would.

       --iissyyssrroooott _d_i_r
           This option is like the ----ssyyssrroooott option, but applies
           only to header files.  See the ----ssyyssrroooott option for
           more information.

       --iimmuullttiilliibb _d_i_r
           Use _d_i_r as a subdirectory of the directory containing
           target-specific C++ headers.

       --iissyysstteemm _d_i_r
           Search _d_i_r for header files, after all directories
           specified by --II but before the standard system
           directories.  Mark it as a system directory, so that
           it gets the same special treatment as is applied to
           the standard system directories.  If _d_i_r begins with
           "=", then the "=" will be replaced by the sysroot
           prefix; see ----ssyyssrroooott and --iissyyssrroooott.

       --iiqquuoottee _d_i_r
           Search _d_i_r only for header files requested with
           "#include "file""; they are not searched for
           "#include <file>", before all directories specified by
           --II and before the standard system directories.  If _d_i_r
           begins with "=", then the "=" will be replaced by the
           sysroot prefix; see ----ssyyssrroooott and --iissyyssrroooott.

       --ffddiirreeccttiivveess--oonnllyy
           When preprocessing, handle directives, but do not
           expand macros.

           The option's behavior depends on the --EE and
           --ffpprreepprroocceesssseedd options.

           With --EE, preprocessing is limited to the handling of
           directives such as "#define", "#ifdef", and "#error".
           Other preprocessor operations, such as macro expansion



gcc-4.3.2                   2008-08-27                        138





GCC(1)                         GNU                         GCC(1)


           and trigraph conversion are not performed.  In
           addition, the --ddDD option is implicitly enabled.

           With --ffpprreepprroocceesssseedd, predefinition of command line and
           most builtin macros is disabled.  Macros such as
           "__LINE__", which are contextually dependent, are
           handled normally.  This enables compilation of files
           previously preprocessed with "-E -fdirectives-only".

           With both --EE and --ffpprreepprroocceesssseedd, the rules for
           --ffpprreepprroocceesssseedd take precedence.  This enables full
           preprocessing of files previously preprocessed with
           "-E -fdirectives-only".

       --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss
           Accept $$ in identifiers.

       --ffeexxtteennddeedd--iiddeennttiiffiieerrss
           Accept universal character names in identifiers.  This
           option is experimental; in a future version of GCC, it
           will be enabled by default for C99 and C++.

       --ffpprreepprroocceesssseedd
           Indicate to the preprocessor that the input file has
           already been preprocessed.  This suppresses things
           like macro expansion, trigraph conversion, escaped
           newline splicing, and processing of most directives.
           The preprocessor still recognizes and removes
           comments, so that you can pass a file preprocessed
           with --CC to the compiler without problems.  In this
           mode the integrated preprocessor is little more than a
           tokenizer for the front ends.

           --ffpprreepprroocceesssseedd is implicit if the input file has one
           of the extensions ..ii, ..iiii or ..mmii.  These are the
           extensions that GCC uses for preprocessed files
           created by --ssaavvee--tteemmppss.

       --ffttaabbssttoopp==_w_i_d_t_h
           Set the distance between tab stops.  This helps the
           preprocessor report correct column numbers in warnings
           or errors, even if tabs appear on the line.  If the
           value is less than 1 or greater than 100, the option
           is ignored.  The default is 8.

       --ffeexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the execution character set, used for string and
           character constants.  The default is UTF-8.  _c_h_a_r_s_e_t
           can be any encoding supported by the system's "iconv"
           library routine.

       --ffwwiiddee--eexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the wide execution character set, used for wide
           string and character constants.  The default is UTF-32



gcc-4.3.2                   2008-08-27                        139





GCC(1)                         GNU                         GCC(1)


           or UTF-16, whichever corresponds to the width of
           "wchar_t".  As with --ffeexxeecc--cchhaarrsseett, _c_h_a_r_s_e_t can be any
           encoding supported by the system's "iconv" library
           routine; however, you will have problems with
           encodings that do not fit exactly in "wchar_t".

       --ffiinnppuutt--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the input character set, used for translation from
           the character set of the input file to the source
           character set used by GCC.  If the locale does not
           specify, or GCC cannot get this information from the
           locale, the default is UTF-8.  This can be overridden
           by either the locale or this command line option.
           Currently the command line option takes precedence if
           there's a conflict.  _c_h_a_r_s_e_t can be any encoding
           supported by the system's "iconv" library routine.

       --ffwwoorrkkiinngg--ddiirreeccttoorryy
           Enable generation of linemarkers in the preprocessor
           output that will let the compiler know the current
           working directory at the time of preprocessing.  When
           this option is enabled, the preprocessor will emit,
           after the initial linemarker, a second linemarker with
           the current working directory followed by two slashes.
           GCC will use this directory, when it's present in the
           preprocessed input, as the directory emitted as the
           current working directory in some debugging
           information formats.  This option is implicitly
           enabled if debugging information is enabled, but this
           can be inhibited with the negated form
           --ffnnoo--wwoorrkkiinngg--ddiirreeccttoorryy.  If the --PP flag is present in
           the command line, this option has no effect, since no
           "#line" directives are emitted whatsoever.

       --ffnnoo--sshhooww--ccoolluummnn
           Do not print column numbers in diagnostics.  This may
           be necessary if diagnostics are being scanned by a
           program that does not understand the column numbers,
           such as ddeejjaaggnnuu.

       --AA _p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
           Make an assertion with the predicate _p_r_e_d_i_c_a_t_e and
           answer _a_n_s_w_e_r.  This form is preferred to the older
           form --AA _p_r_e_d_i_c_a_t_e((_a_n_s_w_e_r)), which is still supported,
           because it does not use shell special characters.

       --AA --_p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
           Cancel an assertion with the predicate _p_r_e_d_i_c_a_t_e and
           answer _a_n_s_w_e_r.

       --ddCCHHAARRSS
           _C_H_A_R_S is a sequence of one or more of the following
           characters, and must not be preceded by a space.
           Other characters are interpreted by the compiler



gcc-4.3.2                   2008-08-27                        140





GCC(1)                         GNU                         GCC(1)


           proper, or reserved for future versions of GCC, and so
           are silently ignored.  If you specify characters whose
           behavior conflicts, the result is undefined.

           MM   Instead of the normal output, generate a list of
               ##ddeeffiinnee directives for all the macros defined
               during the execution of the preprocessor,
               including predefined macros.  This gives you a way
               of finding out what is predefined in your version
               of the preprocessor.  Assuming you have no file
               _f_o_o_._h, the command

                       touch foo.h; cpp -dM foo.h

               will show all the predefined macros.

               If you use --ddMM without the --EE option, --ddMM is
               interpreted as a synonym for --ffdduummpp--rrttll--mmaacchh.

           DD   Like MM except in two respects: it does _n_o_t include
               the predefined macros, and it outputs _b_o_t_h the
               ##ddeeffiinnee directives and the result of
               preprocessing.  Both kinds of output go to the
               standard output file.

           NN   Like DD, but emit only the macro names, not their
               expansions.

           II   Output ##iinncclluuddee directives in addition to the
               result of preprocessing.

       --PP  Inhibit generation of linemarkers in the output from
           the preprocessor.  This might be useful when running
           the preprocessor on something that is not C code, and
           will be sent to a program which might be confused by
           the linemarkers.

       --CC  Do not discard comments.  All comments are passed
           through to the output file, except for comments in
           processed directives, which are deleted along with the
           directive.

           You should be prepared for side effects when using --CC;
           it causes the preprocessor to treat comments as tokens
           in their own right.  For example, comments appearing
           at the start of what would be a directive line have
           the effect of turning that line into an ordinary
           source line, since the first token on the line is no
           longer a ##.

       --CCCC Do not discard comments, including during macro
           expansion.  This is like --CC, except that comments
           contained within macros are also passed through to the
           output file where the macro is expanded.



gcc-4.3.2                   2008-08-27                        141





GCC(1)                         GNU                         GCC(1)


           In addition to the side-effects of the --CC option, the
           --CCCC option causes all C++-style comments inside a
           macro to be converted to C-style comments.  This is to
           prevent later use of that macro from inadvertently
           commenting out the remainder of the source line.

           The --CCCC option is generally used to support lint
           comments.

       --ttrraaddiittiioonnaall--ccpppp
           Try to imitate the behavior of old-fashioned C
           preprocessors, as opposed to ISO C preprocessors.

       --ttrriiggrraapphhss
           Process trigraph sequences.  These are three-character
           sequences, all starting with ????, that are defined by
           ISO C to stand for single characters.  For example,
           ????// stands for \\, so ''????//nn'' is a character constant
           for a newline.  By default, GCC ignores trigraphs, but
           in standard-conforming modes it converts them.  See
           the --ssttdd and --aannssii options.

           The nine trigraphs and their replacements are

                   Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-
                   Replacement:      [    ]    {    }    #    \    ^    |    ~

       --rreemmaapp
           Enable special code to work around file systems which
           only permit very short file names, such as MS-DOS.

       ----hheellpp
       ----ttaarrggeett--hheellpp
           Print text describing all the command line options
           instead of preprocessing anything.

       --vv  Verbose mode.  Print out GNU CPP's version number at
           the beginning of execution, and report the final form
           of the include path.

       --HH  Print the name of each header file used, in addition
           to other normal activities.  Each name is indented to
           show how deep in the ##iinncclluuddee stack it is.
           Precompiled header files are also printed, even if
           they are found to be invalid; an invalid precompiled
           header file is printed with ......xx and a valid one with
           ......!! .

       --vveerrssiioonn
       ----vveerrssiioonn
           Print out GNU CPP's version number.  With one dash,
           proceed to preprocess as normal.  With two dashes,
           exit immediately.




gcc-4.3.2                   2008-08-27                        142





GCC(1)                         GNU                         GCC(1)


       PPaassssiinngg OOppttiioonnss ttoo tthhee AAsssseemmbblleerr

       You can pass options to the assembler.

       --WWaa,,_o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the assembler.  If _o_p_t_i_o_n
           contains commas, it is split into multiple options at
           the commas.

       --XXaasssseemmbblleerr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the assembler.  You can
           use this to supply system-specific assembler options
           which GCC does not know how to recognize.

           If you want to pass an option that takes an argument,
           you must use --XXaasssseemmbblleerr twice, once for the option
           and once for the argument.

       OOppttiioonnss ffoorr LLiinnkkiinngg

       These options come into play when the compiler links
       object files into an executable output file.  They are
       meaningless if the compiler is not doing a link step.

       _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e
           A file name that does not end in a special recognized
           suffix is considered to name an object file or
           library.  (Object files are distinguished from
           libraries by the linker according to the file
           contents.)  If linking is done, these object files are
           used as input to the linker.

       --cc
       --SS
       --EE  If any of these options is used, then the linker is
           not run, and object file names should not be used as
           arguments.

       --ll_l_i_b_r_a_r_y
       --ll _l_i_b_r_a_r_y
           Search the library named _l_i_b_r_a_r_y when linking.  (The
           second alternative with the library as a separate
           argument is only for POSIX compliance and is not
           recommended.)

           It makes a difference where in the command you write
           this option; the linker searches and processes
           libraries and object files in the order they are
           specified.  Thus, ffoooo..oo --llzz bbaarr..oo searches library zz
           after file _f_o_o_._o but before _b_a_r_._o.  If _b_a_r_._o refers to
           functions in zz, those functions may not be loaded.

           The linker searches a standard list of directories for
           the library, which is actually a file named



gcc-4.3.2                   2008-08-27                        143





GCC(1)                         GNU                         GCC(1)


           _l_i_b_l_i_b_r_a_r_y_._a.  The linker then uses this file as if it
           had been specified precisely by name.

           The directories searched include several standard
           system directories plus any that you specify with --LL.

           Normally the files found this way are library
           files---archive files whose members are object files.
           The linker handles an archive file by scanning through
           it for members which define symbols that have so far
           been referenced but not defined.  But if the file that
           is found is an ordinary object file, it is linked in
           the usual fashion.  The only difference between using
           an --ll option and specifying a file name is that --ll
           surrounds _l_i_b_r_a_r_y with lliibb and ..aa and searches several
           directories.

       --lloobbjjcc
           You need this special case of the --ll option in order
           to link an Objective-C or Objective-C++ program.

       --nnoossttaarrttffiilleess
           Do not use the standard system startup files when
           linking.  The standard system libraries are used
           normally, unless --nnoossttddlliibb or --nnooddeeffaauullttlliibbss is used.

       --nnooddeeffaauullttlliibbss
           Do not use the standard system libraries when linking.
           Only the libraries you specify will be passed to the
           linker.  The standard startup files are used normally,
           unless --nnoossttaarrttffiilleess is used.  The compiler may
           generate calls to "memcmp", "memset", "memcpy" and
           "memmove".  These entries are usually resolved by
           entries in libc.  These entry points should be
           supplied through some other mechanism when this option
           is specified.

       --nnoossttddlliibb
           Do not use the standard system startup files or
           libraries when linking.  No startup files and only the
           libraries you specify will be passed to the linker.
           The compiler may generate calls to "memcmp", "memset",
           "memcpy" and "memmove".  These entries are usually
           resolved by entries in libc.  These entry points
           should be supplied through some other mechanism when
           this option is specified.

           One of the standard libraries bypassed by --nnoossttddlliibb
           and --nnooddeeffaauullttlliibbss is _l_i_b_g_c_c_._a, a library of internal
           subroutines that GCC uses to overcome shortcomings of
           particular machines, or special needs for some
           languages.

           In most cases, you need _l_i_b_g_c_c_._a even when you want to



gcc-4.3.2                   2008-08-27                        144





GCC(1)                         GNU                         GCC(1)


           avoid other standard libraries.  In other words, when
           you specify --nnoossttddlliibb or --nnooddeeffaauullttlliibbss you should
           usually specify --llggcccc as well.  This ensures that you
           have no unresolved references to internal GCC library
           subroutines.  (For example, ____mmaaiinn, used to ensure C++
           constructors will be called.)

       --ppiiee
           Produce a position independent executable on targets
           which support it.  For predictable results, you must
           also specify the same set of options that were used to
           generate code (--ffppiiee, --ffPPIIEE, or model suboptions) when
           you specify this option.

       --rrddyynnaammiicc
           Pass the flag --eexxppoorrtt--ddyynnaammiicc to the ELF linker, on
           targets that support it. This instructs the linker to
           add all symbols, not only used ones, to the dynamic
           symbol table. This option is needed for some uses of
           "dlopen" or to allow obtaining backtraces from within
           a program.

       --ss  Remove all symbol table and relocation information
           from the executable.

       --ssttaattiicc
           On systems that support dynamic linking, this prevents
           linking with the shared libraries.  On other systems,
           this option has no effect.

       --sshhaarreedd
           Produce a shared object which can then be linked with
           other objects to form an executable.  Not all systems
           support this option.  For predictable results, you
           must also specify the same set of options that were
           used to generate code (--ffppiicc, --ffPPIICC, or model
           suboptions) when you specify this option.[1]

       --sshhaarreedd--lliibbggcccc
       --ssttaattiicc--lliibbggcccc
           On systems that provide _l_i_b_g_c_c as a shared library,
           these options force the use of either the shared or
           static version respectively.  If no shared version of
           _l_i_b_g_c_c was built when the compiler was configured,
           these options have no effect.

           There are several situations in which an application
           should use the shared _l_i_b_g_c_c instead of the static
           version.  The most common of these is when the
           application wishes to throw and catch exceptions
           across different shared libraries.  In that case, each
           of the libraries as well as the application itself
           should use the shared _l_i_b_g_c_c.




gcc-4.3.2                   2008-08-27                        145





GCC(1)                         GNU                         GCC(1)


           Therefore, the G++ and GCJ drivers automatically add
           --sshhaarreedd--lliibbggcccc whenever you build a shared library or
           a main executable, because C++ and Java programs
           typically use exceptions, so this is the right thing
           to do.

           If, instead, you use the GCC driver to create shared
           libraries, you may find that they will not always be
           linked with the shared _l_i_b_g_c_c.  If GCC finds, at its
           configuration time, that you have a non-GNU linker or
           a GNU linker that does not support option
           ----eehh--ffrraammee--hhddrr, it will link the shared version of
           _l_i_b_g_c_c into shared libraries by default.  Otherwise,
           it will take advantage of the linker and optimize away
           the linking with the shared version of _l_i_b_g_c_c, linking
           with the static version of libgcc by default.  This
           allows exceptions to propagate through such shared
           libraries, without incurring relocation costs at
           library load time.

           However, if a library or main executable is supposed
           to throw or catch exceptions, you must link it using
           the G++ or GCJ driver, as appropriate for the
           languages used in the program, or using the option
           --sshhaarreedd--lliibbggcccc, such that it is linked with the shared
           _l_i_b_g_c_c.

       --ssyymmbboolliicc
           Bind references to global symbols when building a
           shared object.  Warn about any unresolved references
           (unless overridden by the link editor option --XXlliinnkkeerr
           --zz --XXlliinnkkeerr ddeeffss).  Only a few systems support this
           option.

       --XXlliinnkkeerr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the linker.  You can use
           this to supply system-specific linker options which
           GCC does not know how to recognize.

           If you want to pass an option that takes an argument,
           you must use --XXlliinnkkeerr twice, once for the option and
           once for the argument.  For example, to pass --aasssseerrtt
           ddeeffiinniittiioonnss, you must write --XXlliinnkkeerr --aasssseerrtt --XXlliinnkkeerr
           ddeeffiinniittiioonnss.  It does not work to write --XXlliinnkkeerr
           ""--aasssseerrtt ddeeffiinniittiioonnss"", because this passes the entire
           string as a single argument, which is not what the
           linker expects.

       --WWll,,_o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the linker.  If _o_p_t_i_o_n
           contains commas, it is split into multiple options at
           the commas.





gcc-4.3.2                   2008-08-27                        146





GCC(1)                         GNU                         GCC(1)


       --uu _s_y_m_b_o_l
           Pretend the symbol _s_y_m_b_o_l is undefined, to force
           linking of library modules to define it.  You can use
           --uu multiple times with different symbols to force
           loading of additional library modules.

       OOppttiioonnss ffoorr DDiirreeccttoorryy SSeeaarrcchh

       These options specify directories to search for header
       files, for libraries and for parts of the compiler:

       --II_d_i_r
           Add the directory _d_i_r to the head of the list of
           directories to be searched for header files.  This can
           be used to override a system header file, substituting
           your own version, since these directories are searched
           before the system header file directories.  However,
           you should not use this option to add directories that
           contain vendor-supplied system header files (use
           --iissyysstteemm for that).  If you use more than one --II
           option, the directories are scanned in left-to-right
           order; the standard system directories come after.

           If a standard system include directory, or a directory
           specified with --iissyysstteemm, is also specified with --II,
           the --II option will be ignored.  The directory will
           still be searched but as a system directory at its
           normal position in the system include chain.  This is
           to ensure that GCC's procedure to fix buggy system
           headers and the ordering for the include_next
           directive are not inadvertently changed.  If you
           really need to change the search order for system
           directories, use the --nnoossttddiinncc and/or --iissyysstteemm
           options.

       --iiqquuoottee_d_i_r
           Add the directory _d_i_r to the head of the list of
           directories to be searched for header files only for
           the case of ##iinncclluuddee ""_f_i_l_e""; they are not searched for
           ##iinncclluuddee <<_f_i_l_e>>, otherwise just like --II.

       --LL_d_i_r
           Add directory _d_i_r to the list of directories to be
           searched for --ll.

       --BB_p_r_e_f_i_x
           This option specifies where to find the executables,
           libraries, include files, and data files of the
           compiler itself.

           The compiler driver program runs one or more of the
           subprograms _c_p_p, _c_c_1, _a_s and _l_d.  It tries _p_r_e_f_i_x as a
           prefix for each program it tries to run, both with and
           without _m_a_c_h_i_n_e//_v_e_r_s_i_o_n//.



gcc-4.3.2                   2008-08-27                        147





GCC(1)                         GNU                         GCC(1)


           For each subprogram to be run, the compiler driver
           first tries the --BB prefix, if any.  If that name is
           not found, or if --BB was not specified, the driver
           tries two standard prefixes, which are _/_u_s_r_/_l_i_b_/_g_c_c_/
           and _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_g_c_c_/.  If neither of those results
           in a file name that is found, the unmodified program
           name is searched for using the directories specified
           in your PPAATTHH environment variable.

           The compiler will check to see if the path provided by
           the --BB refers to a directory, and if necessary it will
           add a directory separator character at the end of the
           path.

           --BB prefixes that effectively specify directory names
           also apply to libraries in the linker, because the
           compiler translates these options into --LL options for
           the linker.  They also apply to includes files in the
           preprocessor, because the compiler translates these
           options into --iissyysstteemm options for the preprocessor.
           In this case, the compiler appends iinncclluuddee to the
           prefix.

           The run-time support file _l_i_b_g_c_c_._a can also be
           searched for using the --BB prefix, if needed.  If it is
           not found there, the two standard prefixes above are
           tried, and that is all.  The file is left out of the
           link if it is not found by those means.

           Another way to specify a prefix much like the --BB
           prefix is to use the environment variable
           GGCCCC__EEXXEECC__PPRREEFFIIXX.

           As a special kludge, if the path provided by --BB is
           _[_d_i_r_/_]_s_t_a_g_e_N_/, where _N is a number in the range 0 to
           9, then it will be replaced by _[_d_i_r_/_]_i_n_c_l_u_d_e.  This is
           to help with boot-strapping the compiler.

       --ssppeeccss==_f_i_l_e
           Process _f_i_l_e after the compiler reads in the standard
           _s_p_e_c_s file, in order to override the defaults that the
           _g_c_c driver program uses when determining what switches
           to pass to _c_c_1, _c_c_1_p_l_u_s, _a_s, _l_d, etc.  More than one
           --ssppeeccss==_f_i_l_e can be specified on the command line, and
           they are processed in order, from left to right.

       ----ssyyssrroooott==_d_i_r
           Use _d_i_r as the logical root directory for headers and
           libraries.  For example, if the compiler would
           normally search for headers in _/_u_s_r_/_i_n_c_l_u_d_e and
           libraries in _/_u_s_r_/_l_i_b, it will instead search
           _d_i_r_/_u_s_r_/_i_n_c_l_u_d_e and _d_i_r_/_u_s_r_/_l_i_b.

           If you use both this option and the --iissyyssrroooott option,



gcc-4.3.2                   2008-08-27                        148





GCC(1)                         GNU                         GCC(1)


           then the ----ssyyssrroooott option will apply to libraries, but
           the --iissyyssrroooott option will apply to header files.

           The GNU linker (beginning with version 2.16) has the
           necessary support for this option.  If your linker
           does not support this option, the header file aspect
           of ----ssyyssrroooott will still work, but the library aspect
           will not.

       --II-- This option has been deprecated.  Please use --iiqquuoottee
           instead for --II directories before the --II-- and remove
           the --II--.  Any directories you specify with --II options
           before the --II-- option are searched only for the case
           of ##iinncclluuddee ""_f_i_l_e""; they are not searched for ##iinncclluuddee
           <<_f_i_l_e>>.

           If additional directories are specified with --II
           options after the --II--, these directories are searched
           for all ##iinncclluuddee directives.  (Ordinarily _a_l_l --II
           directories are used this way.)

           In addition, the --II-- option inhibits the use of the
           current directory (where the current input file came
           from) as the first search directory for ##iinncclluuddee
           ""_f_i_l_e"".  There is no way to override this effect of
           --II--.  With --II.. you can specify searching the directory
           which was current when the compiler was invoked.  That
           is not exactly the same as what the preprocessor does
           by default, but it is often satisfactory.

           --II-- does not inhibit the use of the standard system
           directories for header files.  Thus, --II-- and --nnoossttddiinncc
           are independent.

       SSppeecciiffyyiinngg TTaarrggeett MMaacchhiinnee aanndd CCoommppiilleerr VVeerrssiioonn

       The usual way to run GCC is to run the executable called
       _g_c_c, or _<_m_a_c_h_i_n_e_>_-_g_c_c when cross-compiling, or
       _<_m_a_c_h_i_n_e_>_-_g_c_c_-_<_v_e_r_s_i_o_n_> to run a version other than the
       one that was installed last.  Sometimes this is
       inconvenient, so GCC provides options that will switch to
       another cross-compiler or version.

       --bb _m_a_c_h_i_n_e
           The argument _m_a_c_h_i_n_e specifies the target machine for
           compilation.

           The value to use for _m_a_c_h_i_n_e is the same as was
           specified as the machine type when configuring GCC as
           a cross-compiler.  For example, if a cross-compiler
           was configured with ccoonnffiigguurree aarrmm--eellff, meaning to
           compile for an arm processor with elf binaries, then
           you would specify --bb aarrmm--eellff to run that cross
           compiler.  Because there are other options beginning



gcc-4.3.2                   2008-08-27                        149





GCC(1)                         GNU                         GCC(1)


           with --bb, the configuration must contain a hyphen.

       --VV _v_e_r_s_i_o_n
           The argument _v_e_r_s_i_o_n specifies which version of GCC to
           run.  This is useful when multiple versions are
           installed.  For example, _v_e_r_s_i_o_n might be 44..00, meaning
           to run GCC version 4.0.

       The --VV and --bb options work by running the
       _<_m_a_c_h_i_n_e_>_-_g_c_c_-_<_v_e_r_s_i_o_n_> executable, so there's no real
       reason to use them if you can just run that directly.

       HHaarrddwwaarree MMooddeellss aanndd CCoonnffiigguurraattiioonnss

       Earlier we discussed the standard option --bb which chooses
       among different installed compilers for completely
       different target machines, such as VAX vs. 68000 vs.
       80386.

       In addition, each of these target machine types can have
       its own special options, starting with --mm, to choose among
       various hardware models or configurations---for example,
       68010 vs 68020, floating coprocessor or none.  A single
       installed version of the compiler can compile for any
       model or configuration, according to the options
       specified.

       Some configurations of the compiler also support
       additional special options, usually for compatibility with
       other compilers on the same platform.

       _A_R_C _O_p_t_i_o_n_s

       These options are defined for ARC implementations:

       --EELL Compile code for little endian mode.  This is the
           default.

       --EEBB Compile code for big endian mode.

       --mmmmaannggllee--ccppuu
           Prepend the name of the cpu to all public symbol
           names.  In multiple-processor systems, there are many
           ARC variants with different instruction and register
           set characteristics.  This flag prevents code compiled
           for one cpu to be linked with code compiled for
           another.  No facility exists for handling variants
           that are "almost identical".  This is an all or
           nothing option.

       --mmccppuu==_c_p_u
           Compile code for ARC variant _c_p_u.  Which variants are
           supported depend on the configuration.  All variants
           support --mmccppuu==bbaassee, this is the default.



gcc-4.3.2                   2008-08-27                        150





GCC(1)                         GNU                         GCC(1)


       --mmtteexxtt==_t_e_x_t_-_s_e_c_t_i_o_n
       --mmddaattaa==_d_a_t_a_-_s_e_c_t_i_o_n
       --mmrrooddaattaa==_r_e_a_d_o_n_l_y_-_d_a_t_a_-_s_e_c_t_i_o_n
           Put functions, data, and readonly data in _t_e_x_t_-
           _s_e_c_t_i_o_n, _d_a_t_a_-_s_e_c_t_i_o_n, and _r_e_a_d_o_n_l_y_-_d_a_t_a_-_s_e_c_t_i_o_n
           respectively by default.  This can be overridden with
           the "section" attribute.

       _A_R_M _O_p_t_i_o_n_s

       These --mm options are defined for Advanced RISC Machines
       (ARM) architectures:

       --mmaabbii==_n_a_m_e
           Generate code for the specified ABI.  Permissible
           values are: aappccss--ggnnuu, aattppccss, aaaappccss, aaaappccss--lliinnuuxx and
           iiwwmmmmxxtt.

       --mmaappccss--ffrraammee
           Generate a stack frame that is compliant with the ARM
           Procedure Call Standard for all functions, even if
           this is not strictly necessary for correct execution
           of the code.  Specifying --ffoommiitt--ffrraammee--ppooiinntteerr with
           this option will cause the stack frames not to be
           generated for leaf functions.  The default is
           --mmnnoo--aappccss--ffrraammee.

       --mmaappccss
           This is a synonym for --mmaappccss--ffrraammee.

       --mmtthhuummbb--iinntteerrwwoorrkk
           Generate code which supports calling between the ARM
           and Thumb instruction sets.  Without this option the
           two instruction sets cannot be reliably used inside
           one program.  The default is --mmnnoo--tthhuummbb--iinntteerrwwoorrkk,
           since slightly larger code is generated when
           --mmtthhuummbb--iinntteerrwwoorrkk is specified.

       --mmnnoo--sscchheedd--pprroolloogg
           Prevent the reordering of instructions in the function
           prolog, or the merging of those instruction with the
           instructions in the function's body.  This means that
           all functions will start with a recognizable set of
           instructions (or in fact one of a choice from a small
           set of different function prologues), and this
           information can be used to locate the start if
           functions inside an executable piece of code.  The
           default is --mmsscchheedd--pprroolloogg.

       --mmhhaarrdd--ffllooaatt
           Generate output containing floating point
           instructions.  This is the default.





gcc-4.3.2                   2008-08-27                        151





GCC(1)                         GNU                         GCC(1)


       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating
           point.  WWaarrnniinngg:: the requisite libraries are not
           available for all ARM targets.  Normally the
           facilities of the machine's usual C compiler are used,
           but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide
           suitable library functions for cross-compilation.

           --mmssoofftt--ffllooaatt changes the calling convention in the
           output file; therefore, it is only useful if you
           compile _a_l_l of a program with this option.  In
           particular, you need to compile _l_i_b_g_c_c_._a, the library
           that comes with GCC, with --mmssoofftt--ffllooaatt in order for
           this to work.

       --mmffllooaatt--aabbii==_n_a_m_e
           Specifies which ABI to use for floating point values.
           Permissible values are: ssoofftt, ssooffttffpp and hhaarrdd.

           ssoofftt and hhaarrdd are equivalent to --mmssoofftt--ffllooaatt and
           --mmhhaarrdd--ffllooaatt respectively.  ssooffttffpp allows the
           generation of floating point instructions, but still
           uses the soft-float calling conventions.

       --mmlliittttllee--eennddiiaann
           Generate code for a processor running in little-endian
           mode.  This is the default for all standard
           configurations.

       --mmbbiigg--eennddiiaann
           Generate code for a processor running in big-endian
           mode; the default is to compile code for a little-
           endian processor.

       --mmwwoorrddss--lliittttllee--eennddiiaann
           This option only applies when generating code for big-
           endian processors.  Generate code for a little-endian
           word order but a big-endian byte order.  That is, a
           byte order of the form 3322110077665544.  Note: this option
           should only be used if you require compatibility with
           code for big-endian ARM processors generated by
           versions of the compiler prior to 2.8.

       --mmccppuu==_n_a_m_e
           This specifies the name of the target ARM processor.
           GCC uses this name to determine what kind of
           instructions it can emit when generating assembly
           code.  Permissible names are: aarrmm22, aarrmm225500, aarrmm33,
           aarrmm66, aarrmm6600, aarrmm660000, aarrmm661100, aarrmm662200, aarrmm77, aarrmm77mm,
           aarrmm77dd, aarrmm77ddmm, aarrmm77ddii, aarrmm77ddmmii, aarrmm7700, aarrmm770000,
           aarrmm770000ii, aarrmm771100, aarrmm771100cc, aarrmm77110000, aarrmm77550000, aarrmm77550000ffee,
           aarrmm77ttddmmii, aarrmm77ttddmmii--ss, aarrmm88, ssttrroonnggaarrmm, ssttrroonnggaarrmm111100,
           ssttrroonnggaarrmm11110000, aarrmm88, aarrmm881100, aarrmm99, aarrmm99ee, aarrmm992200,



gcc-4.3.2                   2008-08-27                        152





GCC(1)                         GNU                         GCC(1)


           aarrmm992200tt, aarrmm992222tt, aarrmm994466ee--ss, aarrmm996666ee--ss, aarrmm996688ee--ss,
           aarrmm992266eejj--ss, aarrmm994400tt, aarrmm99ttddmmii, aarrmm1100ttddmmii, aarrmm11002200tt,
           aarrmm11002266eejj--ss, aarrmm1100ee, aarrmm11002200ee, aarrmm11002222ee, aarrmm11113366jj--ss,
           aarrmm11113366jjff--ss, mmppccoorree, mmppccoorreennoovvffpp, aarrmm11115566tt22--ss,
           aarrmm11117766jjzz--ss, aarrmm11117766jjzzff--ss, ccoorrtteexx--aa88, ccoorrtteexx--rr44,
           ccoorrtteexx--mm33, xxssccaallee, iiwwmmmmxxtt, eepp99331122.

       --mmttuunnee==_n_a_m_e
           This option is very similar to the --mmccppuu== option,
           except that instead of specifying the actual target
           processor type, and hence restricting which
           instructions can be used, it specifies that GCC should
           tune the performance of the code as if the target were
           of the type specified in this option, but still
           choosing the instructions that it will generate based
           on the cpu specified by a --mmccppuu== option.  For some ARM
           implementations better performance can be obtained by
           using this option.

       --mmaarrcchh==_n_a_m_e
           This specifies the name of the target ARM
           architecture.  GCC uses this name to determine what
           kind of instructions it can emit when generating
           assembly code.  This option can be used in conjunction
           with or instead of the --mmccppuu== option.  Permissible
           names are: aarrmmvv22, aarrmmvv22aa, aarrmmvv33, aarrmmvv33mm, aarrmmvv44,
           aarrmmvv44tt, aarrmmvv55, aarrmmvv55tt, aarrmmvv55ttee, aarrmmvv66, aarrmmvv66jj,
           aarrmmvv66tt22, aarrmmvv66zz, aarrmmvv66zzkk, aarrmmvv77, aarrmmvv77--aa, aarrmmvv77--rr,
           aarrmmvv77--mm, iiwwmmmmxxtt, eepp99331122.

       --mmffppuu==_n_a_m_e
       --mmffppee==_n_u_m_b_e_r
       --mmffpp==_n_u_m_b_e_r
           This specifies what floating point hardware (or
           hardware emulation) is available on the target.
           Permissible names are: ffppaa, ffppee22, ffppee33, mmaavveerriicckk, vvffpp.
           --mmffpp and --mmffppee are synonyms for --mmffppuu=ffppee_n_u_m_b_e_r, for
           compatibility with older versions of GCC.

           If --mmssoofftt--ffllooaatt is specified this specifies the format
           of floating point values.

       --mmssttrruuccttuurree--ssiizzee--bboouunnddaarryy==_n
           The size of all structures and unions will be rounded
           up to a multiple of the number of bits set by this
           option.  Permissible values are 8, 32 and 64.  The
           default value varies for different toolchains.  For
           the COFF targeted toolchain the default value is 8.  A
           value of 64 is only allowed if the underlying ABI
           supports it.

           Specifying the larger number can produce faster, more
           efficient code, but can also increase the size of the
           program.  Different values are potentially



gcc-4.3.2                   2008-08-27                        153





GCC(1)                         GNU                         GCC(1)


           incompatible.  Code compiled with one value cannot
           necessarily expect to work with code or libraries
           compiled with another value, if they exchange
           information using structures or unions.

       --mmaabboorrtt--oonn--nnoorreettuurrnn
           Generate a call to the function "abort" at the end of
           a "noreturn" function.  It will be executed if the
           function tries to return.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Tells the compiler to perform function calls by first
           loading the address of the function into a register
           and then performing a subroutine call on this
           register.  This switch is needed if the target
           function will lie outside of the 64 megabyte
           addressing range of the offset based version of
           subroutine call instruction.

           Even if this switch is enabled, not all function calls
           will be turned into long calls.  The heuristic is that
           static functions, functions which have the sshhoorrtt--ccaallll
           attribute, functions that are inside the scope of a
           ##pprraaggmmaa nnoo__lloonngg__ccaallllss directive and functions whose
           definitions have already been compiled within the
           current compilation unit, will not be turned into long
           calls.  The exception to this rule is that weak
           function definitions, functions with the lloonngg--ccaallll
           attribute or the sseeccttiioonn attribute, and functions that
           are within the scope of a ##pprraaggmmaa lloonngg__ccaallllss
           directive, will always be turned into long calls.

           This feature is not enabled by default.  Specifying
           --mmnnoo--lloonngg--ccaallllss will restore the default behavior, as
           will placing the function calls within the scope of a
           ##pprraaggmmaa lloonngg__ccaallllss__ooffff directive.  Note these switches
           have no effect on how the compiler generates code to
           handle function calls via function pointers.

       --mmnnoopp--ffuunn--ddlllliimmppoorrtt
           Disable support for the "dllimport" attribute.

       --mmssiinnggllee--ppiicc--bbaassee
           Treat the register used for PIC addressing as
           read-only, rather than loading it in the prologue for
           each function.  The run-time system is responsible for
           initializing this register with an appropriate value
           before execution begins.

       --mmppiicc--rreeggiisstteerr==_r_e_g
           Specify the register to be used for PIC addressing.
           The default is R10 unless stack-checking is enabled,
           when R9 is used.



gcc-4.3.2                   2008-08-27                        154





GCC(1)                         GNU                         GCC(1)


       --mmcciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss
           Insert NOPs into the instruction stream to in order to
           work around problems with invalid Maverick instruction
           combinations.  This option is only valid if the
           --mmccppuu==eepp99331122 option has been used to enable generation
           of instructions for the Cirrus Maverick floating point
           co-processor.  This option is not enabled by default,
           since the problem is only present in older Maverick
           implementations.  The default can be re-enabled by use
           of the --mmnnoo--cciirrrruuss--ffiixx--iinnvvaalliidd--iinnssnnss switch.

       --mmppookkee--ffuunnccttiioonn--nnaammee
           Write the name of each function into the text section,
           directly preceding the function prologue.  The
           generated code is similar to this:

                        t0
                            .ascii "arm_poke_function_name", 0
                            .align
                        t1
                            .word 0xff000000 + (t1 - t0)
                        arm_poke_function_name
                            mov     ip, sp
                            stmfd   sp!, {fp, ip, lr, pc}
                            sub     fp, ip, #4

           When performing a stack backtrace, code can inspect
           the value of "pc" stored at "fp + 0".  If the trace
           function then looks at location "pc - 12" and the top
           8 bits are set, then we know that there is a function
           name embedded immediately preceding this location and
           has length "((pc[-3]) & 0xff000000)".

       --mmtthhuummbb
           Generate code for the Thumb instruction set.  The
           default is to use the 32-bit ARM instruction set.
           This option automatically enables either 16-bit
           Thumb-1 or mixed 16/32-bit Thumb-2 instructions based
           on the --mmccppuu==_n_a_m_e and --mmaarrcchh==_n_a_m_e options.

       --mmttppccss--ffrraammee
           Generate a stack frame that is compliant with the
           Thumb Procedure Call Standard for all non-leaf
           functions.  (A leaf function is one that does not call
           any other functions.)  The default is --mmnnoo--ttppccss--ffrraammee.

       --mmttppccss--lleeaaff--ffrraammee
           Generate a stack frame that is compliant with the
           Thumb Procedure Call Standard for all leaf functions.
           (A leaf function is one that does not call any other
           functions.)  The default is --mmnnoo--aappccss--lleeaaff--ffrraammee.

       --mmccaalllleeee--ssuuppeerr--iinntteerrwwoorrkkiinngg
           Gives all externally visible functions in the file



gcc-4.3.2                   2008-08-27                        155





GCC(1)                         GNU                         GCC(1)


           being compiled an ARM instruction set header which
           switches to Thumb mode before executing the rest of
           the function.  This allows these functions to be
           called from non-interworking code.

       --mmccaalllleerr--ssuuppeerr--iinntteerrwwoorrkkiinngg
           Allows calls via function pointers (including virtual
           functions) to execute correctly regardless of whether
           the target code has been compiled for interworking or
           not.  There is a small overhead in the cost of
           executing a function pointer if this option is
           enabled.

       --mmttpp==_n_a_m_e
           Specify the access model for the thread local storage
           pointer.  The valid models are ssoofftt, which generates
           calls to "__aeabi_read_tp", ccpp1155, which fetches the
           thread pointer from "cp15" directly (supported in the
           arm6k architecture), and aauuttoo, which uses the best
           available method for the selected processor.  The
           default setting is aauuttoo.

       _A_V_R _O_p_t_i_o_n_s

       These options are defined for AVR implementations:

       --mmmmccuu==_m_c_u
           Specify ATMEL AVR instruction set or MCU type.

           Instruction set avr1 is for the minimal AVR core, not
           supported by the C compiler, only for assembler
           programs (MCU types: at90s1200, attiny10, attiny11,
           attiny12, attiny15, attiny28).

           Instruction set avr2 (default) is for the classic AVR
           core with up to 8K program memory space (MCU types:
           at90s2313, at90s2323, attiny22, at90s2333, at90s2343,
           at90s4414, at90s4433, at90s4434, at90s8515, at90c8534,
           at90s8535).

           Instruction set avr3 is for the classic AVR core with
           up to 128K program memory space (MCU types: atmega103,
           atmega603, at43usb320, at76c711).

           Instruction set avr4 is for the enhanced AVR core with
           up to 8K program memory space (MCU types: atmega8,
           atmega83, atmega85).

           Instruction set avr5 is for the enhanced AVR core with
           up to 128K program memory space (MCU types: atmega16,
           atmega161, atmega163, atmega32, atmega323, atmega64,
           atmega128, at43usb355, at94k).





gcc-4.3.2                   2008-08-27                        156





GCC(1)                         GNU                         GCC(1)


       --mmssiizzee
           Output instruction sizes to the asm file.

       --mmiinniitt--ssttaacckk==_N
           Specify the initial stack address, which may be a
           symbol or numeric value, ____ssttaacckk is the default.

       --mmnnoo--iinntteerrrruuppttss
           Generated code is not compatible with hardware
           interrupts.  Code size will be smaller.

       --mmccaallll--pprroolloogguueess
           Functions prologues/epilogues expanded as call to
           appropriate subroutines.  Code size will be smaller.

       --mmnnoo--ttaabblleejjuummpp
           Do not generate tablejump insns which sometimes
           increase code size.

       --mmttiinnyy--ssttaacckk
           Change only the low 8 bits of the stack pointer.

       --mmiinntt88
           Assume int to be 8 bit integer.  This affects the
           sizes of all types: A char will be 1 byte, an int will
           be 1 byte, an long will be 2 bytes and long long will
           be 4 bytes.  Please note that this option does not
           comply to the C standards, but it will provide you
           with smaller code size.

       _B_l_a_c_k_f_i_n _O_p_t_i_o_n_s

       --mmccppuu==_c_p_u[--_s_i_r_e_v_i_s_i_o_n]
           Specifies the name of the target Blackfin processor.
           Currently, _c_p_u can be one of bbff552222, bbff552233, bbff552244,
           bbff552255, bbff552266, bbff552277, bbff553311, bbff553322, bbff553333, bbff553344,
           bbff553366, bbff553377, bbff553388, bbff553399, bbff554422, bbff554444, bbff554477,
           bbff554488, bbff554499, bbff556611.  The optional _s_i_r_e_v_i_s_i_o_n
           specifies the silicon revision of the target Blackfin
           processor.  Any workarounds available for the targeted
           silicon revision will be enabled.  If _s_i_r_e_v_i_s_i_o_n is
           nnoonnee, no workarounds are enabled.  If _s_i_r_e_v_i_s_i_o_n is
           aannyy, all workarounds for the targeted processor will
           be enabled.  The "__SILICON_REVISION__" macro is
           defined to two hexadecimal digits representing the
           major and minor numbers in the silicon revision.  If
           _s_i_r_e_v_i_s_i_o_n is nnoonnee, the "__SILICON_REVISION__" is not
           defined.  If _s_i_r_e_v_i_s_i_o_n is aannyy, the
           "__SILICON_REVISION__" is defined to be 0xffff.  If
           this optional _s_i_r_e_v_i_s_i_o_n is not used, GCC assumes the
           latest known silicon revision of the targeted Blackfin
           processor.

           Support for bbff556611 is incomplete.  For bbff556611, Only the



gcc-4.3.2                   2008-08-27                        157





GCC(1)                         GNU                         GCC(1)


           processor macro is defined.  Without this option,
           bbff553322 is used as the processor by default.  The
           corresponding predefined processor macros for _c_p_u is
           to be defined.  And for bbffiinn--eellff toolchain, this
           causes the hardware BSP provided by libgloss to be
           linked in if --mmssiimm is not given.

       --mmssiimm
           Specifies that the program will be run on the
           simulator.  This causes the simulator BSP provided by
           libgloss to be linked in.  This option has effect only
           for bbffiinn--eellff toolchain.  Certain other options, such
           as --mmiidd--sshhaarreedd--lliibbrraarryy and --mmffddppiicc, imply --mmssiimm.

       --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           Don't keep the frame pointer in a register for leaf
           functions.  This avoids the instructions to save, set
           up and restore frame pointers and makes an extra
           register available in leaf functions.  The option
           --ffoommiitt--ffrraammee--ppooiinntteerr removes the frame pointer for all
           functions which might make debugging harder.

       --mmssppeecclldd--aannoommaallyy
           When enabled, the compiler will ensure that the
           generated code does not contain speculative loads
           after jump instructions. If this option is used,
           "__WORKAROUND_SPECULATIVE_LOADS" is defined.

       --mmnnoo--ssppeecclldd--aannoommaallyy
           Don't generate extra code to prevent speculative loads
           from occurring.

       --mmccssyynncc--aannoommaallyy
           When enabled, the compiler will ensure that the
           generated code does not contain CSYNC or SSYNC
           instructions too soon after conditional branches.  If
           this option is used, "__WORKAROUND_SPECULATIVE_SYNCS"
           is defined.

       --mmnnoo--ccssyynncc--aannoommaallyy
           Don't generate extra code to prevent CSYNC or SSYNC
           instructions from occurring too soon after a
           conditional branch.

       --mmllooww--6644kk
           When enabled, the compiler is free to take advantage
           of the knowledge that the entire program fits into the
           low 64k of memory.

       --mmnnoo--llooww--6644kk
           Assume that the program is arbitrarily large.  This is
           the default.





gcc-4.3.2                   2008-08-27                        158





GCC(1)                         GNU                         GCC(1)


       --mmssttaacckk--cchheecckk--ll11
           Do stack checking using information placed into L1
           scratchpad memory by the uClinux kernel.

       --mmiidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the
           library ID method.  This allows for execute in place
           and shared libraries in an environment without virtual
           memory management.  This option implies --ffPPIICC.  With a
           bbffiinn--eellff target, this option implies --mmssiimm.

       --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that doesn't assume ID based shared
           libraries are being used.  This is the default.

       --mmlleeaaff--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the
           library ID method, but assumes that this library or
           executable won't link against any other ID shared
           libraries.  That allows the compiler to use faster
           code for jumps and calls.

       --mmnnoo--lleeaaff--iidd--sshhaarreedd--lliibbrraarryy
           Do not assume that the code being compiled won't link
           against any ID shared libraries.  Slower code will be
           generated for jump and call insns.

       --mmsshhaarreedd--lliibbrraarryy--iidd==nn
           Specified the identification number of the ID based
           shared library being compiled.  Specifying a value of
           0 will generate more compact code, specifying other
           values will force the allocation of that number to the
           current library but is no more space or time efficient
           than omitting this option.

       --mmsseepp--ddaattaa
           Generate code that allows the data segment to be
           located in a different area of memory from the text
           segment.  This allows for execute in place in an
           environment without virtual memory management by
           eliminating relocations against the text section.

       --mmnnoo--sseepp--ddaattaa
           Generate code that assumes that the data segment
           follows the text segment.  This is the default.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Tells the compiler to perform function calls by first
           loading the address of the function into a register
           and then performing a subroutine call on this
           register.  This switch is needed if the target
           function will lie outside of the 24 bit addressing
           range of the offset based version of subroutine call



gcc-4.3.2                   2008-08-27                        159





GCC(1)                         GNU                         GCC(1)


           instruction.

           This feature is not enabled by default.  Specifying
           --mmnnoo--lloonngg--ccaallllss will restore the default behavior.
           Note these switches have no effect on how the compiler
           generates code to handle function calls via function
           pointers.

       --mmffaasstt--ffpp
           Link with the fast floating-point library. This
           library relaxes some of the IEEE floating-point
           standard's rules for checking inputs against Not-a-
           Number (NAN), in the interest of performance.

       --mmiinnlliinnee--pplltt
           Enable inlining of PLT entries in function calls to
           functions that are not known to bind locally.  It has
           no effect without --mmffddppiicc.

       _C_R_I_S _O_p_t_i_o_n_s

       These options are defined specifically for the CRIS ports.

       --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
       --mmccppuu==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Generate code for the specified architecture.  The
           choices for _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are vv33, vv88 and vv1100 for
           respectively ETRAX 4, ETRAX 100, and ETRAX 100 LX.
           Default is vv00 except for cris-axis-linux-gnu, where
           the default is vv1100.

       --mmttuunnee==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Tune to _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e everything applicable about
           the generated code, except for the ABI and the set of
           available instructions.  The choices for _a_r_c_h_i_t_e_c_t_u_r_e_-
           _t_y_p_e are the same as for --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e.

       --mmmmaaxx--ssttaacckk--ffrraammee==_n
           Warn when the stack frame of a function exceeds _n
           bytes.

       --mmeelliinnuuxx--ssttaacckkssiizzee==_n
           Only available with the ccrriiss--aaxxiiss--aaoouutt target.
           Arranges for indications in the program to the kernel
           loader that the stack of the program should be set to
           _n bytes.

       --mmeettrraaxx44
       --mmeettrraaxx110000
           The options --mmeettrraaxx44 and --mmeettrraaxx110000 are synonyms for
           --mmaarrcchh==vv33 and --mmaarrcchh==vv88 respectively.

       --mmmmuull--bbuugg--wwoorrkkaarroouunndd




gcc-4.3.2                   2008-08-27                        160





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--mmuull--bbuugg--wwoorrkkaarroouunndd
           Work around a bug in the "muls" and "mulu"
           instructions for CPU models where it applies.  This
           option is active by default.

       --mmppddeebbuugg
           Enable CRIS-specific verbose debug-related information
           in the assembly code.  This option also has the effect
           to turn off the ##NNOO__AAPPPP formatted-code indicator to
           the assembler at the beginning of the assembly file.

       --mmcccc--iinniitt
           Do not use condition-code results from previous
           instruction; always emit compare and test instructions
           before use of condition codes.

       --mmnnoo--ssiiddee--eeffffeeccttss
           Do not emit instructions with side-effects in
           addressing modes other than post-increment.

       --mmssttaacckk--aalliiggnn
       --mmnnoo--ssttaacckk--aalliiggnn
       --mmddaattaa--aalliiggnn
       --mmnnoo--ddaattaa--aalliiggnn
       --mmccoonnsstt--aalliiggnn
       --mmnnoo--ccoonnsstt--aalliiggnn
           These options (no-options) arranges (eliminate
           arrangements) for the stack-frame, individual data and
           constants to be aligned for the maximum single data
           access size for the chosen CPU model.  The default is
           to arrange for 32-bit alignment.  ABI details such as
           structure layout are not affected by these options.

       --mm3322--bbiitt
       --mm1166--bbiitt
       --mm88--bbiitt
           Similar to the stack- data- and const-align options
           above, these options arrange for stack-frame, writable
           data and constants to all be 32-bit, 16-bit or 8-bit
           aligned.  The default is 32-bit alignment.

       --mmnnoo--pprroolloogguuee--eeppiilloogguuee
       --mmpprroolloogguuee--eeppiilloogguuee
           With --mmnnoo--pprroolloogguuee--eeppiilloogguuee, the normal function
           prologue and epilogue that sets up the stack-frame are
           omitted and no return instructions or return sequences
           are generated in the code.  Use this option only
           together with visual inspection of the compiled code:
           no warnings or errors are generated when call-saved
           registers must be saved, or storage for local variable
           needs to be allocated.

       --mmnnoo--ggoottpplltt




gcc-4.3.2                   2008-08-27                        161





GCC(1)                         GNU                         GCC(1)


       --mmggoottpplltt
           With --ffppiicc and --ffPPIICC, don't generate (do generate)
           instruction sequences that load addresses for
           functions from the PLT part of the GOT rather than
           (traditional on other architectures) calls to the PLT.
           The default is --mmggoottpplltt.

       --mmaaoouutt
           Legacy no-op option only recognized with the cris-
           axis-aout target.

       --mmeellff
           Legacy no-op option only recognized with the cris-
           axis-elf and cris-axis-linux-gnu targets.

       --mmeelliinnuuxx
           Only recognized with the cris-axis-aout target, where
           it selects a GNU/linux-like multilib, include files
           and instruction set for --mmaarrcchh==vv88.

       --mmlliinnuuxx
           Legacy no-op option only recognized with the cris-
           axis-linux-gnu target.

       --ssiimm
           This option, recognized for the cris-axis-aout and
           cris-axis-elf arranges to link with input-output
           functions from a simulator library.  Code, initialized
           data and zero-initialized data are allocated
           consecutively.

       --ssiimm22
           Like --ssiimm, but pass linker options to locate
           initialized data at 0x40000000 and zero-initialized
           data at 0x80000000.

       _C_R_X _O_p_t_i_o_n_s

       These options are defined specifically for the CRX ports.

       --mmmmaacc
           Enable the use of multiply-accumulate instructions.
           Disabled by default.

       --mmppuusshh--aarrggss
           Push instructions will be used to pass outgoing
           arguments when functions are called. Enabled by
           default.

       _D_a_r_w_i_n _O_p_t_i_o_n_s

       These options are defined for all architectures running
       the Darwin operating system.




gcc-4.3.2                   2008-08-27                        162





GCC(1)                         GNU                         GCC(1)


       FSF GCC on Darwin does not create "fat" object files; it
       will create an object file for the single architecture
       that it was built to target.  Apple's GCC on Darwin does
       create "fat" files if multiple --aarrcchh options are used; it
       does so by running the compiler or linker multiple times
       and joining the results together with _l_i_p_o.

       The subtype of the file created (like ppppcc77440000 or ppppcc997700 or
       ii668866) is determined by the flags that specify the ISA that
       GCC is targetting, like --mmccppuu or --mmaarrcchh.  The
       --ffoorrccee__ccppuussuubbttyyppee__AALLLL option can be used to override this.

       The Darwin tools vary in their behavior when presented
       with an ISA mismatch.  The assembler, _a_s, will only permit
       instructions to be used that are valid for the subtype of
       the file it is generating, so you cannot put 64-bit
       instructions in an ppppcc775500 object file.  The linker for
       shared libraries, _/_u_s_r_/_b_i_n_/_l_i_b_t_o_o_l, will fail and print an
       error if asked to create a shared library with a less
       restrictive subtype than its input files (for instance,
       trying to put a ppppcc997700 object file in a ppppcc77440000 library).
       The linker for executables, _l_d, will quietly give the
       executable the most restrictive subtype of any of its
       input files.

       --FF_d_i_r
           Add the framework directory _d_i_r to the head of the
           list of directories to be searched for header files.
           These directories are interleaved with those specified
           by --II options and are scanned in a left-to-right
           order.

           A framework directory is a directory with frameworks
           in it.  A framework is a directory with a ""HHeeaaddeerrss""
           and/or ""PPrriivvaatteeHHeeaaddeerrss"" directory contained directly
           in it that ends in ""..ffrraammeewwoorrkk"".  The name of a
           framework is the name of this directory excluding the
           ""..ffrraammeewwoorrkk"".  Headers associated with the framework
           are found in one of those two directories, with
           ""HHeeaaddeerrss"" being searched first.  A subframework is a
           framework directory that is in a framework's
           ""FFrraammeewwoorrkkss"" directory.  Includes of subframework
           headers can only appear in a header of a framework
           that contains the subframework, or in a sibling
           subframework header.  Two subframeworks are siblings
           if they occur in the same framework.  A subframework
           should not have the same name as a framework, a
           warning will be issued if this is violated.  Currently
           a subframework cannot have subframeworks, in the
           future, the mechanism may be extended to support this.
           The standard frameworks can be found in
           ""//SSyysstteemm//LLiibbrraarryy//FFrraammeewwoorrkkss"" and
           ""//LLiibbrraarryy//FFrraammeewwoorrkkss"".  An example include looks like
           "#include <Framework/header.h>", where FFrraammeewwoorrkk



gcc-4.3.2                   2008-08-27                        163





GCC(1)                         GNU                         GCC(1)


           denotes the name of the framework and header.h is
           found in the ""PPrriivvaatteeHHeeaaddeerrss"" or ""HHeeaaddeerrss"" directory.

       --iiffrraammeewwoorrkk_d_i_r
           Like --FF except the directory is a treated as a system
           directory.  The main difference between this
           --iiffrraammeewwoorrkk and --FF is that with --iiffrraammeewwoorrkk the
           compiler does not warn about constructs contained
           within header files found via _d_i_r.  This option is
           valid only for the C family of languages.

       --gguusseedd
           Emit debugging information for symbols that are used.
           For STABS debugging format, this enables
           --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss.  This is by default
           ON.

       --ggffuullll
           Emit debugging information for all symbols and types.

       --mmmmaaccoossxx--vveerrssiioonn--mmiinn==_v_e_r_s_i_o_n
           The earliest version of MacOS X that this executable
           will run on is _v_e_r_s_i_o_n.  Typical values of _v_e_r_s_i_o_n
           include 10.1, 10.2, and 10.3.9.

           If the compiler was built to use the system's headers
           by default, then the default for this option is the
           system version on which the compiler is running,
           otherwise the default is to make choices which are
           compatible with as many systems and code bases as
           possible.

       --mmkkeerrnneell
           Enable kernel development mode.  The --mmkkeerrnneell option
           sets --ssttaattiicc, --ffnnoo--ccoommmmoonn, --ffnnoo--ccxxaa--aatteexxiitt,
           --ffnnoo--eexxcceeppttiioonnss, --ffnnoo--nnoonn--ccaallll--eexxcceeppttiioonnss,
           --ffaappppllee--kkeexxtt, --ffnnoo--wweeaakk and --ffnnoo--rrttttii where
           applicable.  This mode also sets --mmnnoo--aallttiivveecc,
           --mmssoofftt--ffllooaatt, --ffnnoo--bbuuiillttiinn and --mmlloonngg--bbrraanncchh for
           PowerPC targets.

       --mmoonnee--bbyyttee--bbooooll
           Override the defaults for bbooooll so that
           ssiizzeeooff((bbooooll))====11.  By default ssiizzeeooff((bbooooll)) is 44 when
           compiling for Darwin/PowerPC and 11 when compiling for
           Darwin/x86, so this option has no effect on x86.

           WWaarrnniinngg:: The --mmoonnee--bbyyttee--bbooooll switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Using this switch may
           require recompiling all other modules in a program,
           including system libraries.  Use this switch to
           conform to a non-default data model.




gcc-4.3.2                   2008-08-27                        164





GCC(1)                         GNU                         GCC(1)


       --mmffiixx--aanndd--ccoonnttiinnuuee
       --ffffiixx--aanndd--ccoonnttiinnuuee
       --ffiinnddiirreecctt--ddaattaa
           Generate code suitable for fast turn around
           development.  Needed to enable gdb to dynamically load
           ".o" files into already running programs.
           --ffiinnddiirreecctt--ddaattaa and --ffffiixx--aanndd--ccoonnttiinnuuee are provided
           for backwards compatibility.

       --aallll__llooaadd
           Loads all members of static archive libraries.  See
           man _l_d(1) for more information.

       --aarrcchh__eerrrroorrss__ffaattaall
           Cause the errors having to do with files that have the
           wrong architecture to be fatal.

       --bbiinndd__aatt__llooaadd
           Causes the output file to be marked such that the
           dynamic linker will bind all undefined references when
           the file is loaded or launched.

       --bbuunnddllee
           Produce a Mach-o bundle format file.  See man _l_d(1)
           for more information.

       --bbuunnddllee__llooaaddeerr _e_x_e_c_u_t_a_b_l_e
           This option specifies the _e_x_e_c_u_t_a_b_l_e that will be
           loading the build output file being linked.  See man
           _l_d(1) for more information.

       --ddyynnaammiicclliibb
           When passed this option, GCC will produce a dynamic
           library instead of an executable when linking, using
           the Darwin _l_i_b_t_o_o_l command.

       --ffoorrccee__ccppuussuubbttyyppee__AALLLL
           This causes GCC's output file to have the _A_L_L subtype,
           instead of one controlled by the --mmccppuu or --mmaarrcchh
           option.

       --aalllloowwaabbllee__cclliieenntt  _c_l_i_e_n_t___n_a_m_e
       --cclliieenntt__nnaammee
       --ccoommppaattiibbiilliittyy__vveerrssiioonn
       --ccuurrrreenntt__vveerrssiioonn
       --ddeeaadd__ssttrriipp
       --ddeeppeennddeennccyy--ffiillee
       --ddyylliibb__ffiillee
       --ddyylliinnkkeerr__iinnssttaallll__nnaammee
       --ddyynnaammiicc
       --eexxppoorrtteedd__ssyymmbboollss__lliisstt
       --ffiilleelliisstt
       --ffllaatt__nnaammeessppaaccee




gcc-4.3.2                   2008-08-27                        165





GCC(1)                         GNU                         GCC(1)


       --ffoorrccee__ffllaatt__nnaammeessppaaccee
       --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess
       --iimmaaggee__bbaassee
       --iinniitt
       --iinnssttaallll__nnaammee
       --kkeeeepp__pprriivvaattee__eexxtteerrnnss
       --mmuullttii__mmoodduullee
       --mmuullttiippllyy__ddeeffiinneedd
       --mmuullttiippllyy__ddeeffiinneedd__uunnuusseedd
       --nnooaallll__llooaadd
       --nnoo__ddeeaadd__ssttrriipp__iinniittss__aanndd__tteerrmmss
       --nnooffiixxpprreebbiinnddiinngg
       --nnoommuullttiiddeeffss
       --nnoopprreebbiinndd
       --nnoosseegglliinnkkeeddiitt
       --ppaaggeezzeerroo__ssiizzee
       --pprreebbiinndd
       --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodduulleess
       --pprriivvaattee__bbuunnddllee
       --rreeaadd__oonnllyy__rreellooccss
       --sseeccttaalliiggnn
       --sseeccttoobbjjeeccttssyymmbboollss
       --wwhhyyllooaadd
       --sseegg11aaddddrr
       --sseeccttccrreeaattee
       --sseeccttoobbjjeeccttssyymmbboollss
       --sseeccttoorrddeerr
       --sseeggaaddddrr
       --sseeggss__rreeaadd__oonnllyy__aaddddrr
       --sseeggss__rreeaadd__wwrriittee__aaddddrr
       --sseegg__aaddddrr__ttaabbllee
       --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee
       --sseegglliinnkkeeddiitt
       --sseeggpprroott
       --sseeggss__rreeaadd__oonnllyy__aaddddrr
       --sseeggss__rreeaadd__wwrriittee__aaddddrr
       --ssiinnggllee__mmoodduullee
       --ssttaattiicc
       --ssuubb__lliibbrraarryy
       --ssuubb__uummbbrreellllaa
       --ttwwoolleevveell__nnaammeessppaaccee
       --uummbbrreellllaa
       --uunnddeeffiinneedd
       --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt
       --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess
       --wwhhaattssllooaaddeedd
           These options are passed to the Darwin linker.  The
           Darwin linker man page describes them in detail.

       _D_E_C _A_l_p_h_a _O_p_t_i_o_n_s

       These --mm options are defined for the DEC Alpha
       implementations:




gcc-4.3.2                   2008-08-27                        166





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--ssoofftt--ffllooaatt
       --mmssoofftt--ffllooaatt
           Use (do not use) the hardware floating-point
           instructions for floating-point operations.  When
           --mmssoofftt--ffllooaatt is specified, functions in _l_i_b_g_c_c_._a will
           be used to perform floating-point operations.  Unless
           they are replaced by routines that emulate the
           floating-point operations, or compiled in such a way
           as to call such emulations routines, these routines
           will issue floating-point operations.   If you are
           compiling for an Alpha without floating-point
           operations, you must ensure that the library is built
           so as not to call them.

           Note that Alpha implementations without floating-point
           operations are required to have floating-point
           registers.

       --mmffpp--rreegg
       --mmnnoo--ffpp--rreeggss
           Generate code that uses (does not use) the floating-
           point register set.  --mmnnoo--ffpp--rreeggss implies
           --mmssoofftt--ffllooaatt.  If the floating-point register set is
           not used, floating point operands are passed in
           integer registers as if they were integers and
           floating-point results are passed in $0 instead of
           $f0.  This is a non-standard calling sequence, so any
           function with a floating-point argument or return
           value called by code compiled with --mmnnoo--ffpp--rreeggss must
           also be compiled with that option.

           A typical use of this option is building a kernel that
           does not use, and hence need not save and restore, any
           floating-point registers.

       --mmiieeeeee
           The Alpha architecture implements floating-point
           hardware optimized for maximum performance.  It is
           mostly compliant with the IEEE floating point
           standard.  However, for full compliance, software
           assistance is required.  This option generates code
           fully IEEE compliant code _e_x_c_e_p_t that the _i_n_e_x_a_c_t_-_f_l_a_g
           is not maintained (see below).  If this option is
           turned on, the preprocessor macro "_IEEE_FP" is
           defined during compilation.  The resulting code is
           less efficient but is able to correctly support
           denormalized numbers and exceptional IEEE values such
           as not-a-number and plus/minus infinity.  Other Alpha
           compilers call this option --iieeeeee__wwiitthh__nnoo__iinneexxaacctt.

       --mmiieeeeee--wwiitthh--iinneexxaacctt
           This is like --mmiieeeeee except the generated code also
           maintains the IEEE _i_n_e_x_a_c_t_-_f_l_a_g.  Turning on this
           option causes the generated code to implement fully-



gcc-4.3.2                   2008-08-27                        167





GCC(1)                         GNU                         GCC(1)


           compliant IEEE math.  In addition to "_IEEE_FP",
           "_IEEE_FP_EXACT" is defined as a preprocessor macro.
           On some Alpha implementations the resulting code may
           execute significantly slower than the code generated
           by default.  Since there is very little code that
           depends on the _i_n_e_x_a_c_t_-_f_l_a_g, you should normally not
           specify this option.  Other Alpha compilers call this
           option --iieeeeee__wwiitthh__iinneexxaacctt.

       --mmffpp--ttrraapp--mmooddee==_t_r_a_p_-_m_o_d_e
           This option controls what floating-point related traps
           are enabled.  Other Alpha compilers call this option
           --ffppttmm _t_r_a_p_-_m_o_d_e.  The trap mode can be set to one of
           four values:

           nn   This is the default (normal) setting.  The only
               traps that are enabled are the ones that cannot be
               disabled in software (e.g., division by zero
               trap).

           uu   In addition to the traps enabled by nn, underflow
               traps are enabled as well.

           ssuu  Like uu, but the instructions are marked to be safe
               for software completion (see Alpha architecture
               manual for details).

           ssuuii Like ssuu, but inexact traps are enabled as well.

       --mmffpp--rroouunnddiinngg--mmooddee==_r_o_u_n_d_i_n_g_-_m_o_d_e
           Selects the IEEE rounding mode.  Other Alpha compilers
           call this option --ffpprrmm _r_o_u_n_d_i_n_g_-_m_o_d_e.  The _r_o_u_n_d_i_n_g_-
           _m_o_d_e can be one of:

           nn   Normal IEEE rounding mode.  Floating point numbers
               are rounded towards the nearest machine number or
               towards the even machine number in case of a tie.

           mm   Round towards minus infinity.

           cc   Chopped rounding mode.  Floating point numbers are
               rounded towards zero.

           dd   Dynamic rounding mode.  A field in the floating
               point control register (_f_p_c_r, see Alpha
               architecture reference manual) controls the
               rounding mode in effect.  The C library
               initializes this register for rounding towards
               plus infinity.  Thus, unless your program modifies
               the _f_p_c_r, dd corresponds to round towards plus
               infinity.

       --mmttrraapp--pprreecciissiioonn==_t_r_a_p_-_p_r_e_c_i_s_i_o_n
           In the Alpha architecture, floating point traps are



gcc-4.3.2                   2008-08-27                        168





GCC(1)                         GNU                         GCC(1)


           imprecise.  This means without software assistance it
           is impossible to recover from a floating trap and
           program execution normally needs to be terminated.
           GCC can generate code that can assist operating system
           trap handlers in determining the exact location that
           caused a floating point trap.  Depending on the
           requirements of an application, different levels of
           precisions can be selected:

           pp   Program precision.  This option is the default and
               means a trap handler can only identify which
               program caused a floating point exception.

           ff   Function precision.  The trap handler can
               determine the function that caused a floating
               point exception.

           ii   Instruction precision.  The trap handler can
               determine the exact instruction that caused a
               floating point exception.

           Other Alpha compilers provide the equivalent options
           called --ssccooppee__ssaaffee and --rreessuummppttiioonn__ssaaffee.

       --mmiieeeeee--ccoonnffoorrmmaanntt
           This option marks the generated code as IEEE
           conformant.  You must not use this option unless you
           also specify --mmttrraapp--pprreecciissiioonn==ii and either
           --mmffpp--ttrraapp--mmooddee==ssuu or --mmffpp--ttrraapp--mmooddee==ssuuii.  Its only
           effect is to emit the line ..eeffllaagg 4488 in the function
           prologue of the generated assembly file.  Under DEC
           Unix, this has the effect that IEEE-conformant math
           library routines will be linked in.

       --mmbbuuiilldd--ccoonnssttaannttss
           Normally GCC examines a 32- or 64-bit integer constant
           to see if it can construct it from smaller constants
           in two or three instructions.  If it cannot, it will
           output the constant as a literal and generate code to
           load it from the data segment at runtime.

           Use this option to require GCC to construct _a_l_l
           integer constants using code, even if it takes more
           instructions (the maximum is six).

           You would typically use this option to build a shared
           library dynamic loader.  Itself a shared library, it
           must relocate itself in memory before it can find the
           variables and constants in its own data segment.

       --mmaallpphhaa--aass
       --mmggaass
           Select whether to generate code to be assembled by the
           vendor-supplied assembler (--mmaallpphhaa--aass) or by the GNU



gcc-4.3.2                   2008-08-27                        169





GCC(1)                         GNU                         GCC(1)


           assembler --mmggaass.

       --mmbbwwxx
       --mmnnoo--bbwwxx
       --mmcciixx
       --mmnnoo--cciixx
       --mmffiixx
       --mmnnoo--ffiixx
       --mmmmaaxx
       --mmnnoo--mmaaxx
           Indicate whether GCC should generate code to use the
           optional BWX, CIX, FIX and MAX instruction sets.  The
           default is to use the instruction sets supported by
           the CPU type specified via --mmccppuu== option or that of
           the CPU on which GCC was built if none was specified.

       --mmffllooaatt--vvaaxx
       --mmffllooaatt--iieeeeee
           Generate code that uses (does not use) VAX F and G
           floating point arithmetic instead of IEEE single and
           double precision.

       --mmeexxpplliicciitt--rreellooccss
       --mmnnoo--eexxpplliicciitt--rreellooccss
           Older Alpha assemblers provided no way to generate
           symbol relocations except via assembler macros.  Use
           of these macros does not allow optimal instruction
           scheduling.  GNU binutils as of version 2.12 supports
           a new syntax that allows the compiler to explicitly
           mark which relocations should apply to which
           instructions.  This option is mostly useful for
           debugging, as GCC detects the capabilities of the
           assembler when it is built and sets the default
           accordingly.

       --mmssmmaallll--ddaattaa
       --mmllaarrggee--ddaattaa
           When --mmeexxpplliicciitt--rreellooccss is in effect, static data is
           accessed via _g_p_-_r_e_l_a_t_i_v_e relocations.  When
           --mmssmmaallll--ddaattaa is used, objects 8 bytes long or smaller
           are placed in a _s_m_a_l_l _d_a_t_a _a_r_e_a (the ".sdata" and
           ".sbss" sections) and are accessed via 16-bit
           relocations off of the $gp register.  This limits the
           size of the small data area to 64KB, but allows the
           variables to be directly accessed via a single
           instruction.

           The default is --mmllaarrggee--ddaattaa.  With this option the
           data area is limited to just below 2GB.  Programs that
           require more than 2GB of data must use "malloc" or
           "mmap" to allocate the data in the heap instead of in
           the program's data segment.

           When generating code for shared libraries, --ffppiicc



gcc-4.3.2                   2008-08-27                        170





GCC(1)                         GNU                         GCC(1)


           implies --mmssmmaallll--ddaattaa and --ffPPIICC implies --mmllaarrggee--ddaattaa.

       --mmssmmaallll--tteexxtt
       --mmllaarrggee--tteexxtt
           When --mmssmmaallll--tteexxtt is used, the compiler assumes that
           the code of the entire program (or shared library)
           fits in 4MB, and is thus reachable with a branch
           instruction.  When --mmssmmaallll--ddaattaa is used, the compiler
           can assume that all local symbols share the same $gp
           value, and thus reduce the number of instructions
           required for a function call from 4 to 1.

           The default is --mmllaarrggee--tteexxtt.

       --mmccppuu==_c_p_u___t_y_p_e
           Set the instruction set and instruction scheduling
           parameters for machine type _c_p_u___t_y_p_e.  You can specify
           either the EEVV style name or the corresponding chip
           number.  GCC supports scheduling parameters for the
           EV4, EV5 and EV6 family of processors and will choose
           the default values for the instruction set from the
           processor you specify.  If you do not specify a
           processor type, GCC will default to the processor on
           which the compiler was built.

           Supported values for _c_p_u___t_y_p_e are

           eevv44
           eevv4455
           2211006644
               Schedules as an EV4 and has no instruction set
               extensions.

           eevv55
           2211116644
               Schedules as an EV5 and has no instruction set
               extensions.

           eevv5566
           2211116644aa
               Schedules as an EV5 and supports the BWX
               extension.

           ppccaa5566
           2211116644ppcc
           2211116644PPCC
               Schedules as an EV5 and supports the BWX and MAX
               extensions.

           eevv66
           2211226644
               Schedules as an EV6 and supports the BWX, FIX, and
               MAX extensions.




gcc-4.3.2                   2008-08-27                        171





GCC(1)                         GNU                         GCC(1)


           eevv6677
           2211226644aa
               Schedules as an EV6 and supports the BWX, CIX,
               FIX, and MAX extensions.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set only the instruction scheduling parameters for
           machine type _c_p_u___t_y_p_e.  The instruction set is not
           changed.

       --mmmmeemmoorryy--llaatteennccyy==_t_i_m_e
           Sets the latency the scheduler should assume for
           typical memory references as seen by the application.
           This number is highly dependent on the memory access
           patterns used by the application and the size of the
           external cache on the machine.

           Valid options for _t_i_m_e are

           _n_u_m_b_e_r
               A decimal number representing clock cycles.

           LL11
           LL22
           LL33
           mmaaiinn
               The compiler contains estimates of the number of
               clock cycles for "typical" EV4 & EV5 hardware for
               the Level 1, 2 & 3 caches (also called Dcache,
               Scache, and Bcache), as well as to main memory.
               Note that L3 is only valid for EV5.

       _D_E_C _A_l_p_h_a_/_V_M_S _O_p_t_i_o_n_s

       These --mm options are defined for the DEC Alpha/VMS
       implementations:

       --mmvvmmss--rreettuurrnn--ccooddeess
           Return VMS condition codes from main.  The default is
           to return POSIX style condition (e.g. error) codes.

       _F_R_V _O_p_t_i_o_n_s

       --mmggpprr--3322
           Only use the first 32 general purpose registers.

       --mmggpprr--6644
           Use all 64 general purpose registers.

       --mmffpprr--3322
           Use only the first 32 floating point registers.

       --mmffpprr--6644
           Use all 64 floating point registers



gcc-4.3.2                   2008-08-27                        172





GCC(1)                         GNU                         GCC(1)


       --mmhhaarrdd--ffllooaatt
           Use hardware instructions for floating point
           operations.

       --mmssoofftt--ffllooaatt
           Use library routines for floating point operations.

       --mmaalllloocc--cccc
           Dynamically allocate condition code registers.

       --mmffiixxeedd--cccc
           Do not try to dynamically allocate condition code
           registers, only use "icc0" and "fcc0".

       --mmddwwoorrdd
           Change ABI to use double word insns.

       --mmnnoo--ddwwoorrdd
           Do not use double word instructions.

       --mmddoouubbllee
           Use floating point double instructions.

       --mmnnoo--ddoouubbllee
           Do not use floating point double instructions.

       --mmmmeeddiiaa
           Use media instructions.

       --mmnnoo--mmeeddiiaa
           Do not use media instructions.

       --mmmmuullaadddd
           Use multiply and add/subtract instructions.

       --mmnnoo--mmuullaadddd
           Do not use multiply and add/subtract instructions.

       --mmffddppiicc
           Select the FDPIC ABI, that uses function descriptors
           to represent pointers to functions.  Without any
           PIC/PIE-related options, it implies --ffPPIIEE.  With --ffppiicc
           or --ffppiiee, it assumes GOT entries and small data are
           within a 12-bit range from the GOT base address; with
           --ffPPIICC or --ffPPIIEE, GOT offsets are computed with 32 bits.
           With a bbffiinn--eellff target, this option implies --mmssiimm.

       --mmiinnlliinnee--pplltt
           Enable inlining of PLT entries in function calls to
           functions that are not known to bind locally.  It has
           no effect without --mmffddppiicc.  It's enabled by default if
           optimizing for speed and compiling for shared
           libraries (i.e., --ffPPIICC or --ffppiicc), or when an
           optimization option such as --OO33 or above is present in



gcc-4.3.2                   2008-08-27                        173





GCC(1)                         GNU                         GCC(1)


           the command line.

       --mmTTLLSS
           Assume a large TLS segment when generating thread-
           local code.

       --mmttllss
           Do not assume a large TLS segment when generating
           thread-local code.

       --mmggpprreell--rroo
           Enable the use of "GPREL" relocations in the FDPIC ABI
           for data that is known to be in read-only sections.
           It's enabled by default, except for --ffppiicc or --ffppiiee:
           even though it may help make the global offset table
           smaller, it trades 1 instruction for 4.  With --ffPPIICC or
           --ffPPIIEE, it trades 3 instructions for 4, one of which
           may be shared by multiple symbols, and it avoids the
           need for a GOT entry for the referenced symbol, so
           it's more likely to be a win.  If it is not,
           --mmnnoo--ggpprreell--rroo can be used to disable it.

       --mmuullttiilliibb--lliibbrraarryy--ppiicc
           Link with the (library, not FD) pic libraries.  It's
           implied by --mmlliibbrraarryy--ppiicc, as well as by --ffPPIICC and
           --ffppiicc without --mmffddppiicc.  You should never have to use
           it explicitly.

       --mmlliinnkkeedd--ffpp
           Follow the EABI requirement of always creating a frame
           pointer whenever a stack frame is allocated.  This
           option is enabled by default and can be disabled with
           --mmnnoo--lliinnkkeedd--ffpp.

       --mmlloonngg--ccaallllss
           Use indirect addressing to call functions outside the
           current compilation unit.  This allows the functions
           to be placed anywhere within the 32-bit address space.

       --mmaalliiggnn--llaabbeellss
           Try to align labels to an 8-byte boundary by inserting
           nops into the previous packet.  This option only has
           an effect when VLIW packing is enabled.  It doesn't
           create new packets; it merely adds nops to existing
           ones.

       --mmlliibbrraarryy--ppiicc
           Generate position-independent EABI code.

       --mmaacccc--44
           Use only the first four media accumulator registers.

       --mmaacccc--88
           Use all eight media accumulator registers.



gcc-4.3.2                   2008-08-27                        174





GCC(1)                         GNU                         GCC(1)


       --mmppaacckk
           Pack VLIW instructions.

       --mmnnoo--ppaacckk
           Do not pack VLIW instructions.

       --mmnnoo--eeffllaaggss
           Do not mark ABI switches in e_flags.

       --mmccoonndd--mmoovvee
           Enable the use of conditional-move instructions
           (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnnoo--ccoonndd--mmoovvee
           Disable the use of conditional-move instructions.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmsscccc
           Enable the use of conditional set instructions
           (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnnoo--sscccc
           Disable the use of conditional set instructions.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmccoonndd--eexxeecc
           Enable the use of conditional execution (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnnoo--ccoonndd--eexxeecc
           Disable the use of conditional execution.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmvvlliiww--bbrraanncchh
           Run a pass to pack branches into VLIW instructions
           (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.




gcc-4.3.2                   2008-08-27                        175





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--vvlliiww--bbrraanncchh
           Do not run a pass to pack branches into VLIW
           instructions.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmmmuullttii--ccoonndd--eexxeecc
           Enable optimization of "&&" and "||" in conditional
           execution (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnnoo--mmuullttii--ccoonndd--eexxeecc
           Disable optimization of "&&" and "||" in conditional
           execution.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnneesstteedd--ccoonndd--eexxeecc
           Enable nested conditional execution optimizations
           (default).

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmnnoo--nneesstteedd--ccoonndd--eexxeecc
           Disable nested conditional execution optimizations.

           This switch is mainly for debugging the compiler and
           will likely be removed in a future version.

       --mmooppttiimmiizzee--mmeemmbbaarr
           This switch removes redundant "membar" instructions
           from the compiler generated code.  It is enabled by
           default.

       --mmnnoo--ooppttiimmiizzee--mmeemmbbaarr
           This switch disables the automatic removal of
           redundant "membar" instructions from the generated
           code.

       --mmttoommccaatt--ssttaattss
           Cause gas to print out tomcat statistics.

       --mmccppuu==_c_p_u
           Select the processor type for which to generate code.
           Possible values are ffrrvv, ffrr555500, ttoommccaatt, ffrr550000, ffrr445500,
           ffrr440055, ffrr440000, ffrr330000 and ssiimmppllee.

       _G_N_U_/_L_i_n_u_x _O_p_t_i_o_n_s




gcc-4.3.2                   2008-08-27                        176





GCC(1)                         GNU                         GCC(1)


       These --mm options are defined for GNU/Linux targets:

       --mmgglliibbcc
           Use the GNU C library instead of uClibc.  This is the
           default except on **--**--lliinnuuxx--**uucclliibbcc** targets.

       --mmuucclliibbcc
           Use uClibc instead of the GNU C library.  This is the
           default on **--**--lliinnuuxx--**uucclliibbcc** targets.

       _H_8_/_3_0_0 _O_p_t_i_o_n_s

       These --mm options are defined for the H8/300
       implementations:

       --mmrreellaaxx
           Shorten some address references at link time, when
           possible; uses the linker option --rreellaaxx.

       --mmhh Generate code for the H8/300H.

       --mmss Generate code for the H8S.

       --mmnn Generate code for the H8S and H8/300H in the normal
           mode.  This switch must be used either with --mmhh or
           --mmss.

       --mmss22660000
           Generate code for the H8S/2600.  This switch must be
           used with --mmss.

       --mmiinntt3322
           Make "int" data 32 bits by default.

       --mmaalliiggnn--330000
           On the H8/300H and H8S, use the same alignment rules
           as for the H8/300.  The default for the H8/300H and
           H8S is to align longs and floats on 4 byte boundaries.
           --mmaalliiggnn--330000 causes them to be aligned on 2 byte
           boundaries.  This option has no effect on the H8/300.

       _H_P_P_A _O_p_t_i_o_n_s

       These --mm options are defined for the HPPA family of
       computers:

       --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Generate code for the specified architecture.  The
           choices for _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are 11..00 for PA 1.0, 11..11
           for PA 1.1, and 22..00 for PA 2.0 processors.  Refer to
           _/_u_s_r_/_l_i_b_/_s_c_h_e_d_._m_o_d_e_l_s on an HP-UX system to determine
           the proper architecture option for your machine.  Code
           compiled for lower numbered architectures will run on
           higher numbered architectures, but not the other way



gcc-4.3.2                   2008-08-27                        177





GCC(1)                         GNU                         GCC(1)


           around.

       --mmppaa--rriisscc--11--00
       --mmppaa--rriisscc--11--11
       --mmppaa--rriisscc--22--00
           Synonyms for --mmaarrcchh==11..00, --mmaarrcchh==11..11, and --mmaarrcchh==22..00
           respectively.

       --mmbbiigg--sswwiittcchh
           Generate code suitable for big switch tables.  Use
           this option only if the assembler/linker complain
           about out of range branches within a switch table.

       --mmjjuummpp--iinn--ddeellaayy
           Fill delay slots of function calls with unconditional
           jump instructions by modifying the return pointer for
           the function call to be the target of the conditional
           jump.

       --mmddiissaabbllee--ffpprreeggss
           Prevent floating point registers from being used in
           any manner.  This is necessary for compiling kernels
           which perform lazy context switching of floating point
           registers.  If you use this option and attempt to
           perform floating point operations, the compiler will
           abort.

       --mmddiissaabbllee--iinnddeexxiinngg
           Prevent the compiler from using indexing address
           modes.  This avoids some rather obscure problems when
           compiling MIG generated code under MACH.

       --mmnnoo--ssppaaccee--rreeggss
           Generate code that assumes the target has no space
           registers.  This allows GCC to generate faster
           indirect calls and use unscaled index address modes.

           Such code is suitable for level 0 PA systems and
           kernels.

       --mmffaasstt--iinnddiirreecctt--ccaallllss
           Generate code that assumes calls never cross space
           boundaries.  This allows GCC to emit code which
           performs faster indirect calls.

           This option will not work in the presence of shared
           libraries or nested functions.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as
           fixed registers.  A fixed register is one that the
           register allocator can not use.  This is useful when
           compiling kernel code.  A register range is specified
           as two registers separated by a dash.  Multiple



gcc-4.3.2                   2008-08-27                        178





GCC(1)                         GNU                         GCC(1)


           register ranges can be specified separated by a comma.

       --mmlloonngg--llooaadd--ssttoorree
           Generate 3-instruction load and store sequences as
           sometimes required by the HP-UX 10 linker.  This is
           equivalent to the ++kk option to the HP compilers.

       --mmppoorrttaabbllee--rruunnttiimmee
           Use the portable calling conventions proposed by HP
           for ELF systems.

       --mmggaass
           Enable the use of assembler directives only GAS
           understands.

       --mmsscchheedduullee==_c_p_u_-_t_y_p_e
           Schedule code according to the constraints for the
           machine type _c_p_u_-_t_y_p_e.  The choices for _c_p_u_-_t_y_p_e are
           770000 77110000, 77110000LLCC, 77220000, 77330000 and 88000000.  Refer to
           _/_u_s_r_/_l_i_b_/_s_c_h_e_d_._m_o_d_e_l_s on an HP-UX system to determine
           the proper scheduling option for your machine.  The
           default scheduling is 88000000.

       --mmlliinnkkeerr--oopptt
           Enable the optimization pass in the HP-UX linker.
           Note this makes symbolic debugging impossible.  It
           also triggers a bug in the HP-UX 8 and HP-UX 9 linkers
           in which they give bogus error messages when linking
           some programs.

       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating
           point.  WWaarrnniinngg:: the requisite libraries are not
           available for all HPPA targets.  Normally the
           facilities of the machine's usual C compiler are used,
           but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide
           suitable library functions for cross-compilation.  The
           embedded target hhppppaa11..11--**--pprroo does provide software
           floating point support.

           --mmssoofftt--ffllooaatt changes the calling convention in the
           output file; therefore, it is only useful if you
           compile _a_l_l of a program with this option.  In
           particular, you need to compile _l_i_b_g_c_c_._a, the library
           that comes with GCC, with --mmssoofftt--ffllooaatt in order for
           this to work.

       --mmssiioo
           Generate the predefine, "_SIO", for server IO.  The
           default is --mmwwssiioo.  This generates the predefines,
           "__hp9000s700", "__hp9000s700__" and "_WSIO", for
           workstation IO.  These options are available under HP-
           UX and HI-UX.



gcc-4.3.2                   2008-08-27                        179





GCC(1)                         GNU                         GCC(1)


       --mmggnnuu--lldd
           Use GNU ld specific options.  This passes --sshhaarreedd to
           ld when building a shared library.  It is the default
           when GCC is configured, explicitly or implicitly, with
           the GNU linker.  This option does not have any affect
           on which ld is called, it only changes what parameters
           are passed to that ld.  The ld that is called is
           determined by the ----wwiitthh--lldd configure option, GCC's
           program search path, and finally by the user's PPAATTHH.
           The linker used by GCC can be printed using wwhhiicchh ``ggcccc
           --pprriinntt--pprroogg--nnaammee==lldd``.  This option is only available
           on the 64 bit HP-UX GCC, i.e. configured with
           hhppppaa**6644**--**--hhppuuxx**.

       --mmhhpp--lldd
           Use HP ld specific options.  This passes --bb to ld when
           building a shared library and passes ++AAcccceepptt
           TTyyppeeMMiissmmaattcchh to ld on all links.  It is the default
           when GCC is configured, explicitly or implicitly, with
           the HP linker.  This option does not have any affect
           on which ld is called, it only changes what parameters
           are passed to that ld.  The ld that is called is
           determined by the ----wwiitthh--lldd configure option, GCC's
           program search path, and finally by the user's PPAATTHH.
           The linker used by GCC can be printed using wwhhiicchh ``ggcccc
           --pprriinntt--pprroogg--nnaammee==lldd``.  This option is only available
           on the 64 bit HP-UX GCC, i.e. configured with
           hhppppaa**6644**--**--hhppuuxx**.

       --mmlloonngg--ccaallllss
           Generate code that uses long call sequences.  This
           ensures that a call is always able to reach linker
           generated stubs.  The default is to generate long
           calls only when the distance from the call site to the
           beginning of the function or translation unit, as the
           case may be, exceeds a predefined limit set by the
           branch type being used.  The limits for normal calls
           are 7,600,000 and 240,000 bytes, respectively for the
           PA 2.0 and PA 1.X architectures.  Sibcalls are always
           limited at 240,000 bytes.

           Distances are measured from the beginning of functions
           when using the --ffffuunnccttiioonn--sseeccttiioonnss option, or when
           using the --mmggaass and --mmnnoo--ppoorrttaabbllee--rruunnttiimmee options
           together under HP-UX with the SOM linker.

           It is normally not desirable to use this option as it
           will degrade performance.  However, it may be useful
           in large applications, particularly when partial
           linking is used to build the application.

           The types of long calls used depends on the
           capabilities of the assembler and linker, and the type
           of code being generated.  The impact on systems that



gcc-4.3.2                   2008-08-27                        180





GCC(1)                         GNU                         GCC(1)


           support long absolute calls, and long pic symbol-
           difference or pc-relative calls should be relatively
           small.  However, an indirect call is used on 32-bit
           ELF systems in pic code and it is quite long.

       --mmuunniixx==_u_n_i_x_-_s_t_d
           Generate compiler predefines and select a startfile
           for the specified UNIX standard.  The choices for
           _u_n_i_x_-_s_t_d are 9933, 9955 and 9988.  9933 is supported on all
           HP-UX versions.  9955 is available on HP-UX 10.10 and
           later.  9988 is available on HP-UX 11.11 and later.  The
           default values are 9933 for HP-UX 10.00, 9955 for HP-UX
           10.10 though to 11.00, and 9988 for HP-UX 11.11 and
           later.

           --mmuunniixx==9933 provides the same predefines as GCC 3.3 and
           3.4.  --mmuunniixx==9955 provides additional predefines for
           "XOPEN_UNIX" and "_XOPEN_SOURCE_EXTENDED", and the
           startfile _u_n_i_x_9_5_._o.  --mmuunniixx==9988 provides additional
           predefines for "_XOPEN_UNIX",
           "_XOPEN_SOURCE_EXTENDED", "_INCLUDE__STDC_A1_SOURCE"
           and "_INCLUDE_XOPEN_SOURCE_500", and the startfile
           _u_n_i_x_9_8_._o.

           It is _i_m_p_o_r_t_a_n_t to note that this option changes the
           interfaces for various library routines.  It also
           affects the operational behavior of the C library.
           Thus, _e_x_t_r_e_m_e care is needed in using this option.

           Library code that is intended to operate with more
           than one UNIX standard must test, set and restore the
           variable _____x_p_g_4___e_x_t_e_n_d_e_d___m_a_s_k as appropriate.  Most
           GNU software doesn't provide this capability.

       --nnoolliibbddlldd
           Suppress the generation of link options to search
           libdld.sl when the --ssttaattiicc option is specified on HP-
           UX 10 and later.

       --ssttaattiicc
           The HP-UX implementation of setlocale in libc has a
           dependency on libdld.sl.  There isn't an archive
           version of libdld.sl.  Thus, when the --ssttaattiicc option
           is specified, special link options are needed to
           resolve this dependency.

           On HP-UX 10 and later, the GCC driver adds the
           necessary options to link with libdld.sl when the
           --ssttaattiicc option is specified.  This causes the
           resulting binary to be dynamic.  On the 64-bit port,
           the linkers generate dynamic binaries by default in
           any case.  The --nnoolliibbddlldd option can be used to prevent
           the GCC driver from adding these link options.




gcc-4.3.2                   2008-08-27                        181





GCC(1)                         GNU                         GCC(1)


       --tthhrreeaaddss
           Add support for multithreading with the _d_c_e _t_h_r_e_a_d
           library under HP-UX.  This option sets flags for both
           the preprocessor and linker.

       _I_n_t_e_l _3_8_6 _a_n_d _A_M_D _x_8_6_-_6_4 _O_p_t_i_o_n_s

       These --mm options are defined for the i386 and x86-64
       family of computers:

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune to _c_p_u_-_t_y_p_e everything applicable about the
           generated code, except for the ABI and the set of
           available instructions.  The choices for _c_p_u_-_t_y_p_e are:

           _g_e_n_e_r_i_c
               Produce code optimized for the most common
               IA32/AMD64/EM64T processors.  If you know the CPU
               on which your code will run, then you should use
               the corresponding --mmttuunnee option instead of
               --mmttuunnee==ggeenneerriicc.  But, if you do not know exactly
               what CPU users of your application will have, then
               you should use this option.

               As new processors are deployed in the marketplace,
               the behavior of this option will change.
               Therefore, if you upgrade to a newer version of
               GCC, the code generated option will change to
               reflect the processors that were most common when
               that version of GCC was released.

               There is no --mmaarrcchh==ggeenneerriicc option because --mmaarrcchh
               indicates the instruction set the compiler can
               use, and there is no generic instruction set
               applicable to all processors.  In contrast, --mmttuunnee
               indicates the processor (or, in this case,
               collection of processors) for which the code is
               optimized.

           _n_a_t_i_v_e
               This selects the CPU to tune for at compilation
               time by determining the processor type of the
               compiling machine.  Using --mmttuunnee==nnaattiivvee will
               produce code optimized for the local machine under
               the constraints of the selected instruction set.
               Using --mmaarrcchh==nnaattiivvee will enable all instruction
               subsets supported by the local machine (hence the
               result might not run on different machines).

           _i_3_8_6
               Original Intel's i386 CPU.

           _i_4_8_6
               Intel's i486 CPU.  (No scheduling is implemented



gcc-4.3.2                   2008-08-27                        182





GCC(1)                         GNU                         GCC(1)


               for this chip.)

           _i_5_8_6_, _p_e_n_t_i_u_m
               Intel Pentium CPU with no MMX support.

           _p_e_n_t_i_u_m_-_m_m_x
               Intel PentiumMMX CPU based on Pentium core with
               MMX instruction set support.

           _p_e_n_t_i_u_m_p_r_o
               Intel PentiumPro CPU.

           _i_6_8_6
               Same as "generic", but when used as "march"
               option, PentiumPro instruction set will be used,
               so the code will run on all i686 family chips.

           _p_e_n_t_i_u_m_2
               Intel Pentium2 CPU based on PentiumPro core with
               MMX instruction set support.

           _p_e_n_t_i_u_m_3_, _p_e_n_t_i_u_m_3_m
               Intel Pentium3 CPU based on PentiumPro core with
               MMX and SSE instruction set support.

           _p_e_n_t_i_u_m_-_m
               Low power version of Intel Pentium3 CPU with MMX,
               SSE and SSE2 instruction set support.  Used by
               Centrino notebooks.

           _p_e_n_t_i_u_m_4_, _p_e_n_t_i_u_m_4_m
               Intel Pentium4 CPU with MMX, SSE and SSE2
               instruction set support.

           _p_r_e_s_c_o_t_t
               Improved version of Intel Pentium4 CPU with MMX,
               SSE, SSE2 and SSE3 instruction set support.

           _n_o_c_o_n_a
               Improved version of Intel Pentium4 CPU with 64-bit
               extensions, MMX, SSE, SSE2 and SSE3 instruction
               set support.

           _c_o_r_e_2
               Intel Core2 CPU with 64-bit extensions, MMX, SSE,
               SSE2, SSE3 and SSSE3 instruction set support.

           _k_6  AMD K6 CPU with MMX instruction set support.

           _k_6_-_2_, _k_6_-_3
               Improved versions of AMD K6 CPU with MMX and
               3dNOW! instruction set support.





gcc-4.3.2                   2008-08-27                        183





GCC(1)                         GNU                         GCC(1)


           _a_t_h_l_o_n_, _a_t_h_l_o_n_-_t_b_i_r_d
               AMD Athlon CPU with MMX, 3dNOW!, enhanced 3dNOW!
               and SSE prefetch instructions support.

           _a_t_h_l_o_n_-_4_, _a_t_h_l_o_n_-_x_p_, _a_t_h_l_o_n_-_m_p
               Improved AMD Athlon CPU with MMX, 3dNOW!, enhanced
               3dNOW! and full SSE instruction set support.

           _k_8_, _o_p_t_e_r_o_n_, _a_t_h_l_o_n_6_4_, _a_t_h_l_o_n_-_f_x
               AMD K8 core based CPUs with x86-64 instruction set
               support.  (This supersets MMX, SSE, SSE2, 3dNOW!,
               enhanced 3dNOW! and 64-bit instruction set
               extensions.)

           _k_8_-_s_s_e_3_, _o_p_t_e_r_o_n_-_s_s_e_3_, _a_t_h_l_o_n_6_4_-_s_s_e_3
               Improved versions of k8, opteron and athlon64 with
               SSE3 instruction set support.

           _a_m_d_f_a_m_1_0_, _b_a_r_c_e_l_o_n_a
               AMD Family 10h core based CPUs with x86-64
               instruction set support.  (This supersets MMX,
               SSE, SSE2, SSE3, SSE4A, 3dNOW!, enhanced 3dNOW!,
               ABM and 64-bit instruction set extensions.)

           _w_i_n_c_h_i_p_-_c_6
               IDT Winchip C6 CPU, dealt in same way as i486 with
               additional MMX instruction set support.

           _w_i_n_c_h_i_p_2
               IDT Winchip2 CPU, dealt in same way as i486 with
               additional MMX and 3dNOW!  instruction set
               support.

           _c_3  Via C3 CPU with MMX and 3dNOW! instruction set
               support.  (No scheduling is implemented for this
               chip.)

           _c_3_-_2
               Via C3-2 CPU with MMX and SSE instruction set
               support.  (No scheduling is implemented for this
               chip.)

           _g_e_o_d_e
               Embedded AMD CPU with MMX and 3dNOW! instruction
               set support.

           While picking a specific _c_p_u_-_t_y_p_e will schedule things
           appropriately for that particular chip, the compiler
           will not generate any code that does not run on the
           i386 without the --mmaarrcchh==_c_p_u_-_t_y_p_e option being used.

       --mmaarrcchh==_c_p_u_-_t_y_p_e
           Generate instructions for the machine type _c_p_u_-_t_y_p_e.
           The choices for _c_p_u_-_t_y_p_e are the same as for --mmttuunnee.



gcc-4.3.2                   2008-08-27                        184





GCC(1)                         GNU                         GCC(1)


           Moreover, specifying --mmaarrcchh==_c_p_u_-_t_y_p_e implies
           --mmttuunnee==_c_p_u_-_t_y_p_e.

       --mmccppuu==_c_p_u_-_t_y_p_e
           A deprecated synonym for --mmttuunnee.

       --mmffppmmaatthh==_u_n_i_t
           Generate floating point arithmetics for selected unit
           _u_n_i_t.  The choices for _u_n_i_t are:

           338877 Use the standard 387 floating point coprocessor
               present majority of chips and emulated otherwise.
               Code compiled with this option will run almost
               everywhere.  The temporary results are computed in
               80bit precision instead of precision specified by
               the type resulting in slightly different results
               compared to most of other chips.  See
               --ffffllooaatt--ssttoorree for more detailed description.

               This is the default choice for i386 compiler.

           ssssee Use scalar floating point instructions present in
               the SSE instruction set.  This instruction set is
               supported by Pentium3 and newer chips, in the AMD
               line by Athlon-4, Athlon-xp and Athlon-mp chips.
               The earlier version of SSE instruction set
               supports only single precision arithmetics, thus
               the double and extended precision arithmetics is
               still done using 387.  Later version, present only
               in Pentium4 and the future AMD x86-64 chips
               supports double precision arithmetics too.

               For the i386 compiler, you need to use --mmaarrcchh==_c_p_u_-
               _t_y_p_e, --mmssssee or --mmssssee22 switches to enable SSE
               extensions and make this option effective.  For
               the x86-64 compiler, these extensions are enabled
               by default.

               The resulting code should be considerably faster
               in the majority of cases and avoid the numerical
               instability problems of 387 code, but may break
               some existing code that expects temporaries to be
               80bit.

               This is the default choice for the x86-64
               compiler.

           ssssee,,338877
               Attempt to utilize both instruction sets at once.
               This effectively double the amount of available
               registers and on chips with separate execution
               units for 387 and SSE the execution resources too.
               Use this option with care, as it is still
               experimental, because the GCC register allocator



gcc-4.3.2                   2008-08-27                        185





GCC(1)                         GNU                         GCC(1)


               does not model separate functional units well
               resulting in instable performance.

       --mmaassmm==_d_i_a_l_e_c_t
           Output asm instructions using selected _d_i_a_l_e_c_t.
           Supported choices are iinntteell or aatttt (the default one).
           Darwin does not support iinntteell.

       --mmiieeeeee--ffpp
       --mmnnoo--iieeeeee--ffpp
           Control whether or not the compiler uses IEEE floating
           point comparisons.  These handle correctly the case
           where the result of a comparison is unordered.

       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating
           point.  WWaarrnniinngg:: the requisite libraries are not part
           of GCC.  Normally the facilities of the machine's
           usual C compiler are used, but this can't be done
           directly in cross-compilation.  You must make your own
           arrangements to provide suitable library functions for
           cross-compilation.

           On machines where a function returns floating point
           results in the 80387 register stack, some floating
           point opcodes may be emitted even if --mmssoofftt--ffllooaatt is
           used.

       --mmnnoo--ffpp--rreett--iinn--338877
           Do not use the FPU registers for return values of
           functions.

           The usual calling convention has functions return
           values of types "float" and "double" in an FPU
           register, even if there is no FPU.  The idea is that
           the operating system should emulate an FPU.

           The option --mmnnoo--ffpp--rreett--iinn--338877 causes such values to be
           returned in ordinary CPU registers instead.

       --mmnnoo--ffaannccyy--mmaatthh--338877
           Some 387 emulators do not support the "sin", "cos" and
           "sqrt" instructions for the 387.  Specify this option
           to avoid generating those instructions.  This option
           is the default on FreeBSD, OpenBSD and NetBSD.  This
           option is overridden when --mmaarrcchh indicates that the
           target cpu will always have an FPU and so the
           instruction will not need emulation.  As of revision
           2.6.1, these instructions are not generated unless you
           also use the --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss switch.

       --mmaalliiggnn--ddoouubbllee
       --mmnnoo--aalliiggnn--ddoouubbllee
           Control whether GCC aligns "double", "long double",



gcc-4.3.2                   2008-08-27                        186





GCC(1)                         GNU                         GCC(1)


           and "long long" variables on a two word boundary or a
           one word boundary.  Aligning "double" variables on a
           two word boundary will produce code that runs somewhat
           faster on a PPeennttiiuumm at the expense of more memory.

           On x86-64, --mmaalliiggnn--ddoouubbllee is enabled by default.

           WWaarrnniinngg:: if you use the --mmaalliiggnn--ddoouubbllee switch,
           structures containing the above types will be aligned
           differently than the published application binary
           interface specifications for the 386 and will not be
           binary compatible with structures in code compiled
           without that switch.

       --mm9966bbiitt--lloonngg--ddoouubbllee
       --mm112288bbiitt--lloonngg--ddoouubbllee
           These switches control the size of "long double" type.
           The i386 application binary interface specifies the
           size to be 96 bits, so --mm9966bbiitt--lloonngg--ddoouubbllee is the
           default in 32 bit mode.

           Modern architectures (Pentium and newer) would prefer
           "long double" to be aligned to an 8 or 16 byte
           boundary.  In arrays or structures conforming to the
           ABI, this would not be possible.  So specifying a
           --mm112288bbiitt--lloonngg--ddoouubbllee will align "long double" to a 16
           byte boundary by padding the "long double" with an
           additional 32 bit zero.

           In the x86-64 compiler, --mm112288bbiitt--lloonngg--ddoouubbllee is the
           default choice as its ABI specifies that "long double"
           is to be aligned on 16 byte boundary.

           Notice that neither of these options enable any extra
           precision over the x87 standard of 80 bits for a "long
           double".

           WWaarrnniinngg:: if you override the default value for your
           target ABI, the structures and arrays containing "long
           double" variables will change their size as well as
           function calling convention for function taking "long
           double" will be modified.  Hence they will not be
           binary compatible with arrays or structures in code
           compiled without that switch.

       --mmmmllaarrggee--ddaattaa--tthhrreesshhoolldd==_n_u_m_b_e_r
           When --mmccmmooddeell==mmeeddiiuumm is specified, the data greater
           than _t_h_r_e_s_h_o_l_d are placed in large data section.  This
           value must be the same across all object linked into
           the binary and defaults to 65535.

       --mmrrttdd
           Use a different function-calling convention, in which
           functions that take a fixed number of arguments return



gcc-4.3.2                   2008-08-27                        187





GCC(1)                         GNU                         GCC(1)


           with the "ret" _n_u_m instruction, which pops their
           arguments while returning.  This saves one instruction
           in the caller since there is no need to pop the
           arguments there.

           You can specify that an individual function is called
           with this calling sequence with the function attribute
           ssttddccaallll.  You can also override the --mmrrttdd option by
           using the function attribute ccddeeccll.

           WWaarrnniinngg:: this calling convention is incompatible with
           the one normally used on Unix, so you cannot use it if
           you need to call libraries compiled with the Unix
           compiler.

           Also, you must provide function prototypes for all
           functions that take variable numbers of arguments
           (including "printf"); otherwise incorrect code will be
           generated for calls to those functions.

           In addition, seriously incorrect code will result if
           you call a function with too many arguments.
           (Normally, extra arguments are harmlessly ignored.)

       --mmrreeggppaarrmm==_n_u_m
           Control how many registers are used to pass integer
           arguments.  By default, no registers are used to pass
           arguments, and at most 3 registers can be used.  You
           can control this behavior for a specific function by
           using the function attribute rreeggppaarrmm.

           WWaarrnniinngg:: if you use this switch, and _n_u_m is nonzero,
           then you must build all modules with the same value,
           including any libraries.  This includes the system
           libraries and startup modules.

       --mmsssseerreeggppaarrmm
           Use SSE register passing conventions for float and
           double arguments and return values.  You can control
           this behavior for a specific function by using the
           function attribute sssseerreeggppaarrmm.

           WWaarrnniinngg:: if you use this switch then you must build
           all modules with the same value, including any
           libraries.  This includes the system libraries and
           startup modules.

       --mmppcc3322
       --mmppcc6644
       --mmppcc8800
           Set 80387 floating-point precision to 32, 64 or 80
           bits.  When --mmppcc3322 is specified, the significands of
           results of floating-point operations are rounded to 24
           bits (single precision); --mmppcc6644 rounds the the



gcc-4.3.2                   2008-08-27                        188





GCC(1)                         GNU                         GCC(1)


           significands of results of floating-point operations
           to 53 bits (double precision) and --mmppcc8800 rounds the
           significands of results of floating-point operations
           to 64 bits (extended double precision), which is the
           default.  When this option is used, floating-point
           operations in higher precisions are not available to
           the programmer without setting the FPU control word
           explicitly.

           Setting the rounding of floating-point operations to
           less than the default 80 bits can speed some programs
           by 2% or more.  Note that some mathematical libraries
           assume that extended precision (80 bit) floating-point
           operations are enabled by default; routines in such
           libraries could suffer significant loss of accuracy,
           typically through so-called "catastrophic
           cancellation", when this option is used to set the
           precision to less than extended precision.

       --mmssttaacckkrreeaalliiggnn
           Realign the stack at entry.  On the Intel x86, the
           --mmssttaacckkrreeaalliiggnn option will generate an alternate
           prologue and epilogue that realigns the runtime stack.
           This supports mixing legacy codes that keep a 4-byte
           aligned stack with modern codes that keep a 16-byte
           stack for SSE compatibility.  The alternate prologue
           and epilogue are slower and bigger than the regular
           ones, and the alternate prologue requires an extra
           scratch register; this lowers the number of registers
           available if used in conjunction with the "regparm"
           attribute.  The --mmssttaacckkrreeaalliiggnn option is incompatible
           with the nested function prologue; this is considered
           a hard error.  See also the attribute
           "force_align_arg_pointer", applicable to individual
           functions.

       --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m
           Attempt to keep the stack boundary aligned to a 2
           raised to _n_u_m byte boundary.  If
           --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy is not specified, the
           default is 4 (16 bytes or 128 bits).

           On Pentium and PentiumPro, "double" and "long double"
           values should be aligned to an 8 byte boundary (see
           --mmaalliiggnn--ddoouubbllee) or suffer significant run time
           performance penalties.  On Pentium III, the Streaming
           SIMD Extension (SSE) data type "__m128" may not work
           properly if it is not 16 byte aligned.

           To ensure proper alignment of this values on the
           stack, the stack boundary must be as aligned as that
           required by any value stored on the stack.  Further,
           every function must be generated such that it keeps
           the stack aligned.  Thus calling a function compiled



gcc-4.3.2                   2008-08-27                        189





GCC(1)                         GNU                         GCC(1)


           with a higher preferred stack boundary from a function
           compiled with a lower preferred stack boundary will
           most likely misalign the stack.  It is recommended
           that libraries that use callbacks always use the
           default setting.

           This extra alignment does consume extra stack space,
           and generally increases code size.  Code that is
           sensitive to stack space usage, such as embedded
           systems and operating system kernels, may want to
           reduce the preferred alignment to
           --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==22.

       --mmmmmmxx
       --mmnnoo--mmmmxx
       --mmssssee
       --mmnnoo--ssssee
       --mmssssee22
       --mmnnoo--ssssee22
       --mmssssee33
       --mmnnoo--ssssee33
       --mmssssssee33
       --mmnnoo--ssssssee33
       --mmssssee44..11
       --mmnnoo--ssssee44..11
       --mmssssee44..22
       --mmnnoo--ssssee44..22
       --mmssssee44
       --mmnnoo--ssssee44
       --mmssssee44aa
       --mmnnoo--ssssee44aa
       --mmssssee55
       --mmnnoo--ssssee55
       --mm33ddnnooww
       --mmnnoo--33ddnnooww
       --mmppooppccnntt
       --mmnnoo--ppooppccnntt
       --mmaabbmm
       --mmnnoo--aabbmm
           These switches enable or disable the use of
           instructions in the MMX, SSE, SSE2, SSE3, SSSE3,
           SSE4.1, SSE4A, SSE5, ABM or 3DNow! extended
           instruction sets.  These extensions are also available
           as built-in functions: see XX8866 BBuuiilltt--iinn FFuunnccttiioonnss, for
           details of the functions enabled and disabled by these
           switches.

           To have SSE/SSE2 instructions generated automatically
           from floating-point code (as opposed to 387
           instructions), see --mmffppmmaatthh==ssssee.

           These options will enable GCC to use these extended
           instructions in generated code, even without
           --mmffppmmaatthh==ssssee.  Applications which perform runtime CPU



gcc-4.3.2                   2008-08-27                        190





GCC(1)                         GNU                         GCC(1)


           detection must compile separate files for each
           supported architecture, using the appropriate flags.
           In particular, the file containing the CPU detection
           code should be compiled without these options.

       --mmcclldd
           This option instructs GCC to emit a "cld" instruction
           in the prologue of functions that use string
           instructions.  String instructions depend on the DF
           flag to select between autoincrement or autodecrement
           mode.  While the ABI specifies the DF flag to be
           cleared on function entry, some operating systems
           violate this specification by not clearing the DF flag
           in their exception dispatchers.  The exception handler
           can be invoked with the DF flag set which leads to
           wrong direction mode, when string instructions are
           used.  This option can be enabled by default on 32-bit
           x86 targets by configuring GCC with the ----eennaabbllee--cclldd
           configure option.  Generation of "cld" instructions
           can be suppressed with the --mmnnoo--cclldd compiler option in
           this case.

       --mmccxx1166
           This option will enable GCC to use CMPXCHG16B
           instruction in generated code.  CMPXCHG16B allows for
           atomic operations on 128-bit double quadword (or
           oword) data types.  This is useful for high resolution
           counters that could be updated by multiple processors
           (or cores).  This instruction is generated as part of
           atomic built-in functions: see AAttoommiicc BBuuiillttiinnss for
           details.

       --mmssaahhff
           This option will enable GCC to use SAHF instruction in
           generated 64-bit code.  Early Intel CPUs with Intel 64
           lacked LAHF and SAHF instructions supported by AMD64
           until introduction of Pentium 4 G1 step in December
           2005.  LAHF and SAHF are load and store instructions,
           respectively, for certain status flags.  In 64-bit
           mode, SAHF instruction is used to optimize "fmod",
           "drem" or "remainder" built-in functions: see OOtthheerr
           BBuuiillttiinnss for details.

       --mmrreecciipp
           This option will enable GCC to use RCPSS and RSQRTSS
           instructions (and their vectorized variants RCPPS and
           RSQRTPS) with an additional Newton-Rhapson step to
           increase precision instead of DIVSS and SQRTSS (and
           their vectorized variants) for single precision
           floating point arguments.  These instructions are
           generated only when --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss is
           enabled together with --ffiinniittee--mmaatthh--oonnllyy and
           --ffnnoo--ttrraappppiinngg--mmaatthh.  Note that while the throughput of
           the sequence is higher than the throughput of the non-



gcc-4.3.2                   2008-08-27                        191





GCC(1)                         GNU                         GCC(1)


           reciprocal instruction, the precision of the sequence
           can be decreased by up to 2 ulp (i.e. the inverse of
           1.0 equals 0.99999994).

       --mmvveecclliibbaabbii==_t_y_p_e
           Specifies the ABI type to use for vectorizing
           intrinsics using an external library.  Supported types
           are "acml" for the AMD math core library style of
           interfacing.  GCC will currently emit calls to
           "__vrd2_sin", "__vrd2_cos", "__vrd2_exp",
           "__vrd2_log", "__vrd2_log2", "__vrd2_log10",
           "__vrs4_sinf", "__vrs4_cosf", "__vrs4_expf",
           "__vrs4_logf", "__vrs4_log2f", "__vrs4_log10f" and
           "__vrs4_powf" when using this type and
           --ffttrreeee--vveeccttoorriizzee is enabled.  A ACML ABI compatible
           library will have to be specified at link time.

       --mmppuusshh--aarrggss
       --mmnnoo--ppuusshh--aarrggss
           Use PUSH operations to store outgoing parameters.
           This method is shorter and usually equally fast as
           method using SUB/MOV operations and is enabled by
           default.  In some cases disabling it may improve
           performance because of improved scheduling and reduced
           dependencies.

       --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
           If enabled, the maximum amount of space required for
           outgoing arguments will be computed in the function
           prologue.  This is faster on most modern CPUs because
           of reduced dependencies, improved scheduling and
           reduced stack usage when preferred stack boundary is
           not equal to 2.  The drawback is a notable increase in
           code size.  This switch implies --mmnnoo--ppuusshh--aarrggss.

       --mmtthhrreeaaddss
           Support thread-safe exception handling on MMiinnggww3322.
           Code that relies on thread-safe exception handling
           must compile and link all code with the --mmtthhrreeaaddss
           option.  When compiling, --mmtthhrreeaaddss defines --DD__MMTT; when
           linking, it links in a special thread helper library
           --llmmiinnggwwtthhrrdd which cleans up per thread exception
           handling data.

       --mmnnoo--aalliiggnn--ssttrriinnggooppss
           Do not align destination of inlined string operations.
           This switch reduces code size and improves performance
           in case the destination is already aligned, but GCC
           doesn't know about it.

       --mmiinnlliinnee--aallll--ssttrriinnggooppss
           By default GCC inlines string operations only when
           destination is known to be aligned at least to 4 byte
           boundary.  This enables more inlining, increase code



gcc-4.3.2                   2008-08-27                        192





GCC(1)                         GNU                         GCC(1)


           size, but may improve performance of code that depends
           on fast memcpy, strlen and memset for short lengths.

       --mmiinnlliinnee--ssttrriinnggooppss--ddyynnaammiiccaallllyy
           For string operation of unknown size, inline runtime
           checks so for small blocks inline code is used, while
           for large blocks library call is used.

       --mmssttrriinnggoopp--ssttrraatteeggyy==_a_l_g
           Overwrite internal decision heuristic about particular
           algorithm to inline string operation with.  The
           allowed values are "rep_byte", "rep_4byte",
           "rep_8byte" for expanding using i386 "rep" prefix of
           specified size, "byte_loop", "loop", "unrolled_loop"
           for expanding inline loop, "libcall" for always
           expanding library call.

       --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           Don't keep the frame pointer in a register for leaf
           functions.  This avoids the instructions to save, set
           up and restore frame pointers and makes an extra
           register available in leaf functions.  The option
           --ffoommiitt--ffrraammee--ppooiinntteerr removes the frame pointer for all
           functions which might make debugging harder.

       --mmttllss--ddiirreecctt--sseegg--rreeffss
       --mmnnoo--ttllss--ddiirreecctt--sseegg--rreeffss
           Controls whether TLS variables may be accessed with
           offsets from the TLS segment register (%gs for 32-bit,
           %fs for 64-bit), or whether the thread base pointer
           must be added.  Whether or not this is legal depends
           on the operating system, and whether it maps the
           segment to cover the entire TLS area.

           For systems that use GNU libc, the default is on.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Enable automatic generation of fused floating point
           multiply-add instructions if the ISA supports such
           instructions.  The -mfused-madd option is on by
           default.  The fused multiply-add instructions have a
           different rounding behavior compared to executing a
           multiply followed by an add.

       These --mm switches are supported in addition to the above
       on AMD x86-64 processors in 64-bit environments.

       --mm3322
       --mm6644
           Generate code for a 32-bit or 64-bit environment.  The
           32-bit environment sets int, long and pointer to 32
           bits and generates code that runs on any i386 system.
           The 64-bit environment sets int to 32 bits and long



gcc-4.3.2                   2008-08-27                        193





GCC(1)                         GNU                         GCC(1)


           and pointer to 64 bits and generates code for AMD's
           x86-64 architecture. For darwin only the -m64 option
           turns off the --ffnnoo--ppiicc and --mmddyynnaammiicc--nnoo--ppiicc options.

       --mmnnoo--rreedd--zzoonnee
           Do not use a so called red zone for x86-64 code.  The
           red zone is mandated by the x86-64 ABI, it is a
           128-byte area beyond the location of the stack pointer
           that will not be modified by signal or interrupt
           handlers and therefore can be used for temporary data
           without adjusting the stack pointer.  The flag
           --mmnnoo--rreedd--zzoonnee disables this red zone.

       --mmccmmooddeell==ssmmaallll
           Generate code for the small code model: the program
           and its symbols must be linked in the lower 2 GB of
           the address space.  Pointers are 64 bits.  Programs
           can be statically or dynamically linked.  This is the
           default code model.

       --mmccmmooddeell==kkeerrnneell
           Generate code for the kernel code model.  The kernel
           runs in the negative 2 GB of the address space.  This
           model has to be used for Linux kernel code.

       --mmccmmooddeell==mmeeddiiuumm
           Generate code for the medium model: The program is
           linked in the lower 2 GB of the address space but
           symbols can be located anywhere in the address space.
           Programs can be statically or dynamically linked, but
           building of shared libraries are not supported with
           the medium model.

       --mmccmmooddeell==llaarrggee
           Generate code for the large model: This model makes no
           assumptions about addresses and sizes of sections.

       _I_A_-_6_4 _O_p_t_i_o_n_s

       These are the --mm options defined for the Intel IA-64
       architecture.

       --mmbbiigg--eennddiiaann
           Generate code for a big endian target.  This is the
           default for HP-UX.

       --mmlliittttllee--eennddiiaann
           Generate code for a little endian target.  This is the
           default for AIX5 and GNU/Linux.

       --mmggnnuu--aass
       --mmnnoo--ggnnuu--aass
           Generate (or don't) code for the GNU assembler.  This
           is the default.



gcc-4.3.2                   2008-08-27                        194





GCC(1)                         GNU                         GCC(1)


       --mmggnnuu--lldd
       --mmnnoo--ggnnuu--lldd
           Generate (or don't) code for the GNU linker.  This is
           the default.

       --mmnnoo--ppiicc
           Generate code that does not use a global pointer
           register.  The result is not position independent
           code, and violates the IA-64 ABI.

       --mmvvoollaattiillee--aassmm--ssttoopp
       --mmnnoo--vvoollaattiillee--aassmm--ssttoopp
           Generate (or don't) a stop bit immediately before and
           after volatile asm statements.

       --mmrreeggiisstteerr--nnaammeess
       --mmnnoo--rreeggiisstteerr--nnaammeess
           Generate (or don't) iinn, lloocc, and oouutt register names
           for the stacked registers.  This may make assembler
           output more readable.

       --mmnnoo--ssddaattaa
       --mmssddaattaa
           Disable (or enable) optimizations that use the small
           data section.  This may be useful for working around
           optimizer bugs.

       --mmccoonnssttaanntt--ggpp
           Generate code that uses a single constant global
           pointer value.  This is useful when compiling kernel
           code.

       --mmaauuttoo--ppiicc
           Generate code that is self-relocatable.  This implies
           --mmccoonnssttaanntt--ggpp.  This is useful when compiling firmware
           code.

       --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmiinn--llaatteennccyy
           Generate code for inline divides of floating point
           values using the minimum latency algorithm.

       --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline divides of floating point
           values using the maximum throughput algorithm.

       --mmiinnlliinnee--iinntt--ddiivviiddee--mmiinn--llaatteennccyy
           Generate code for inline divides of integer values
           using the minimum latency algorithm.

       --mmiinnlliinnee--iinntt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline divides of integer values
           using the maximum throughput algorithm.





gcc-4.3.2                   2008-08-27                        195





GCC(1)                         GNU                         GCC(1)


       --mmiinnlliinnee--ssqqrrtt--mmiinn--llaatteennccyy
           Generate code for inline square roots using the
           minimum latency algorithm.

       --mmiinnlliinnee--ssqqrrtt--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline square roots using the
           maximum throughput algorithm.

       --mmnnoo--ddwwaarrff22--aassmm
       --mmddwwaarrff22--aassmm
           Don't (or do) generate assembler code for the DWARF2
           line number debugging info.  This may be useful when
           not using the GNU assembler.

       --mmeeaarrllyy--ssttoopp--bbiittss
       --mmnnoo--eeaarrllyy--ssttoopp--bbiittss
           Allow stop bits to be placed earlier than immediately
           preceding the instruction that triggered the stop bit.
           This can improve instruction scheduling, but does not
           always do so.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as
           fixed registers.  A fixed register is one that the
           register allocator can not use.  This is useful when
           compiling kernel code.  A register range is specified
           as two registers separated by a dash.  Multiple
           register ranges can be specified separated by a comma.

       --mmttllss--ssiizzee==_t_l_s_-_s_i_z_e
           Specify bit size of immediate TLS offsets.  Valid
           values are 14, 22, and 64.

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune the instruction scheduling for a particular CPU,
           Valid values are itanium, itanium1, merced, itanium2,
           and mckinley.

       --mmtt
       --pptthhrreeaadd
           Add support for multithreading using the POSIX threads
           library.  This option sets flags for both the
           preprocessor and linker.  It does not affect the
           thread safety of object code produced by the compiler
           or that of libraries supplied with it.  These are HP-
           UX specific flags.

       --mmiillpp3322
       --mmllpp6644
           Generate code for a 32-bit or 64-bit environment.  The
           32-bit environment sets int, long and pointer to 32
           bits.  The 64-bit environment sets int to 32 bits and
           long and pointer to 64 bits.  These are HP-UX specific
           flags.



gcc-4.3.2                   2008-08-27                        196





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--sscchheedd--bbrr--ddaattaa--ssppeecc
       --mmsscchheedd--bbrr--ddaattaa--ssppeecc
           (Dis/En)able data speculative scheduling before
           reload.  This will result in generation of the ld.a
           instructions and the corresponding check instructions
           (ld.c / chk.a).  The default is 'disable'.

       --mmsscchheedd--aarr--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--aarr--ddaattaa--ssppeecc
           (En/Dis)able data speculative scheduling after reload.
           This will result in generation of the ld.a
           instructions and the corresponding check instructions
           (ld.c / chk.a).  The default is 'enable'.

       --mmnnoo--sscchheedd--ccoonnttrrooll--ssppeecc
       --mmsscchheedd--ccoonnttrrooll--ssppeecc
           (Dis/En)able control speculative scheduling.  This
           feature is available only during region scheduling
           (i.e. before reload).  This will result in generation
           of the ld.s instructions and the corresponding check
           instructions chk.s .  The default is 'disable'.

       --mmsscchheedd--bbrr--iinn--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--bbrr--iinn--ddaattaa--ssppeecc
           (En/Dis)able speculative scheduling of the
           instructions that are dependent on the data
           speculative loads before reload.  This is effective
           only with --mmsscchheedd--bbrr--ddaattaa--ssppeecc enabled.  The default
           is 'enable'.

       --mmsscchheedd--aarr--iinn--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--aarr--iinn--ddaattaa--ssppeecc
           (En/Dis)able speculative scheduling of the
           instructions that are dependent on the data
           speculative loads after reload.  This is effective
           only with --mmsscchheedd--aarr--ddaattaa--ssppeecc enabled.  The default
           is 'enable'.

       --mmsscchheedd--iinn--ccoonnttrrooll--ssppeecc
       --mmnnoo--sscchheedd--iinn--ccoonnttrrooll--ssppeecc
           (En/Dis)able speculative scheduling of the
           instructions that are dependent on the control
           speculative loads.  This is effective only with
           --mmsscchheedd--ccoonnttrrooll--ssppeecc enabled.  The default is
           'enable'.

       --mmsscchheedd--llddcc
       --mmnnoo--sscchheedd--llddcc
           (En/Dis)able use of simple data speculation checks
           ld.c .  If disabled, only chk.a instructions will be
           emitted to check data speculative loads.  The default
           is 'enable'.





gcc-4.3.2                   2008-08-27                        197





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--sscchheedd--ccoonnttrrooll--llddcc
       --mmsscchheedd--ccoonnttrrooll--llddcc
           (Dis/En)able use of ld.c instructions to check control
           speculative loads.  If enabled, in case of control
           speculative load with no speculatively scheduled
           dependent instructions this load will be emitted as
           ld.sa and ld.c will be used to check it.  The default
           is 'disable'.

       --mmnnoo--sscchheedd--ssppeecc--vveerrbboossee
       --mmsscchheedd--ssppeecc--vveerrbboossee
           (Dis/En)able printing of the information about
           speculative motions.

       --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
       --mmsscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
           If enabled, data speculative instructions will be
           chosen for schedule only if there are no other choices
           at the moment.  This will make the use of the data
           speculation much more conservative.  The default is
           'disable'.

       --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
       --mmsscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
           If enabled, control speculative instructions will be
           chosen for schedule only if there are no other choices
           at the moment.  This will make the use of the control
           speculation much more conservative.  The default is
           'disable'.

       --mmnnoo--sscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh
       --mmsscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh
           If enabled, speculative dependencies will be
           considered during computation of the instructions
           priorities.  This will make the use of the speculation
           a bit more conservative.  The default is 'disable'.

       _M_3_2_C _O_p_t_i_o_n_s

       --mmccppuu==_n_a_m_e
           Select the CPU for which code is generated.  _n_a_m_e may
           be one of rr88cc for the R8C/Tiny series, mm1166cc for the
           M16C (up to /60) series, mm3322ccmm for the M16C/80 series,
           or mm3322cc for the M32C/80 series.

       --mmssiimm
           Specifies that the program will be run on the
           simulator.  This causes an alternate runtime library
           to be linked in which supports, for example, file I/O.
           You must not use this option when generating programs
           that will run on real hardware; you must provide your
           own runtime library for whatever I/O functions are
           needed.




gcc-4.3.2                   2008-08-27                        198





GCC(1)                         GNU                         GCC(1)


       --mmeemmrreeggss==_n_u_m_b_e_r
           Specifies the number of memory-based pseudo-registers
           GCC will use during code generation.  These pseudo-
           registers will be used like real registers, so there
           is a tradeoff between GCC's ability to fit the code
           into available registers, and the performance penalty
           of using memory instead of registers.  Note that all
           modules in a program must be compiled with the same
           value for this option.  Because of that, you must not
           use this option with the default runtime libraries gcc
           builds.

       _M_3_2_R_/_D _O_p_t_i_o_n_s

       These --mm options are defined for Renesas M32R/D
       architectures:

       --mm3322rr22
           Generate code for the M32R/2.

       --mm3322rrxx
           Generate code for the M32R/X.

       --mm3322rr
           Generate code for the M32R.  This is the default.

       --mmmmooddeell==ssmmaallll
           Assume all objects live in the lower 16MB of memory
           (so that their addresses can be loaded with the "ld24"
           instruction), and assume all subroutines are reachable
           with the "bl" instruction.  This is the default.

           The addressability of a particular object can be set
           with the "model" attribute.

       --mmmmooddeell==mmeeddiiuumm
           Assume objects may be anywhere in the 32-bit address
           space (the compiler will generate "seth/add3"
           instructions to load their addresses), and assume all
           subroutines are reachable with the "bl" instruction.

       --mmmmooddeell==llaarrggee
           Assume objects may be anywhere in the 32-bit address
           space (the compiler will generate "seth/add3"
           instructions to load their addresses), and assume
           subroutines may not be reachable with the "bl"
           instruction (the compiler will generate the much
           slower "seth/add3/jl" instruction sequence).

       --mmssddaattaa==nnoonnee
           Disable use of the small data area.  Variables will be
           put into one of ..ddaattaa, bbssss, or ..rrooddaattaa (unless the
           "section" attribute has been specified).  This is the
           default.



gcc-4.3.2                   2008-08-27                        199





GCC(1)                         GNU                         GCC(1)


           The small data area consists of sections ..ssddaattaa and
           ..ssbbssss.  Objects may be explicitly put in the small
           data area with the "section" attribute using one of
           these sections.

       --mmssddaattaa==ssddaattaa
           Put small global and static data in the small data
           area, but do not generate special code to reference
           them.

       --mmssddaattaa==uussee
           Put small global and static data in the small data
           area, and generate special instructions to reference
           them.

       --GG _n_u_m
           Put global and static objects less than or equal to
           _n_u_m bytes into the small data or bss sections instead
           of the normal data or bss sections.  The default value
           of _n_u_m is 8.  The --mmssddaattaa option must be set to one of
           ssddaattaa or uussee for this option to have any effect.

           All modules should be compiled with the same --GG _n_u_m
           value.  Compiling with different values of _n_u_m may or
           may not work; if it doesn't the linker will give an
           error message---incorrect code will not be generated.

       --mmddeebbuugg
           Makes the M32R specific code in the compiler display
           some statistics that might help in debugging programs.

       --mmaalliiggnn--llooooppss
           Align all loops to a 32-byte boundary.

       --mmnnoo--aalliiggnn--llooooppss
           Do not enforce a 32-byte alignment for loops.  This is
           the default.

       --mmiissssuuee--rraattee==_n_u_m_b_e_r
           Issue _n_u_m_b_e_r instructions per cycle.  _n_u_m_b_e_r can only
           be 1 or 2.

       --mmbbrraanncchh--ccoosstt==_n_u_m_b_e_r
           _n_u_m_b_e_r can only be 1 or 2.  If it is 1 then branches
           will be preferred over conditional code, if it is 2,
           then the opposite will apply.

       --mmfflluusshh--ttrraapp==_n_u_m_b_e_r
           Specifies the trap number to use to flush the cache.
           The default is 12.  Valid numbers are between 0 and 15
           inclusive.

       --mmnnoo--fflluusshh--ttrraapp
           Specifies that the cache cannot be flushed by using a



gcc-4.3.2                   2008-08-27                        200





GCC(1)                         GNU                         GCC(1)


           trap.

       --mmfflluusshh--ffuunncc==_n_a_m_e
           Specifies the name of the operating system function to
           call to flush the cache.  The default is ___f_l_u_s_h___c_a_c_h_e,
           but a function call will only be used if a trap is not
           available.

       --mmnnoo--fflluusshh--ffuunncc
           Indicates that there is no OS function for flushing
           the cache.

       _M_6_8_0_x_0 _O_p_t_i_o_n_s

       These are the --mm options defined for M680x0 and ColdFire
       processors.  The default settings depend on which
       architecture was selected when the compiler was
       configured; the defaults for the most common choices are
       given below.

       --mmaarrcchh==_a_r_c_h
           Generate code for a specific M680x0 or ColdFire
           instruction set architecture.  Permissible values of
           _a_r_c_h for M680x0 architectures are: 6688000000, 6688001100,
           6688002200, 6688003300, 6688004400, 6688006600 and ccppuu3322.  ColdFire
           architectures are selected according to Freescale's
           ISA classification and the permissible values are:
           iissaaaa, iissaaaapplluuss, iissaabb and iissaacc.

           gcc defines a macro ____mmccff_a_r_c_h____ whenever it is
           generating code for a ColdFire target.  The _a_r_c_h in
           this macro is one of the --mmaarrcchh arguments given above.

           When used together, --mmaarrcchh and --mmttuunnee select code that
           runs on a family of similar processors but that is
           optimized for a particular microarchitecture.

       --mmccppuu==_c_p_u
           Generate code for a specific M680x0 or ColdFire
           processor.  The M680x0 _c_p_us are: 6688000000, 6688001100, 6688002200,
           6688003300, 6688004400, 6688006600, 6688330022, 6688333322 and ccppuu3322.  The
           ColdFire _c_p_us are given by the table below, which also
           classifies the CPUs into families:

           Family : --mmccppuu arguments
           5511qqee : 5511qqee
           55220066 : 55220022 55220044 55220066
           55220066ee : 55220066ee
           55220088 : 55220077 55220088
           55221111aa : 55221100aa 55221111aa
           55221133 : 55221111 55221122 55221133
           55221166 : 55221144 55221166
           5522223355 : 5522223300 5522223311 5522223322 5522223333 5522223344 5522223355




gcc-4.3.2                   2008-08-27                        201





GCC(1)                         GNU                         GCC(1)


           55222255 : 55222244 55222255
           55223355 : 55223322 55223333 55223344 55223355 552233xx
           55224499 : 55224499
           55225500 : 55225500
           55227711 : 55227700 55227711
           55227722 : 55227722
           55227755 : 55227744 55227755
           55228822 : 55228800 55228811 55228822 552288xx
           55330077 : 55330077
           55332299 : 55332277 55332288 55332299 553322xx
           55337733 : 55337722 55337733 553377xx
           55440077 : 55440077
           55447755 : 55447700 55447711 55447722 55447733 55447744 55447755 554477xx 55448800 55448811
           55448822 55448833 55448844 55448855

           --mmccppuu==_c_p_u overrides --mmaarrcchh==_a_r_c_h if _a_r_c_h is compatible
           with _c_p_u.  Other combinations of --mmccppuu and --mmaarrcchh are
           rejected.

           gcc defines the macro ____mmccff__ccppuu___c_p_u when ColdFire
           target _c_p_u is selected.  It also defines
           ____mmccff__ffaammiillyy___f_a_m_i_l_y, where the value of _f_a_m_i_l_y is
           given by the table above.

       --mmttuunnee==_t_u_n_e
           Tune the code for a particular microarchitecture,
           within the constraints set by --mmaarrcchh and --mmccppuu.  The
           M680x0 microarchitectures are: 6688000000, 6688001100, 6688002200,
           6688003300, 6688004400, 6688006600 and ccppuu3322.  The ColdFire
           microarchitectures are: ccffvv11, ccffvv22, ccffvv33, ccffvv44 and
           ccffvv44ee.

           You can also use --mmttuunnee==6688002200--4400 for code that needs
           to run relatively well on 68020, 68030 and 68040
           targets.  --mmttuunnee==6688002200--6600 is similar but includes
           68060 targets as well.  These two options select the
           same tuning decisions as --mm6688002200--4400 and --mm6688002200--6600
           respectively.

           gcc defines the macros ____mmcc_a_r_c_h and ____mmcc_a_r_c_h____ when
           tuning for 680x0 architecture _a_r_c_h.  It also defines
           mmcc_a_r_c_h unless either --aannssii or a non-GNU --ssttdd option is
           used.  If gcc is tuning for a range of architectures,
           as selected by --mmttuunnee==6688002200--4400 or --mmttuunnee==6688002200--6600, it
           defines the macros for every architecture in the
           range.

           gcc also defines the macro ____mm_u_a_r_c_h____ when tuning for
           ColdFire microarchitecture _u_a_r_c_h, where _u_a_r_c_h is one
           of the arguments given above.

       --mm6688000000
       --mmcc6688000000
           Generate output for a 68000.  This is the default when



gcc-4.3.2                   2008-08-27                        202





GCC(1)                         GNU                         GCC(1)


           the compiler is configured for 68000-based systems.
           It is equivalent to --mmaarrcchh==6688000000.

           Use this option for microcontrollers with a 68000 or
           EC000 core, including the 68008, 68302, 68306, 68307,
           68322, 68328 and 68356.

       --mm6688001100
           Generate output for a 68010.  This is the default when
           the compiler is configured for 68010-based systems.
           It is equivalent to --mmaarrcchh==6688001100.

       --mm6688002200
       --mmcc6688002200
           Generate output for a 68020.  This is the default when
           the compiler is configured for 68020-based systems.
           It is equivalent to --mmaarrcchh==6688002200.

       --mm6688003300
           Generate output for a 68030.  This is the default when
           the compiler is configured for 68030-based systems.
           It is equivalent to --mmaarrcchh==6688003300.

       --mm6688004400
           Generate output for a 68040.  This is the default when
           the compiler is configured for 68040-based systems.
           It is equivalent to --mmaarrcchh==6688004400.

           This option inhibits the use of 68881/68882
           instructions that have to be emulated by software on
           the 68040.  Use this option if your 68040 does not
           have code to emulate those instructions.

       --mm6688006600
           Generate output for a 68060.  This is the default when
           the compiler is configured for 68060-based systems.
           It is equivalent to --mmaarrcchh==6688006600.

           This option inhibits the use of 68020 and 68881/68882
           instructions that have to be emulated by software on
           the 68060.  Use this option if your 68060 does not
           have code to emulate those instructions.

       --mmccppuu3322
           Generate output for a CPU32.  This is the default when
           the compiler is configured for CPU32-based systems.
           It is equivalent to --mmaarrcchh==ccppuu3322.

           Use this option for microcontrollers with a CPU32 or
           CPU32+ core, including the 68330, 68331, 68332, 68333,
           68334, 68336, 68340, 68341, 68349 and 68360.

       --mm55220000
           Generate output for a 520X ColdFire CPU.  This is the



gcc-4.3.2                   2008-08-27                        203





GCC(1)                         GNU                         GCC(1)


           default when the compiler is configured for 520X-based
           systems.  It is equivalent to --mmccppuu==55220066, and is now
           deprecated in favor of that option.

           Use this option for microcontroller with a 5200 core,
           including the MCF5202, MCF5203, MCF5204 and MCF5206.

       --mm55220066ee
           Generate output for a 5206e ColdFire CPU.  The option
           is now deprecated in favor of the equivalent
           --mmccppuu==55220066ee.

       --mm552288xx
           Generate output for a member of the ColdFire 528X
           family.  The option is now deprecated in favor of the
           equivalent --mmccppuu==552288xx.

       --mm55330077
           Generate output for a ColdFire 5307 CPU.  The option
           is now deprecated in favor of the equivalent
           --mmccppuu==55330077.

       --mm55440077
           Generate output for a ColdFire 5407 CPU.  The option
           is now deprecated in favor of the equivalent
           --mmccppuu==55440077.

       --mmccffvv44ee
           Generate output for a ColdFire V4e family CPU (e.g.
           547x/548x).  This includes use of hardware floating
           point instructions.  The option is equivalent to
           --mmccppuu==554477xx, and is now deprecated in favor of that
           option.

       --mm6688002200--4400
           Generate output for a 68040, without using any of the
           new instructions.  This results in code which can run
           relatively efficiently on either a 68020/68881 or a
           68030 or a 68040.  The generated code does use the
           68881 instructions that are emulated on the 68040.

           The option is equivalent to --mmaarrcchh==6688002200
           --mmttuunnee==6688002200--4400.

       --mm6688002200--6600
           Generate output for a 68060, without using any of the
           new instructions.  This results in code which can run
           relatively efficiently on either a 68020/68881 or a
           68030 or a 68040.  The generated code does use the
           68881 instructions that are emulated on the 68060.

           The option is equivalent to --mmaarrcchh==6688002200
           --mmttuunnee==6688002200--6600.




gcc-4.3.2                   2008-08-27                        204





GCC(1)                         GNU                         GCC(1)


       --mmhhaarrdd--ffllooaatt
       --mm6688888811
           Generate floating-point instructions.  This is the
           default for 68020 and above, and for ColdFire devices
           that have an FPU.  It defines the macro ____HHAAVVEE__6688888811____
           on M680x0 targets and ____mmccffffppuu____ on ColdFire targets.

       --mmssoofftt--ffllooaatt
           Do not generate floating-point instructions; use
           library calls instead.  This is the default for 68000,
           68010, and 68832 targets.  It is also the default for
           ColdFire devices that have no FPU.

       --mmddiivv
       --mmnnoo--ddiivv
           Generate (do not generate) ColdFire hardware divide
           and remainder instructions.  If --mmaarrcchh is used without
           --mmccppuu, the default is "on" for ColdFire architectures
           and "off" for M680x0 architectures.  Otherwise, the
           default is taken from the target CPU (either the
           default CPU, or the one specified by --mmccppuu).  For
           example, the default is "off" for --mmccppuu==55220066 and "on"
           for --mmccppuu==55220066ee.

           gcc defines the macro ____mmccffhhwwddiivv____ when this option is
           enabled.

       --mmsshhoorrtt
           Consider type "int" to be 16 bits wide, like "short
           int".  Additionally, parameters passed on the stack
           are also aligned to a 16-bit boundary even on targets
           whose API mandates promotion to 32-bit.

       --mmnnoo--sshhoorrtt
           Do not consider type "int" to be 16 bits wide.  This
           is the default.

       --mmnnoobbiittffiieelldd
       --mmnnoo--bbiittffiieelldd
           Do not use the bit-field instructions.  The --mm6688000000,
           --mmccppuu3322 and --mm55220000 options imply --mmnnoobbiittffiieelldd.

       --mmbbiittffiieelldd
           Do use the bit-field instructions.  The --mm6688002200 option
           implies --mmbbiittffiieelldd.  This is the default if you use a
           configuration designed for a 68020.

       --mmrrttdd
           Use a different function-calling convention, in which
           functions that take a fixed number of arguments return
           with the "rtd" instruction, which pops their arguments
           while returning.  This saves one instruction in the
           caller since there is no need to pop the arguments
           there.



gcc-4.3.2                   2008-08-27                        205





GCC(1)                         GNU                         GCC(1)


           This calling convention is incompatible with the one
           normally used on Unix, so you cannot use it if you
           need to call libraries compiled with the Unix
           compiler.

           Also, you must provide function prototypes for all
           functions that take variable numbers of arguments
           (including "printf"); otherwise incorrect code will be
           generated for calls to those functions.

           In addition, seriously incorrect code will result if
           you call a function with too many arguments.
           (Normally, extra arguments are harmlessly ignored.)

           The "rtd" instruction is supported by the 68010,
           68020, 68030, 68040, 68060 and CPU32 processors, but
           not by the 68000 or 5200.

       --mmnnoo--rrttdd
           Do not use the calling conventions selected by --mmrrttdd.
           This is the default.

       --mmaalliiggnn--iinntt
       --mmnnoo--aalliiggnn--iinntt
           Control whether GCC aligns "int", "long", "long long",
           "float", "double", and "long double" variables on a
           32-bit boundary (--mmaalliiggnn--iinntt) or a 16-bit boundary
           (--mmnnoo--aalliiggnn--iinntt).  Aligning variables on 32-bit
           boundaries produces code that runs somewhat faster on
           processors with 32-bit busses at the expense of more
           memory.

           WWaarrnniinngg:: if you use the --mmaalliiggnn--iinntt switch, GCC will
           align structures containing the above types
           differently than most published application binary
           interface specifications for the m68k.

       --mmppccrreell
           Use the pc-relative addressing mode of the 68000
           directly, instead of using a global offset table.  At
           present, this option implies --ffppiicc, allowing at most a
           16-bit offset for pc-relative addressing.  --ffPPIICC is
           not presently supported with --mmppccrreell, though this
           could be supported for 68020 and higher processors.

       --mmnnoo--ssttrriicctt--aalliiggnn
       --mmssttrriicctt--aalliiggnn
           Do not (do) assume that unaligned memory references
           will be handled by the system.

       --mmsseepp--ddaattaa
           Generate code that allows the data segment to be
           located in a different area of memory from the text
           segment.  This allows for execute in place in an



gcc-4.3.2                   2008-08-27                        206





GCC(1)                         GNU                         GCC(1)


           environment without virtual memory management.  This
           option implies --ffPPIICC.

       --mmnnoo--sseepp--ddaattaa
           Generate code that assumes that the data segment
           follows the text segment.  This is the default.

       --mmiidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the
           library ID method.  This allows for execute in place
           and shared libraries in an environment without virtual
           memory management.  This option implies --ffPPIICC.

       --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that doesn't assume ID based shared
           libraries are being used.  This is the default.

       --mmsshhaarreedd--lliibbrraarryy--iidd==nn
           Specified the identification number of the ID based
           shared library being compiled.  Specifying a value of
           0 will generate more compact code, specifying other
           values will force the allocation of that number to the
           current library but is no more space or time efficient
           than omitting this option.

       _M_6_8_h_c_1_x _O_p_t_i_o_n_s

       These are the --mm options defined for the 68hc11 and 68hc12
       microcontrollers.  The default values for these options
       depends on which style of microcontroller was selected
       when the compiler was configured; the defaults for the
       most common choices are given below.

       --mm66881111
       --mm6688hhcc1111
           Generate output for a 68HC11.  This is the default
           when the compiler is configured for 68HC11-based
           systems.

       --mm66881122
       --mm6688hhcc1122
           Generate output for a 68HC12.  This is the default
           when the compiler is configured for 68HC12-based
           systems.

       --mm6688SS1122
       --mm6688hhccss1122
           Generate output for a 68HCS12.

       --mmaauuttoo--iinnccddeecc
           Enable the use of 68HC12 pre and post auto-increment
           and auto-decrement addressing modes.





gcc-4.3.2                   2008-08-27                        207





GCC(1)                         GNU                         GCC(1)


       --mmiinnmmaaxx
       --nnoommiinnmmaaxx
           Enable the use of 68HC12 min and max instructions.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Treat all calls as being far away (near).  If calls
           are assumed to be far away, the compiler will use the
           "call" instruction to call a function and the "rtc"
           instruction for returning.

       --mmsshhoorrtt
           Consider type "int" to be 16 bits wide, like "short
           int".

       --mmssoofftt--rreegg--ccoouunntt==_c_o_u_n_t
           Specify the number of pseudo-soft registers which are
           used for the code generation.  The maximum number is
           32.  Using more pseudo-soft register may or may not
           result in better code depending on the program.  The
           default is 4 for 68HC11 and 2 for 68HC12.

       _M_C_o_r_e _O_p_t_i_o_n_s

       These are the --mm options defined for the Motorola M*Core
       processors.

       --mmhhaarrddlliitt
       --mmnnoo--hhaarrddlliitt
           Inline constants into the code stream if it can be
           done in two instructions or less.

       --mmddiivv
       --mmnnoo--ddiivv
           Use the divide instruction.  (Enabled by default).

       --mmrreellaaxx--iimmmmeeddiiaattee
       --mmnnoo--rreellaaxx--iimmmmeeddiiaattee
           Allow arbitrary sized immediates in bit operations.

       --mmwwiiddee--bbiittffiieellddss
       --mmnnoo--wwiiddee--bbiittffiieellddss
           Always treat bit-fields as int-sized.

       --mm44bbyyttee--ffuunnccttiioonnss
       --mmnnoo--44bbyyttee--ffuunnccttiioonnss
           Force all functions to be aligned to a four byte
           boundary.

       --mmccaallllggrraapphh--ddaattaa
       --mmnnoo--ccaallllggrraapphh--ddaattaa
           Emit callgraph information.





gcc-4.3.2                   2008-08-27                        208





GCC(1)                         GNU                         GCC(1)


       --mmssllooww--bbyytteess
       --mmnnoo--ssllooww--bbyytteess
           Prefer word access when reading byte quantities.

       --mmlliittttllee--eennddiiaann
       --mmbbiigg--eennddiiaann
           Generate code for a little endian target.

       --mm221100
       --mm334400
           Generate code for the 210 processor.

       _M_I_P_S _O_p_t_i_o_n_s

       --EEBB Generate big-endian code.

       --EELL Generate little-endian code.  This is the default for
           mmiippss**eell--**--** configurations.

       --mmaarrcchh==_a_r_c_h
           Generate code that will run on _a_r_c_h, which can be the
           name of a generic MIPS ISA, or the name of a
           particular processor.  The ISA names are: mmiippss11,
           mmiippss22, mmiippss33, mmiippss44, mmiippss3322, mmiippss3322rr22, and mmiippss6644.
           The processor names are: 44kkcc, 44kkmm, 44kkpp, 44kksscc, 44kkeecc,
           44kkeemm, 44kkeepp, 44kkssdd, 55kkcc, 55kkff, 2200kkcc, 2244kkcc, 2244kkff22__11,
           2244kkff11__11, 2244kkeecc, 2244kkeeff22__11, 2244kkeeff11__11, 3344kkcc, 3344kkff22__11,
           3344kkff11__11, 7744kkcc, 7744kkff22__11, 7744kkff11__11, 7744kkff33__22, mm44kk, oorriioonn,
           rr22000000, rr33000000, rr33990000, rr44000000, rr44440000, rr44660000, rr44665500,
           rr66000000, rr88000000, rrmm77000000, rrmm99000000, ssbb11, ssrr7711000000, vvrr44110000,
           vvrr44111111, vvrr44112200, vvrr44113300, vvrr44330000, vvrr55000000, vvrr55440000 and
           vvrr55550000.  The special value ffrroomm--aabbii selects the most
           compatible architecture for the selected ABI (that is,
           mmiippss11 for 32-bit ABIs and mmiippss33 for 64-bit ABIs).

           In processor names, a final 000000 can be abbreviated as
           kk (for example, --mmaarrcchh==rr22kk).  Prefixes are optional,
           and vvrr may be written rr.

           Names of the form _nff22__11 refer to processors with FPUs
           clocked at half the rate of the core, names of the
           form _nff11__11 refer to processors with FPUs clocked at
           the same rate as the core, and names of the form _nff33__22
           refer to processors with FPUs clocked a ratio of 3:2
           with respect to the core.  For compatibility reasons,
           _nff is accepted as a synonym for _nff22__11 while _nxx and _bffxx
           are accepted as synonyms for _nff11__11.

           GCC defines two macros based on the value of this
           option.  The first is __MMIIPPSS__AARRCCHH, which gives the name
           of target architecture, as a string.  The second has
           the form __MMIIPPSS__AARRCCHH___f_o_o, where _f_o_o is the capitalized
           value of __MMIIPPSS__AARRCCHH.  For example, --mmaarrcchh==rr22000000 will
           set __MMIIPPSS__AARRCCHH to ""rr22000000"" and define the macro



gcc-4.3.2                   2008-08-27                        209





GCC(1)                         GNU                         GCC(1)


           __MMIIPPSS__AARRCCHH__RR22000000.

           Note that the __MMIIPPSS__AARRCCHH macro uses the processor
           names given above.  In other words, it will have the
           full prefix and will not abbreviate 000000 as kk.  In the
           case of ffrroomm--aabbii, the macro names the resolved
           architecture (either ""mmiippss11"" or ""mmiippss33"").  It names
           the default architecture when no --mmaarrcchh option is
           given.

       --mmttuunnee==_a_r_c_h
           Optimize for _a_r_c_h.  Among other things, this option
           controls the way instructions are scheduled, and the
           perceived cost of arithmetic operations.  The list of
           _a_r_c_h values is the same as for --mmaarrcchh.

           When this option is not used, GCC will optimize for
           the processor specified by --mmaarrcchh.  By using --mmaarrcchh
           and --mmttuunnee together, it is possible to generate code
           that will run on a family of processors, but optimize
           the code for one particular member of that family.

           --mmttuunnee defines the macros __MMIIPPSS__TTUUNNEE and
           __MMIIPPSS__TTUUNNEE___f_o_o, which work in the same way as the
           --mmaarrcchh ones described above.

       --mmiippss11
           Equivalent to --mmaarrcchh==mmiippss11.

       --mmiippss22
           Equivalent to --mmaarrcchh==mmiippss22.

       --mmiippss33
           Equivalent to --mmaarrcchh==mmiippss33.

       --mmiippss44
           Equivalent to --mmaarrcchh==mmiippss44.

       --mmiippss3322
           Equivalent to --mmaarrcchh==mmiippss3322.

       --mmiippss3322rr22
           Equivalent to --mmaarrcchh==mmiippss3322rr22.

       --mmiippss6644
           Equivalent to --mmaarrcchh==mmiippss6644.

       --mmiippss1166
       --mmnnoo--mmiippss1166
           Generate (do not generate) MIPS16 code.  If GCC is
           targetting a MIPS32 or MIPS64 architecture, it will
           make use of the MIPS16e ASE.

           MIPS16 code generation can also be controlled on a



gcc-4.3.2                   2008-08-27                        210





GCC(1)                         GNU                         GCC(1)


           per-function basis by means of "mips16" and "nomips16"
           attributes.

       --mmfflliipp--mmiippss1166
           Generate MIPS16 code on alternating functions.  This
           option is provided for regression testing of mixed
           MIPS16/non-MIPS16 code generation, and is not intended
           for ordinary use in compiling user code.

       --mmiinntteerrlliinnkk--mmiippss1166
       --mmnnoo--iinntteerrlliinnkk--mmiippss1166
           Require (do not require) that non-MIPS16 code be link-
           compatible with MIPS16 code.

           For example, non-MIPS16 code cannot jump directly to
           MIPS16 code; it must either use a call or an indirect
           jump.  --mmiinntteerrlliinnkk--mmiippss1166 therefore disables direct
           jumps unless GCC knows that the target of the jump is
           not MIPS16.

       --mmaabbii==3322
       --mmaabbii==oo6644
       --mmaabbii==nn3322
       --mmaabbii==6644
       --mmaabbii==eeaabbii
           Generate code for the given ABI.

           Note that the EABI has a 32-bit and a 64-bit variant.
           GCC normally generates 64-bit code when you select a
           64-bit architecture, but you can use --mmggpp3322 to get
           32-bit code instead.

           For information about the O64 ABI, see
           <hhttttpp::////ggcccc..ggnnuu..oorrgg//pprroojjeeccttss//mmiippssoo6644--aabbii..hhttmmll>.

           GCC supports a variant of the o32 ABI in which
           floating-point registers are 64 rather than 32 bits
           wide.  You can select this combination with --mmaabbii==3322
           --mmffpp6644.  This ABI relies on the mmtthhcc11 and mmffhhcc11
           instructions and is therefore only supported for
           MIPS32R2 processors.

           The register assignments for arguments and return
           values remain the same, but each scalar value is
           passed in a single 64-bit register rather than a pair
           of 32-bit registers.  For example, scalar floating-
           point values are returned in $$ff00 only, not a $$ff00/$$ff11
           pair.  The set of call-saved registers also remains
           the same, but all 64 bits are saved.

       --mmaabbiiccaallllss
       --mmnnoo--aabbiiccaallllss
           Generate (do not generate) code that is suitable for
           SVR4-style dynamic objects.  --mmaabbiiccaallllss is the default



gcc-4.3.2                   2008-08-27                        211





GCC(1)                         GNU                         GCC(1)


           for SVR4-based systems.

       --mmsshhaarreedd
       --mmnnoo--sshhaarreedd
           Generate (do not generate) code that is fully
           position-independent, and that can therefore be linked
           into shared libraries.  This option only affects
           --mmaabbiiccaallllss.

           All --mmaabbiiccaallllss code has traditionally been
           position-independent, regardless of options like --ffPPIICC
           and --ffppiicc.  However, as an extension, the GNU
           toolchain allows executables to use absolute accesses
           for locally-binding symbols.  It can also use shorter
           GP initialization sequences and generate direct calls
           to locally-defined functions.  This mode is selected
           by --mmnnoo--sshhaarreedd.

           --mmnnoo--sshhaarreedd depends on binutils 2.16 or higher and
           generates objects that can only be linked by the GNU
           linker.  However, the option does not affect the ABI
           of the final executable; it only affects the ABI of
           relocatable objects.  Using --mmnnoo--sshhaarreedd will generally
           make executables both smaller and quicker.

           --mmsshhaarreedd is the default.

       --mmxxggoott
       --mmnnoo--xxggoott
           Lift (do not lift) the usual restrictions on the size
           of the global offset table.

           GCC normally uses a single instruction to load values
           from the GOT.  While this is relatively efficient, it
           will only work if the GOT is smaller than about 64k.
           Anything larger will cause the linker to report an
           error such as:

                   relocation truncated to fit: R_MIPS_GOT16 foobar

           If this happens, you should recompile your code with
           --mmxxggoott.  It should then work with very large GOTs,
           although it will also be less efficient, since it will
           take three instructions to fetch the value of a global
           symbol.

           Note that some linkers can create multiple GOTs.  If
           you have such a linker, you should only need to use
           --mmxxggoott when a single object file accesses more than
           64k's worth of GOT entries.  Very few do.

           These options have no effect unless GCC is generating
           position independent code.




gcc-4.3.2                   2008-08-27                        212





GCC(1)                         GNU                         GCC(1)


       --mmggpp3322
           Assume that general-purpose registers are 32 bits
           wide.

       --mmggpp6644
           Assume that general-purpose registers are 64 bits
           wide.

       --mmffpp3322
           Assume that floating-point registers are 32 bits wide.

       --mmffpp6644
           Assume that floating-point registers are 64 bits wide.

       --mmhhaarrdd--ffllooaatt
           Use floating-point coprocessor instructions.

       --mmssoofftt--ffllooaatt
           Do not use floating-point coprocessor instructions.
           Implement floating-point calculations using library
           calls instead.

       --mmssiinnggllee--ffllooaatt
           Assume that the floating-point coprocessor only
           supports single-precision operations.

       --mmddoouubbllee--ffllooaatt
           Assume that the floating-point coprocessor supports
           double-precision operations.  This is the default.

       --mmllllsscc
       --mmnnoo--llllsscc
           Use (do not use) llll, sscc, and ssyynncc instructions to
           implement atomic memory built-in functions.  When
           neither option is specified, GCC will use the
           instructions if the target architecture supports them.

           --mmllllsscc is useful if the runtime environment can
           emulate the instructions and --mmnnoo--llllsscc can be useful
           when compiling for nonstandard ISAs.  You can make
           either option the default by configuring GCC with
           ----wwiitthh--llllsscc and ----wwiitthhoouutt--llllsscc respectively.
           ----wwiitthh--llllsscc is the default for some configurations;
           see the installation documentation for details.

       --mmddsspp
       --mmnnoo--ddsspp
           Use (do not use) revision 1 of the MIPS DSP ASE.
             This option defines the preprocessor macro
           ____mmiippss__ddsspp.  It also defines ____mmiippss__ddsspp__rreevv to 1.

       --mmddsspprr22
       --mmnnoo--ddsspprr22
           Use (do not use) revision 2 of the MIPS DSP ASE.



gcc-4.3.2                   2008-08-27                        213





GCC(1)                         GNU                         GCC(1)


             This option defines the preprocessor macros
           ____mmiippss__ddsspp and ____mmiippss__ddsspprr22.  It also defines
           ____mmiippss__ddsspp__rreevv to 2.

       --mmssmmaarrttmmiippss
       --mmnnoo--ssmmaarrttmmiippss
           Use (do not use) the MIPS SmartMIPS ASE.

       --mmppaaiirreedd--ssiinnggllee
       --mmnnoo--ppaaiirreedd--ssiinnggllee
           Use (do not use) paired-single floating-point
           instructions.
             This option requires hardware floating-point support
           to be enabled.

       --mmddmmxx
       --mmnnoo--mmddmmxx
           Use (do not use) MIPS Digital Media Extension
           instructions.  This option can only be used when
           generating 64-bit code and requires hardware floating-
           point support to be enabled.

       --mmiippss33dd
       --mmnnoo--mmiippss33dd
           Use (do not use) the MIPS-3D ASE.  The option --mmiippss33dd
           implies --mmppaaiirreedd--ssiinnggllee.

       --mmmmtt
       --mmnnoo--mmtt
           Use (do not use) MT Multithreading instructions.

       --mmlloonngg6644
           Force "long" types to be 64 bits wide.  See --mmlloonngg3322
           for an explanation of the default and the way that the
           pointer size is determined.

       --mmlloonngg3322
           Force "long", "int", and pointer types to be 32 bits
           wide.

           The default size of "int"s, "long"s and pointers
           depends on the ABI.  All the supported ABIs use 32-bit
           "int"s.  The n64 ABI uses 64-bit "long"s, as does the
           64-bit EABI; the others use 32-bit "long"s.  Pointers
           are the same size as "long"s, or the same size as
           integer registers, whichever is smaller.

       --mmssyymm3322
       --mmnnoo--ssyymm3322
           Assume (do not assume) that all symbols have 32-bit
           values, regardless of the selected ABI.  This option
           is useful in combination with --mmaabbii==6644 and
           --mmnnoo--aabbiiccaallllss because it allows GCC to generate
           shorter and faster references to symbolic addresses.



gcc-4.3.2                   2008-08-27                        214





GCC(1)                         GNU                         GCC(1)


       --GG _n_u_m
           Put definitions of externally-visible data in a small
           data section if that data is no bigger than _n_u_m bytes.
           GCC can then access the data more efficiently; see
           --mmggppoopptt for details.

           The default --GG option depends on the configuration.

       --mmllooccaall--ssddaattaa
       --mmnnoo--llooccaall--ssddaattaa
           Extend (do not extend) the --GG behavior to local data
           too, such as to static variables in C.  --mmllooccaall--ssddaattaa
           is the default for all configurations.

           If the linker complains that an application is using
           too much small data, you might want to try rebuilding
           the less performance-critical parts with
           --mmnnoo--llooccaall--ssddaattaa.  You might also want to build large
           libraries with --mmnnoo--llooccaall--ssddaattaa, so that the libraries
           leave more room for the main program.

       --mmeexxtteerrnn--ssddaattaa
       --mmnnoo--eexxtteerrnn--ssddaattaa
           Assume (do not assume) that externally-defined data
           will be in a small data section if that data is within
           the --GG limit.  --mmeexxtteerrnn--ssddaattaa is the default for all
           configurations.

           If you compile a module _M_o_d with --mmeexxtteerrnn--ssddaattaa --GG _n_u_m
           --mmggppoopptt, and _M_o_d references a variable _V_a_r that is no
           bigger than _n_u_m bytes, you must make sure that _V_a_r is
           placed in a small data section.  If _V_a_r is defined by
           another module, you must either compile that module
           with a high-enough --GG setting or attach a "section"
           attribute to _V_a_r's definition.  If _V_a_r is common, you
           must link the application with a high-enough --GG
           setting.

           The easiest way of satisfying these restrictions is to
           compile and link every module with the same --GG option.
           However, you may wish to build a library that supports
           several different small data limits.  You can do this
           by compiling the library with the highest supported --GG
           setting and additionally using --mmnnoo--eexxtteerrnn--ssddaattaa to
           stop the library from making assumptions about
           externally-defined data.

       --mmggppoopptt
       --mmnnoo--ggppoopptt
           Use (do not use) GP-relative accesses for symbols that
           are known to be in a small data section; see --GG,
           --mmllooccaall--ssddaattaa and --mmeexxtteerrnn--ssddaattaa.  --mmggppoopptt is the
           default for all configurations.




gcc-4.3.2                   2008-08-27                        215





GCC(1)                         GNU                         GCC(1)


           --mmnnoo--ggppoopptt is useful for cases where the $gp register
           might not hold the value of "_gp".  For example, if
           the code is part of a library that might be used in a
           boot monitor, programs that call boot monitor routines
           will pass an unknown value in $gp.  (In such
           situations, the boot monitor itself would usually be
           compiled with --GG00.)

           --mmnnoo--ggppoopptt implies --mmnnoo--llooccaall--ssddaattaa and
           --mmnnoo--eexxtteerrnn--ssddaattaa.

       --mmeemmbbeeddddeedd--ddaattaa
       --mmnnoo--eemmbbeeddddeedd--ddaattaa
           Allocate variables to the read-only data section first
           if possible, then next in the small data section if
           possible, otherwise in data.  This gives slightly
           slower code than the default, but reduces the amount
           of RAM required when executing, and thus may be
           preferred for some embedded systems.

       --mmuunniinniitt--ccoonnsstt--iinn--rrooddaattaa
       --mmnnoo--uunniinniitt--ccoonnsstt--iinn--rrooddaattaa
           Put uninitialized "const" variables in the read-only
           data section.  This option is only meaningful in
           conjunction with --mmeemmbbeeddddeedd--ddaattaa.

       --mmccooddee--rreeaaddaabbllee==_s_e_t_t_i_n_g
           Specify whether GCC may generate code that reads from
           executable sections.  There are three possible
           settings:

           --mmccooddee--rreeaaddaabbllee==yyeess
               Instructions may freely access executable
               sections.  This is the default setting.

           --mmccooddee--rreeaaddaabbllee==ppccrreell
               MIPS16 PC-relative load instructions can access
               executable sections, but other instructions must
               not do so.  This option is useful on 4KSc and 4KSd
               processors when the code TLBs have the Read
               Inhibit bit set.  It is also useful on processors
               that can be configured to have a dual
               instruction/data SRAM interface and that, like the
               M4K, automatically redirect PC-relative loads to
               the instruction RAM.

           --mmccooddee--rreeaaddaabbllee==nnoo
               Instructions must not access executable sections.
               This option can be useful on targets that are
               configured to have a dual instruction/data SRAM
               interface but that (unlike the M4K) do not
               automatically redirect PC-relative loads to the
               instruction RAM.




gcc-4.3.2                   2008-08-27                        216





GCC(1)                         GNU                         GCC(1)


       --mmsspplliitt--aaddddrreesssseess
       --mmnnoo--sspplliitt--aaddddrreesssseess
           Enable (disable) use of the "%hi()" and "%lo()"
           assembler relocation operators.  This option has been
           superseded by --mmeexxpplliicciitt--rreellooccss but is retained for
           backwards compatibility.

       --mmeexxpplliicciitt--rreellooccss
       --mmnnoo--eexxpplliicciitt--rreellooccss
           Use (do not use) assembler relocation operators when
           dealing with symbolic addresses.  The alternative,
           selected by --mmnnoo--eexxpplliicciitt--rreellooccss, is to use assembler
           macros instead.

           --mmeexxpplliicciitt--rreellooccss is the default if GCC was configured
           to use an assembler that supports relocation
           operators.

       --mmcchheecckk--zzeerroo--ddiivviissiioonn
       --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn
           Trap (do not trap) on integer division by zero.

           The default is --mmcchheecckk--zzeerroo--ddiivviissiioonn.

       --mmddiivviiddee--ttrraappss
       --mmddiivviiddee--bbrreeaakkss
           MIPS systems check for division by zero by generating
           either a conditional trap or a break instruction.
           Using traps results in smaller code, but is only
           supported on MIPS II and later.  Also, some versions
           of the Linux kernel have a bug that prevents trap from
           generating the proper signal ("SIGFPE").  Use
           --mmddiivviiddee--ttrraappss to allow conditional traps on
           architectures that support them and --mmddiivviiddee--bbrreeaakkss to
           force the use of breaks.

           The default is usually --mmddiivviiddee--ttrraappss, but this can be
           overridden at configure time using
           ----wwiitthh--ddiivviiddee==bbrreeaakkss.  Divide-by-zero checks can be
           completely disabled using --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn.

       --mmmmeemmccppyy
       --mmnnoo--mmeemmccppyy
           Force (do not force) the use of "memcpy()" for non-
           trivial block moves.  The default is --mmnnoo--mmeemmccppyy,
           which allows GCC to inline most constant-sized copies.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Disable (do not disable) use of the "jal" instruction.
           Calling functions using "jal" is more efficient but
           requires the caller and callee to be in the same 256
           megabyte segment.




gcc-4.3.2                   2008-08-27                        217





GCC(1)                         GNU                         GCC(1)


           This option has no effect on abicalls code.  The
           default is --mmnnoo--lloonngg--ccaallllss.

       --mmmmaadd
       --mmnnoo--mmaadd
           Enable (disable) use of the "mad", "madu" and "mul"
           instructions, as provided by the R4650 ISA.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Enable (disable) use of the floating point multiply-
           accumulate instructions, when they are available.  The
           default is --mmffuusseedd--mmaadddd.

           When multiply-accumulate instructions are used, the
           intermediate product is calculated to infinite
           precision and is not subject to the FCSR Flush to Zero
           bit.  This may be undesirable in some circumstances.

       --nnooccpppp
           Tell the MIPS assembler to not run its preprocessor
           over user assembler files (with a ..ss suffix) when
           assembling them.

       --mmffiixx--rr44000000
       --mmnnoo--ffiixx--rr44000000
           Work around certain R4000 CPU errata:

           -   A double-word or a variable shift may give an
               incorrect result if executed immediately after
               starting an integer division.

           -   A double-word or a variable shift may give an
               incorrect result if executed while an integer
               multiplication is in progress.

           -   An integer division may give an incorrect result
               if started in a delay slot of a taken branch or a
               jump.

       --mmffiixx--rr44440000
       --mmnnoo--ffiixx--rr44440000
           Work around certain R4400 CPU errata:

           -   A double-word or a variable shift may give an
               incorrect result if executed immediately after
               starting an integer division.

       --mmffiixx--vvrr44112200
       --mmnnoo--ffiixx--vvrr44112200
           Work around certain VR4120 errata:

           -   "dmultu" does not always produce the correct
               result.



gcc-4.3.2                   2008-08-27                        218





GCC(1)                         GNU                         GCC(1)


           -   "div" and "ddiv" do not always produce the correct
               result if one of the operands is negative.

           The workarounds for the division errata rely on
           special functions in _l_i_b_g_c_c_._a.  At present, these
           functions are only provided by the "mips64vr*-elf"
           configurations.

           Other VR4120 errata require a nop to be inserted
           between certain pairs of instructions.  These errata
           are handled by the assembler, not by GCC itself.

       --mmffiixx--vvrr44113300
           Work around the VR4130 "mflo"/"mfhi" errata.  The
           workarounds are implemented by the assembler rather
           than by GCC, although GCC will avoid using "mflo" and
           "mfhi" if the VR4130 "macc", "macchi", "dmacc" and
           "dmacchi" instructions are available instead.

       --mmffiixx--ssbb11
       --mmnnoo--ffiixx--ssbb11
           Work around certain SB-1 CPU core errata.  (This flag
           currently works around the SB-1 revision 2 "F1" and
           "F2" floating point errata.)

       --mmfflluusshh--ffuunncc==_f_u_n_c
       --mmnnoo--fflluusshh--ffuunncc
           Specifies the function to call to flush the I and D
           caches, or to not call any such function.  If called,
           the function must take the same arguments as the
           common "_flush_func()", that is, the address of the
           memory range for which the cache is being flushed, the
           size of the memory range, and the number 3 (to flush
           both caches).  The default depends on the target GCC
           was configured for, but commonly is either __fflluusshh__ffuunncc
           or ____ccppuu__fflluusshh.

       mmbbrraanncchh--ccoosstt==_n_u_m
           Set the cost of branches to roughly _n_u_m "simple"
           instructions.  This cost is only a heuristic and is
           not guaranteed to produce consistent results across
           releases.  A zero cost redundantly selects the
           default, which is based on the --mmttuunnee setting.

       --mmbbrraanncchh--lliikkeellyy
       --mmnnoo--bbrraanncchh--lliikkeellyy
           Enable or disable use of Branch Likely instructions,
           regardless of the default for the selected
           architecture.  By default, Branch Likely instructions
           may be generated if they are supported by the selected
           architecture.  An exception is for the MIPS32 and
           MIPS64 architectures and processors which implement
           those architectures; for those, Branch Likely
           instructions will not be generated by default because



gcc-4.3.2                   2008-08-27                        219





GCC(1)                         GNU                         GCC(1)


           the MIPS32 and MIPS64 architectures specifically
           deprecate their use.

       --mmffpp--eexxcceeppttiioonnss
       --mmnnoo--ffpp--eexxcceeppttiioonnss
           Specifies whether FP exceptions are enabled.  This
           affects how we schedule FP instructions for some
           processors.  The default is that FP exceptions are
           enabled.

           For instance, on the SB-1, if FP exceptions are
           disabled, and we are emitting 64-bit code, then we can
           use both FP pipes.  Otherwise, we can only use one FP
           pipe.

       --mmvvrr44113300--aalliiggnn
       --mmnnoo--vvrr44113300--aalliiggnn
           The VR4130 pipeline is two-way superscalar, but can
           only issue two instructions together if the first one
           is 8-byte aligned.  When this option is enabled, GCC
           will align pairs of instructions that it thinks should
           execute in parallel.

           This option only has an effect when optimizing for the
           VR4130.  It normally makes code faster, but at the
           expense of making it bigger.  It is enabled by default
           at optimization level --OO33.

       _M_M_I_X _O_p_t_i_o_n_s

       These options are defined for the MMIX:

       --mmlliibbffuunnccss
       --mmnnoo--lliibbffuunnccss
           Specify that intrinsic library functions are being
           compiled, passing all values in registers, no matter
           the size.

       --mmeeppssiilloonn
       --mmnnoo--eeppssiilloonn
           Generate floating-point comparison instructions that
           compare with respect to the "rE" epsilon register.

       --mmaabbii==mmmmiixxwwaarree
       --mmaabbii==ggnnuu
           Generate code that passes function parameters and
           return values that (in the called function) are seen
           as registers $0 and up, as opposed to the GNU ABI
           which uses global registers $231 and up.

       --mmzzeerroo--eexxtteenndd
       --mmnnoo--zzeerroo--eexxtteenndd
           When reading data from memory in sizes shorter than 64
           bits, use (do not use) zero-extending load



gcc-4.3.2                   2008-08-27                        220





GCC(1)                         GNU                         GCC(1)


           instructions by default, rather than sign-extending
           ones.

       --mmkknnuutthhddiivv
       --mmnnoo--kknnuutthhddiivv
           Make the result of a division yielding a remainder
           have the same sign as the divisor.  With the default,
           --mmnnoo--kknnuutthhddiivv, the sign of the remainder follows the
           sign of the dividend.  Both methods are arithmetically
           valid, the latter being almost exclusively used.

       --mmttoopplleevveell--ssyymmbboollss
       --mmnnoo--ttoopplleevveell--ssyymmbboollss
           Prepend (do not prepend) a :: to all global symbols, so
           the assembly code can be used with the "PREFIX"
           assembly directive.

       --mmeellff
           Generate an executable in the ELF format, rather than
           the default mmmmoo format used by the mmmmiixx simulator.

       --mmbbrraanncchh--pprreeddiicctt
       --mmnnoo--bbrraanncchh--pprreeddiicctt
           Use (do not use) the probable-branch instructions,
           when static branch prediction indicates a probable
           branch.

       --mmbbaassee--aaddddrreesssseess
       --mmnnoo--bbaassee--aaddddrreesssseess
           Generate (do not generate) code that uses _b_a_s_e
           _a_d_d_r_e_s_s_e_s.  Using a base address automatically
           generates a request (handled by the assembler and the
           linker) for a constant to be set up in a global
           register.  The register is used for one or more base
           address requests within the range 0 to 255 from the
           value held in the register.  The generally leads to
           short and fast code, but the number of different data
           items that can be addressed is limited.  This means
           that a program that uses lots of static data may
           require --mmnnoo--bbaassee--aaddddrreesssseess.

       --mmssiinnggllee--eexxiitt
       --mmnnoo--ssiinnggllee--eexxiitt
           Force (do not force) generated code to have a single
           exit point in each function.

       _M_N_1_0_3_0_0 _O_p_t_i_o_n_s

       These --mm options are defined for Matsushita MN10300
       architectures:

       --mmmmuulltt--bbuugg
           Generate code to avoid bugs in the multiply
           instructions for the MN10300 processors.  This is the



gcc-4.3.2                   2008-08-27                        221





GCC(1)                         GNU                         GCC(1)


           default.

       --mmnnoo--mmuulltt--bbuugg
           Do not generate code to avoid bugs in the multiply
           instructions for the MN10300 processors.

       --mmaamm3333
           Generate code which uses features specific to the AM33
           processor.

       --mmnnoo--aamm3333
           Do not generate code which uses features specific to
           the AM33 processor.  This is the default.

       --mmrreettuurrnn--ppooiinntteerr--oonn--dd00
           When generating a function which returns a pointer,
           return the pointer in both "a0" and "d0".  Otherwise,
           the pointer is returned only in a0, and attempts to
           call such functions without a prototype would result
           in errors.  Note that this option is on by default;
           use --mmnnoo--rreettuurrnn--ppooiinntteerr--oonn--dd00 to disable it.

       --mmnnoo--ccrrtt00
           Do not link in the C run-time initialization object
           file.

       --mmrreellaaxx
           Indicate to the linker that it should perform a
           relaxation optimization pass to shorten branches,
           calls and absolute memory addresses.  This option only
           has an effect when used on the command line for the
           final link step.

           This option makes symbolic debugging impossible.

       _M_T _O_p_t_i_o_n_s

       These --mm options are defined for Morpho MT architectures:

       --mmaarrcchh==_c_p_u_-_t_y_p_e
           Generate code that will run on _c_p_u_-_t_y_p_e, which is the
           name of a system representing a certain processor
           type.  Possible values for _c_p_u_-_t_y_p_e are mmss11--6644--000011,
           mmss11--1166--000022, mmss11--1166--000033 and mmss22.

           When this option is not used, the default is
           --mmaarrcchh==mmss11--1166--000022.

       --mmbbaacccc
           Use byte loads and stores when generating code.

       --mmnnoo--bbaacccc
           Do not use byte loads and stores when generating code.




gcc-4.3.2                   2008-08-27                        222





GCC(1)                         GNU                         GCC(1)


       --mmssiimm
           Use simulator runtime

       --mmnnoo--ccrrtt00
           Do not link in the C run-time initialization object
           file _c_r_t_i_._o.  Other run-time initialization and
           termination files such as _s_t_a_r_t_u_p_._o and _e_x_i_t_._o are
           still included on the linker command line.

       _P_D_P_-_1_1 _O_p_t_i_o_n_s

       These options are defined for the PDP-11:

       --mmffppuu
           Use hardware FPP floating point.  This is the default.
           (FIS floating point on the PDP-11/40 is not
           supported.)

       --mmssoofftt--ffllooaatt
           Do not use hardware floating point.

       --mmaacc00
           Return floating-point results in ac0 (fr0 in Unix
           assembler syntax).

       --mmnnoo--aacc00
           Return floating-point results in memory.  This is the
           default.

       --mm4400
           Generate code for a PDP-11/40.

       --mm4455
           Generate code for a PDP-11/45.  This is the default.

       --mm1100
           Generate code for a PDP-11/10.

       --mmbbccooppyy--bbuuiillttiinn
           Use inline "movmemhi" patterns for copying memory.
           This is the default.

       --mmbbccooppyy
           Do not use inline "movmemhi" patterns for copying
           memory.

       --mmiinntt1166
       --mmnnoo--iinntt3322
           Use 16-bit "int".  This is the default.

       --mmiinntt3322
       --mmnnoo--iinntt1166
           Use 32-bit "int".




gcc-4.3.2                   2008-08-27                        223





GCC(1)                         GNU                         GCC(1)


       --mmffllooaatt6644
       --mmnnoo--ffllooaatt3322
           Use 64-bit "float".  This is the default.

       --mmffllooaatt3322
       --mmnnoo--ffllooaatt6644
           Use 32-bit "float".

       --mmaabbsshhii
           Use "abshi2" pattern.  This is the default.

       --mmnnoo--aabbsshhii
           Do not use "abshi2" pattern.

       --mmbbrraanncchh--eexxppeennssiivvee
           Pretend that branches are expensive.  This is for
           experimenting with code generation only.

       --mmbbrraanncchh--cchheeaapp
           Do not pretend that branches are expensive.  This is
           the default.

       --mmsspplliitt
           Generate code for a system with split I&D.

       --mmnnoo--sspplliitt
           Generate code for a system without split I&D.  This is
           the default.

       --mmuunniixx--aassmm
           Use Unix assembler syntax.  This is the default when
           configured for ppddpp1111--**--bbssdd.

       --mmddeecc--aassmm
           Use DEC assembler syntax.  This is the default when
           configured for any PDP-11 target other than
           ppddpp1111--**--bbssdd.

       _P_o_w_e_r_P_C _O_p_t_i_o_n_s

       These are listed under

       _I_B_M _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s

       These --mm options are defined for the IBM RS/6000 and
       PowerPC:

       --mmppoowweerr
       --mmnnoo--ppoowweerr
       --mmppoowweerr22
       --mmnnoo--ppoowweerr22
       --mmppoowweerrppcc
       --mmnnoo--ppoowweerrppcc




gcc-4.3.2                   2008-08-27                        224





GCC(1)                         GNU                         GCC(1)


       --mmppoowweerrppcc--ggppoopptt
       --mmnnoo--ppoowweerrppcc--ggppoopptt
       --mmppoowweerrppcc--ggffxxoopptt
       --mmnnoo--ppoowweerrppcc--ggffxxoopptt
       --mmppoowweerrppcc6644
       --mmnnoo--ppoowweerrppcc6644
       --mmmmffccrrff
       --mmnnoo--mmffccrrff
       --mmppooppccnnttbb
       --mmnnoo--ppooppccnnttbb
       --mmffpprrnndd
       --mmnnoo--ffpprrnndd
       --mmccmmppbb
       --mmnnoo--ccmmppbb
       --mmmmffppggpprr
       --mmnnoo--mmffppggpprr
       --mmhhaarrdd--ddffpp
       --mmnnoo--hhaarrdd--ddffpp
           GCC supports two related instruction set architectures
           for the RS/6000 and PowerPC.  The _P_O_W_E_R instruction
           set are those instructions supported by the rriiooss chip
           set used in the original RS/6000 systems and the
           _P_o_w_e_r_P_C instruction set is the architecture of the
           Freescale MPC5xx, MPC6xx, MPC8xx microprocessors, and
           the IBM 4xx, 6xx, and follow-on microprocessors.

           Neither architecture is a subset of the other.
           However there is a large common subset of instructions
           supported by both.  An MQ register is included in
           processors supporting the POWER architecture.

           You use these options to specify which instructions
           are available on the processor you are using.  The
           default value of these options is determined when
           configuring GCC.  Specifying the --mmccppuu==_c_p_u___t_y_p_e
           overrides the specification of these options.  We
           recommend you use the --mmccppuu==_c_p_u___t_y_p_e option rather
           than the options listed above.

           The --mmppoowweerr option allows GCC to generate instructions
           that are found only in the POWER architecture and to
           use the MQ register.  Specifying --mmppoowweerr22 implies
           --ppoowweerr and also allows GCC to generate instructions
           that are present in the POWER2 architecture but not
           the original POWER architecture.

           The --mmppoowweerrppcc option allows GCC to generate
           instructions that are found only in the 32-bit subset
           of the PowerPC architecture.  Specifying
           --mmppoowweerrppcc--ggppoopptt implies --mmppoowweerrppcc and also allows GCC
           to use the optional PowerPC architecture instructions
           in the General Purpose group, including floating-point
           square root.  Specifying --mmppoowweerrppcc--ggffxxoopptt implies
           --mmppoowweerrppcc and also allows GCC to use the optional



gcc-4.3.2                   2008-08-27                        225





GCC(1)                         GNU                         GCC(1)


           PowerPC architecture instructions in the Graphics
           group, including floating-point select.

           The --mmmmffccrrff option allows GCC to generate the move
           from condition register field instruction implemented
           on the POWER4 processor and other processors that
           support the PowerPC V2.01 architecture.  The --mmppooppccnnttbb
           option allows GCC to generate the popcount and double
           precision FP reciprocal estimate instruction
           implemented on the POWER5 processor and other
           processors that support the PowerPC V2.02
           architecture.  The --mmffpprrnndd option allows GCC to
           generate the FP round to integer instructions
           implemented on the POWER5+ processor and other
           processors that support the PowerPC V2.03
           architecture.  The --mmccmmppbb option allows GCC to
           generate the compare bytes instruction implemented on
           the POWER6 processor and other processors that support
           the PowerPC V2.05 architecture.  The --mmmmffppggpprr option
           allows GCC to generate the FP move to/from general
           purpose register instructions implemented on the
           POWER6X processor and other processors that support
           the extended PowerPC V2.05 architecture.  The
           --mmhhaarrdd--ddffpp option allows GCC to generate the decimal
           floating point instructions implemented on some POWER
           processors.

           The --mmppoowweerrppcc6644 option allows GCC to generate the
           additional 64-bit instructions that are found in the
           full PowerPC64 architecture and to treat GPRs as
           64-bit, doubleword quantities.  GCC defaults to
           --mmnnoo--ppoowweerrppcc6644.

           If you specify both --mmnnoo--ppoowweerr and --mmnnoo--ppoowweerrppcc, GCC
           will use only the instructions in the common subset of
           both architectures plus some special AIX common-mode
           calls, and will not use the MQ register.  Specifying
           both --mmppoowweerr and --mmppoowweerrppcc permits GCC to use any
           instruction from either architecture and to allow use
           of the MQ register; specify this for the Motorola
           MPC601.

       --mmnneeww--mmnneemmoonniiccss
       --mmoolldd--mmnneemmoonniiccss
           Select which mnemonics to use in the generated
           assembler code.  With --mmnneeww--mmnneemmoonniiccss, GCC uses the
           assembler mnemonics defined for the PowerPC
           architecture.  With --mmoolldd--mmnneemmoonniiccss it uses the
           assembler mnemonics defined for the POWER
           architecture.  Instructions defined in only one
           architecture have only one mnemonic; GCC uses that
           mnemonic irrespective of which of these options is
           specified.




gcc-4.3.2                   2008-08-27                        226





GCC(1)                         GNU                         GCC(1)


           GCC defaults to the mnemonics appropriate for the
           architecture in use.  Specifying --mmccppuu==_c_p_u___t_y_p_e
           sometimes overrides the value of these option.  Unless
           you are building a cross-compiler, you should normally
           not specify either --mmnneeww--mmnneemmoonniiccss or --mmoolldd--mmnneemmoonniiccss,
           but should instead accept the default.

       --mmccppuu==_c_p_u___t_y_p_e
           Set architecture type, register usage, choice of
           mnemonics, and instruction scheduling parameters for
           machine type _c_p_u___t_y_p_e.  Supported values for _c_p_u___t_y_p_e
           are 440011, 440033, 440055, 440055ffpp, 444400, 444400ffpp, 550055, 660011, 660022,
           660033, 660033ee, 660044, 660044ee, 662200, 663300, 774400, 77440000, 77445500, 775500,
           880011, 882211, 882233, 886600, 997700, 88554400, eecc660033ee, GG33, GG44, GG55,
           ppoowweerr, ppoowweerr22, ppoowweerr33, ppoowweerr44, ppoowweerr55, ppoowweerr55++,
           ppoowweerr66, ppoowweerr66xx, ccoommmmoonn, ppoowweerrppcc, ppoowweerrppcc6644, rriiooss,
           rriiooss11, rriiooss22, rrsscc, and rrss6644.

           --mmccppuu==ccoommmmoonn selects a completely generic processor.
           Code generated under this option will run on any POWER
           or PowerPC processor.  GCC will use only the
           instructions in the common subset of both
           architectures, and will not use the MQ register.  GCC
           assumes a generic processor model for scheduling
           purposes.

           --mmccppuu==ppoowweerr, --mmccppuu==ppoowweerr22, --mmccppuu==ppoowweerrppcc, and
           --mmccppuu==ppoowweerrppcc6644 specify generic POWER, POWER2, pure
           32-bit PowerPC (i.e., not MPC601), and 64-bit PowerPC
           architecture machine types, with an appropriate,
           generic processor model assumed for scheduling
           purposes.

           The other options specify a specific processor.  Code
           generated under those options will run best on that
           processor, and may not run at all on others.

           The --mmccppuu options automatically enable or disable the
           following options:

           --mmaallttiivveecc  --mmffpprrnndd  --mmhhaarrdd--ffllooaatt  --mmmmffccrrff  --mmmmuullttiippllee
           --mmnneeww--mmnneemmoonniiccss  --mmppooppccnnttbb  --mmppoowweerr  --mmppoowweerr22
           --mmppoowweerrppcc6644 --mmppoowweerrppcc--ggppoopptt  --mmppoowweerrppcc--ggffxxoopptt
           --mmssttrriinngg  --mmmmuullhhww  --mmddllmmzzbb  --mmmmffppggpprr

           The particular options set for any particular CPU will
           vary between compiler versions, depending on what
           setting seems to produce optimal code for that CPU; it
           doesn't necessarily reflect the actual hardware's
           capabilities.  If you wish to set an individual option
           to a particular value, you may specify it after the
           --mmccppuu option, like --mmccppuu==997700 --mmnnoo--aallttiivveecc.

           On AIX, the --mmaallttiivveecc and --mmppoowweerrppcc6644 options are not



gcc-4.3.2                   2008-08-27                        227





GCC(1)                         GNU                         GCC(1)


           enabled or disabled by the --mmccppuu option at present
           because AIX does not have full support for these
           options.  You may still enable or disable them
           individually if you're sure it'll work in your
           environment.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine
           type _c_p_u___t_y_p_e, but do not set the architecture type,
           register usage, or choice of mnemonics, as
           --mmccppuu==_c_p_u___t_y_p_e would.  The same values for _c_p_u___t_y_p_e
           are used for --mmttuunnee as for --mmccppuu.  If both are
           specified, the code generated will use the
           architecture, registers, and mnemonics set by --mmccppuu,
           but the scheduling parameters set by --mmttuunnee.

       --mmsswwddiivv
       --mmnnoo--sswwddiivv
           Generate code to compute division as reciprocal
           estimate and iterative refinement, creating
           opportunities for increased throughput.  This feature
           requires: optional PowerPC Graphics instruction set
           for single precision and FRE instruction for double
           precision, assuming divides cannot generate user-
           visible traps, and the domain values not include
           Infinities, denormals or zero denominator.

       --mmaallttiivveecc
       --mmnnoo--aallttiivveecc
           Generate code that uses (does not use) AltiVec
           instructions, and also enable the use of built-in
           functions that allow more direct access to the AltiVec
           instruction set.  You may also need to set
           --mmaabbii==aallttiivveecc to adjust the current ABI with AltiVec
           ABI enhancements.

       --mmvvrrssaavvee
       --mmnnoo--vvrrssaavvee
           Generate VRSAVE instructions when generating AltiVec
           code.

       --mmsseeccuurree--pplltt
           Generate code that allows ld and ld.so to build
           executables and shared libraries with non-exec .plt
           and .got sections.  This is a PowerPC 32-bit SYSV ABI
           option.

       --mmbbssss--pplltt
           Generate code that uses a BSS .plt section that ld.so
           fills in, and requires .plt and .got sections that are
           both writable and executable.  This is a PowerPC
           32-bit SYSV ABI option.





gcc-4.3.2                   2008-08-27                        228





GCC(1)                         GNU                         GCC(1)


       --mmiisseell
       --mmnnoo--iisseell
           This switch enables or disables the generation of ISEL
           instructions.

       --mmiisseell==_y_e_s_/_n_o
           This switch has been deprecated.  Use --mmiisseell and
           --mmnnoo--iisseell instead.

       --mmssppee
       --mmnnoo--ssppee
           This switch enables or disables the generation of SPE
           simd instructions.

       --mmppaaiirreedd
       --mmnnoo--ppaaiirreedd
           This switch enables or disables the generation of
           PAIRED simd instructions.

       --mmssppee==_y_e_s_/_n_o
           This option has been deprecated.  Use --mmssppee and
           --mmnnoo--ssppee instead.

       --mmffllooaatt--ggpprrss==_y_e_s_/_s_i_n_g_l_e_/_d_o_u_b_l_e_/_n_o
       --mmffllooaatt--ggpprrss
           This switch enables or disables the generation of
           floating point operations on the general purpose
           registers for architectures that support it.

           The argument _y_e_s or _s_i_n_g_l_e enables the use of single-
           precision floating point operations.

           The argument _d_o_u_b_l_e enables the use of single and
           double-precision floating point operations.

           The argument _n_o disables floating point operations on
           the general purpose registers.

           This option is currently only available on the
           MPC854x.

       --mm3322
       --mm6644
           Generate code for 32-bit or 64-bit environments of
           Darwin and SVR4 targets (including GNU/Linux).  The
           32-bit environment sets int, long and pointer to 32
           bits and generates code that runs on any PowerPC
           variant.  The 64-bit environment sets int to 32 bits
           and long and pointer to 64 bits, and generates code
           for PowerPC64, as for --mmppoowweerrppcc6644.

       --mmffuullll--ttoocc
       --mmnnoo--ffpp--iinn--ttoocc




gcc-4.3.2                   2008-08-27                        229





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--ssuumm--iinn--ttoocc
       --mmmmiinniimmaall--ttoocc
           Modify generation of the TOC (Table Of Contents),
           which is created for every executable file.  The
           --mmffuullll--ttoocc option is selected by default.  In that
           case, GCC will allocate at least one TOC entry for
           each unique non-automatic variable reference in your
           program.  GCC will also place floating-point constants
           in the TOC.  However, only 16,384 entries are
           available in the TOC.

           If you receive a linker error message that saying you
           have overflowed the available TOC space, you can
           reduce the amount of TOC space used with the
           --mmnnoo--ffpp--iinn--ttoocc and --mmnnoo--ssuumm--iinn--ttoocc options.
           --mmnnoo--ffpp--iinn--ttoocc prevents GCC from putting floating-
           point constants in the TOC and --mmnnoo--ssuumm--iinn--ttoocc forces
           GCC to generate code to calculate the sum of an
           address and a constant at run-time instead of putting
           that sum into the TOC.  You may specify one or both of
           these options.  Each causes GCC to produce very
           slightly slower and larger code at the expense of
           conserving TOC space.

           If you still run out of space in the TOC even when you
           specify both of these options, specify --mmmmiinniimmaall--ttoocc
           instead.  This option causes GCC to make only one TOC
           entry for every file.  When you specify this option,
           GCC will produce code that is slower and larger but
           which uses extremely little TOC space.  You may wish
           to use this option only on files that contain less
           frequently executed code.

       --mmaaiixx6644
       --mmaaiixx3322
           Enable 64-bit AIX ABI and calling convention: 64-bit
           pointers, 64-bit "long" type, and the infrastructure
           needed to support them.  Specifying --mmaaiixx6644 implies
           --mmppoowweerrppcc6644 and --mmppoowweerrppcc, while --mmaaiixx3322 disables the
           64-bit ABI and implies --mmnnoo--ppoowweerrppcc6644.  GCC defaults
           to --mmaaiixx3322.

       --mmxxll--ccoommppaatt
       --mmnnoo--xxll--ccoommppaatt
           Produce code that conforms more closely to IBM XL
           compiler semantics when using AIX-compatible ABI.
           Pass floating-point arguments to prototyped functions
           beyond the register save area (RSA) on the stack in
           addition to argument FPRs.  Do not assume that most
           significant double in 128-bit long double value is
           properly rounded when comparing values and converting
           to double.  Use XL symbol names for long double
           support routines.




gcc-4.3.2                   2008-08-27                        230





GCC(1)                         GNU                         GCC(1)


           The AIX calling convention was extended but not
           initially documented to handle an obscure K&R C case
           of calling a function that takes the address of its
           arguments with fewer arguments than declared.  IBM XL
           compilers access floating point arguments which do not
           fit in the RSA from the stack when a subroutine is
           compiled without optimization.  Because always storing
           floating-point arguments on the stack is inefficient
           and rarely needed, this option is not enabled by
           default and only is necessary when calling subroutines
           compiled by IBM XL compilers without optimization.

       --mmppee
           Support _I_B_M _R_S_/_6_0_0_0 _S_P _P_a_r_a_l_l_e_l _E_n_v_i_r_o_n_m_e_n_t (PE).
           Link an application written to use message passing
           with special startup code to enable the application to
           run.  The system must have PE installed in the
           standard location (_/_u_s_r_/_l_p_p_/_p_p_e_._p_o_e_/), or the _s_p_e_c_s
           file must be overridden with the --ssppeeccss== option to
           specify the appropriate directory location.  The
           Parallel Environment does not support threads, so the
           --mmppee option and the --pptthhrreeaadd option are incompatible.

       --mmaalliiggnn--nnaattuurraall
       --mmaalliiggnn--ppoowweerr
           On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux,
           the option --mmaalliiggnn--nnaattuurraall overrides the ABI-defined
           alignment of larger types, such as floating-point
           doubles, on their natural size-based boundary.  The
           option --mmaalliiggnn--ppoowweerr instructs GCC to follow the ABI-
           specified alignment rules.  GCC defaults to the
           standard alignment defined in the ABI.

           On 64-bit Darwin, natural alignment is the default,
           and --mmaalliiggnn--ppoowweerr is not supported.

       --mmssoofftt--ffllooaatt
       --mmhhaarrdd--ffllooaatt
           Generate code that does not use (uses) the floating-
           point register set.  Software floating point emulation
           is provided if you use the --mmssoofftt--ffllooaatt option, and
           pass the option to GCC when linking.

       --mmmmuullttiippllee
       --mmnnoo--mmuullttiippllee
           Generate code that uses (does not use) the load
           multiple word instructions and the store multiple word
           instructions.  These instructions are generated by
           default on POWER systems, and not generated on PowerPC
           systems.  Do not use --mmmmuullttiippllee on little endian
           PowerPC systems, since those instructions do not work
           when the processor is in little endian mode.  The
           exceptions are PPC740 and PPC750 which permit the
           instructions usage in little endian mode.



gcc-4.3.2                   2008-08-27                        231





GCC(1)                         GNU                         GCC(1)


       --mmssttrriinngg
       --mmnnoo--ssttrriinngg
           Generate code that uses (does not use) the load string
           instructions and the store string word instructions to
           save multiple registers and do small block moves.
           These instructions are generated by default on POWER
           systems, and not generated on PowerPC systems.  Do not
           use --mmssttrriinngg on little endian PowerPC systems, since
           those instructions do not work when the processor is
           in little endian mode.  The exceptions are PPC740 and
           PPC750 which permit the instructions usage in little
           endian mode.

       --mmuuppddaattee
       --mmnnoo--uuppddaattee
           Generate code that uses (does not use) the load or
           store instructions that update the base register to
           the address of the calculated memory location.  These
           instructions are generated by default.  If you use
           --mmnnoo--uuppddaattee, there is a small window between the time
           that the stack pointer is updated and the address of
           the previous frame is stored, which means code that
           walks the stack frame across interrupts or signals may
           get corrupted data.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Generate code that uses (does not use) the floating
           point multiply and accumulate instructions.  These
           instructions are generated by default if hardware
           floating is used.

       --mmmmuullhhww
       --mmnnoo--mmuullhhww
           Generate code that uses (does not use) the half-word
           multiply and multiply-accumulate instructions on the
           IBM 405 and 440 processors.  These instructions are
           generated by default when targetting those processors.

       --mmddllmmzzbb
       --mmnnoo--ddllmmzzbb
           Generate code that uses (does not use) the string-
           search ddllmmzzbb instruction on the IBM 405 and 440
           processors.  This instruction is generated by default
           when targetting those processors.

       --mmnnoo--bbiitt--aalliiggnn
       --mmbbiitt--aalliiggnn
           On System V.4 and embedded PowerPC systems do not (do)
           force structures and unions that contain bit-fields to
           be aligned to the base type of the bit-field.

           For example, by default a structure containing nothing
           but 8 "unsigned" bit-fields of length 1 would be



gcc-4.3.2                   2008-08-27                        232





GCC(1)                         GNU                         GCC(1)


           aligned to a 4 byte boundary and have a size of 4
           bytes.  By using --mmnnoo--bbiitt--aalliiggnn, the structure would
           be aligned to a 1 byte boundary and be one byte in
           size.

       --mmnnoo--ssttrriicctt--aalliiggnn
       --mmssttrriicctt--aalliiggnn
           On System V.4 and embedded PowerPC systems do not (do)
           assume that unaligned memory references will be
           handled by the system.

       --mmrreellooccaattaabbllee
       --mmnnoo--rreellooccaattaabbllee
           On embedded PowerPC systems generate code that allows
           (does not allow) the program to be relocated to a
           different address at runtime.  If you use
           --mmrreellooccaattaabbllee on any module, all objects linked
           together must be compiled with --mmrreellooccaattaabbllee or
           --mmrreellooccaattaabbllee--lliibb.

       --mmrreellooccaattaabbllee--lliibb
       --mmnnoo--rreellooccaattaabbllee--lliibb
           On embedded PowerPC systems generate code that allows
           (does not allow) the program to be relocated to a
           different address at runtime.  Modules compiled with
           --mmrreellooccaattaabbllee--lliibb can be linked with either modules
           compiled without --mmrreellooccaattaabbllee and --mmrreellooccaattaabbllee--lliibb
           or with modules compiled with the --mmrreellooccaattaabbllee
           options.

       --mmnnoo--ttoocc
       --mmttoocc
           On System V.4 and embedded PowerPC systems do not (do)
           assume that register 2 contains a pointer to a global
           area pointing to the addresses used in the program.

       --mmlliittttllee
       --mmlliittttllee--eennddiiaann
           On System V.4 and embedded PowerPC systems compile
           code for the processor in little endian mode.  The
           --mmlliittttllee--eennddiiaann option is the same as --mmlliittttllee.

       --mmbbiigg
       --mmbbiigg--eennddiiaann
           On System V.4 and embedded PowerPC systems compile
           code for the processor in big endian mode.  The
           --mmbbiigg--eennddiiaann option is the same as --mmbbiigg.

       --mmddyynnaammiicc--nnoo--ppiicc
           On Darwin and Mac OS X systems, compile code so that
           it is not relocatable, but that its external
           references are relocatable.  The resulting code is
           suitable for applications, but not shared libraries.




gcc-4.3.2                   2008-08-27                        233





GCC(1)                         GNU                         GCC(1)


       --mmpprriioorriittiizzee--rreessttrriicctteedd--iinnssnnss==_p_r_i_o_r_i_t_y
           This option controls the priority that is assigned to
           dispatch-slot restricted instructions during the
           second scheduling pass.  The argument _p_r_i_o_r_i_t_y takes
           the value _0_/_1_/_2 to assign _n_o_/_h_i_g_h_e_s_t_/_s_e_c_o_n_d_-_h_i_g_h_e_s_t
           priority to dispatch slot restricted instructions.

       --mmsscchheedd--ccoossttllyy--ddeepp==_d_e_p_e_n_d_e_n_c_e___t_y_p_e
           This option controls which dependences are considered
           costly by the target during instruction scheduling.
           The argument _d_e_p_e_n_d_e_n_c_e___t_y_p_e takes one of the
           following values: _n_o: no dependence is costly, _a_l_l:
           all dependences are costly, _t_r_u_e___s_t_o_r_e___t_o___l_o_a_d: a true
           dependence from store to load is costly,
           _s_t_o_r_e___t_o___l_o_a_d: any dependence from store to load is
           costly, _n_u_m_b_e_r: any dependence which latency >= _n_u_m_b_e_r
           is costly.

       --mmiinnsseerrtt--sscchheedd--nnooppss==_s_c_h_e_m_e
           This option controls which nop insertion scheme will
           be used during the second scheduling pass.  The
           argument _s_c_h_e_m_e takes one of the following values: _n_o:
           Don't insert nops.  _p_a_d: Pad with nops any dispatch
           group which has vacant issue slots, according to the
           scheduler's grouping.  _r_e_g_r_o_u_p___e_x_a_c_t: Insert nops to
           force costly dependent insns into separate groups.
           Insert exactly as many nops as needed to force an insn
           to a new group, according to the estimated processor
           grouping.  _n_u_m_b_e_r: Insert nops to force costly
           dependent insns into separate groups.  Insert _n_u_m_b_e_r
           nops to force an insn to a new group.

       --mmccaallll--ssyyssvv
           On System V.4 and embedded PowerPC systems compile
           code using calling conventions that adheres to the
           March 1995 draft of the System V Application Binary
           Interface, PowerPC processor supplement.  This is the
           default unless you configured GCC using
           ppoowweerrppcc--**--eeaabbiiaaiixx.

       --mmccaallll--ssyyssvv--eeaabbii
           Specify both --mmccaallll--ssyyssvv and --mmeeaabbii options.

       --mmccaallll--ssyyssvv--nnooeeaabbii
           Specify both --mmccaallll--ssyyssvv and --mmnnoo--eeaabbii options.

       --mmccaallll--ssoollaarriiss
           On System V.4 and embedded PowerPC systems compile
           code for the Solaris operating system.

       --mmccaallll--lliinnuuxx
           On System V.4 and embedded PowerPC systems compile
           code for the Linux-based GNU system.




gcc-4.3.2                   2008-08-27                        234





GCC(1)                         GNU                         GCC(1)


       --mmccaallll--ggnnuu
           On System V.4 and embedded PowerPC systems compile
           code for the Hurd-based GNU system.

       --mmccaallll--nneettbbssdd
           On System V.4 and embedded PowerPC systems compile
           code for the NetBSD operating system.

       --mmaaiixx--ssttrruucctt--rreettuurrnn
           Return all structures in memory (as specified by the
           AIX ABI).

       --mmssvvrr44--ssttrruucctt--rreettuurrnn
           Return structures smaller than 8 bytes in registers
           (as specified by the SVR4 ABI).

       --mmaabbii==_a_b_i_-_t_y_p_e
           Extend the current ABI with a particular extension, or
           remove such extension.  Valid values are _a_l_t_i_v_e_c, _n_o_-
           _a_l_t_i_v_e_c, _s_p_e, _n_o_-_s_p_e, _i_b_m_l_o_n_g_d_o_u_b_l_e, _i_e_e_e_l_o_n_g_d_o_u_b_l_e.

       --mmaabbii==ssppee
           Extend the current ABI with SPE ABI extensions.  This
           does not change the default ABI, instead it adds the
           SPE ABI extensions to the current ABI.

       --mmaabbii==nnoo--ssppee
           Disable Booke SPE ABI extensions for the current ABI.

       --mmaabbii==iibbmmlloonnggddoouubbllee
           Change the current ABI to use IBM extended precision
           long double.  This is a PowerPC 32-bit SYSV ABI
           option.

       --mmaabbii==iieeeeeelloonnggddoouubbllee
           Change the current ABI to use IEEE extended precision
           long double.  This is a PowerPC 32-bit Linux ABI
           option.

       --mmpprroottoottyyppee
       --mmnnoo--pprroottoottyyppee
           On System V.4 and embedded PowerPC systems assume that
           all calls to variable argument functions are properly
           prototyped.  Otherwise, the compiler must insert an
           instruction before every non prototyped call to set or
           clear bit 6 of the condition code register (_C_R) to
           indicate whether floating point values were passed in
           the floating point registers in case the function
           takes a variable arguments.  With --mmpprroottoottyyppee, only
           calls to prototyped variable argument functions will
           set or clear the bit.

       --mmssiimm
           On embedded PowerPC systems, assume that the startup



gcc-4.3.2                   2008-08-27                        235





GCC(1)                         GNU                         GCC(1)


           module is called _s_i_m_-_c_r_t_0_._o and that the standard C
           libraries are _l_i_b_s_i_m_._a and _l_i_b_c_._a.  This is the
           default for ppoowweerrppcc--**--eeaabbiissiimm configurations.

       --mmmmvvmmee
           On embedded PowerPC systems, assume that the startup
           module is called _c_r_t_0_._o and the standard C libraries
           are _l_i_b_m_v_m_e_._a and _l_i_b_c_._a.

       --mmaaddss
           On embedded PowerPC systems, assume that the startup
           module is called _c_r_t_0_._o and the standard C libraries
           are _l_i_b_a_d_s_._a and _l_i_b_c_._a.

       --mmyyeelllloowwkknniiffee
           On embedded PowerPC systems, assume that the startup
           module is called _c_r_t_0_._o and the standard C libraries
           are _l_i_b_y_k_._a and _l_i_b_c_._a.

       --mmvvxxwwoorrkkss
           On System V.4 and embedded PowerPC systems, specify
           that you are compiling for a VxWorks system.

       --mmwwiinnddiissss
           Specify that you are compiling for the WindISS
           simulation environment.

       --mmeemmbb
           On embedded PowerPC systems, set the _P_P_C___E_M_B bit in
           the ELF flags header to indicate that eeaabbii extended
           relocations are used.

       --mmeeaabbii
       --mmnnoo--eeaabbii
           On System V.4 and embedded PowerPC systems do (do not)
           adhere to the Embedded Applications Binary Interface
           (eabi) which is a set of modifications to the System
           V.4 specifications.  Selecting --mmeeaabbii means that the
           stack is aligned to an 8 byte boundary, a function
           "__eabi" is called to from "main" to set up the eabi
           environment, and the --mmssddaattaa option can use both "r2"
           and "r13" to point to two separate small data areas.
           Selecting --mmnnoo--eeaabbii means that the stack is aligned to
           a 16 byte boundary, do not call an initialization
           function from "main", and the --mmssddaattaa option will only
           use "r13" to point to a single small data area.  The
           --mmeeaabbii option is on by default if you configured GCC
           using one of the ppoowweerrppcc**--**--eeaabbii** options.

       --mmssddaattaa==eeaabbii
           On System V.4 and embedded PowerPC systems, put small
           initialized "const" global and static data in the
           ..ssddaattaa22 section, which is pointed to by register "r2".
           Put small initialized non-"const" global and static



gcc-4.3.2                   2008-08-27                        236





GCC(1)                         GNU                         GCC(1)


           data in the ..ssddaattaa section, which is pointed to by
           register "r13".  Put small uninitialized global and
           static data in the ..ssbbssss section, which is adjacent to
           the ..ssddaattaa section.  The --mmssddaattaa==eeaabbii option is
           incompatible with the --mmrreellooccaattaabbllee option.  The
           --mmssddaattaa==eeaabbii option also sets the --mmeemmbb option.

       --mmssddaattaa==ssyyssvv
           On System V.4 and embedded PowerPC systems, put small
           global and static data in the ..ssddaattaa section, which is
           pointed to by register "r13".  Put small uninitialized
           global and static data in the ..ssbbssss section, which is
           adjacent to the ..ssddaattaa section.  The --mmssddaattaa==ssyyssvv
           option is incompatible with the --mmrreellooccaattaabbllee option.

       --mmssddaattaa==ddeeffaauulltt
       --mmssddaattaa
           On System V.4 and embedded PowerPC systems, if --mmeeaabbii
           is used, compile code the same as --mmssddaattaa==eeaabbii,
           otherwise compile code the same as --mmssddaattaa==ssyyssvv.

       --mmssddaattaa--ddaattaa
           On System V.4 and embedded PowerPC systems, put small
           global data in the ..ssddaattaa section.  Put small
           uninitialized global data in the ..ssbbssss section.  Do
           not use register "r13" to address small data however.
           This is the default behavior unless other --mmssddaattaa
           options are used.

       --mmssddaattaa==nnoonnee
       --mmnnoo--ssddaattaa
           On embedded PowerPC systems, put all initialized
           global and static data in the ..ddaattaa section, and all
           uninitialized data in the ..bbssss section.

       --GG _n_u_m
           On embedded PowerPC systems, put global and static
           items less than or equal to _n_u_m bytes into the small
           data or bss sections instead of the normal data or bss
           section.  By default, _n_u_m is 8.  The --GG _n_u_m switch is
           also passed to the linker.  All modules should be
           compiled with the same --GG _n_u_m value.

       --mmrreeggnnaammeess
       --mmnnoo--rreeggnnaammeess
           On System V.4 and embedded PowerPC systems do (do not)
           emit register names in the assembly language output
           using symbolic forms.

       --mmlloonnggccaallll
       --mmnnoo--lloonnggccaallll
           By default assume that all calls are far away so that
           a longer more expensive calling sequence is required.
           This is required for calls further than 32 megabytes



gcc-4.3.2                   2008-08-27                        237





GCC(1)                         GNU                         GCC(1)


           (33,554,432 bytes) from the current location.  A short
           call will be generated if the compiler knows the call
           cannot be that far away.  This setting can be
           overridden by the "shortcall" function attribute, or
           by "#pragma longcall(0)".

           Some linkers are capable of detecting out-of-range
           calls and generating glue code on the fly.  On these
           systems, long calls are unnecessary and generate
           slower code.  As of this writing, the AIX linker can
           do this, as can the GNU linker for PowerPC/64.  It is
           planned to add this feature to the GNU linker for
           32-bit PowerPC systems as well.

           On Darwin/PPC systems, "#pragma longcall" will
           generate "jbsr callee, L42", plus a "branch island"
           (glue code).  The two target addresses represent the
           callee and the "branch island".  The Darwin/PPC linker
           will prefer the first address and generate a "bl
           callee" if the PPC "bl" instruction will reach the
           callee directly; otherwise, the linker will generate
           "bl L42" to call the "branch island".  The "branch
           island" is appended to the body of the calling
           function; it computes the full 32-bit address of the
           callee and jumps to it.

           On Mach-O (Darwin) systems, this option directs the
           compiler emit to the glue for every direct call, and
           the Darwin linker decides whether to use or discard
           it.

           In the future, we may cause GCC to ignore all longcall
           specifications when the linker is known to generate
           glue.

       --pptthhrreeaadd
           Adds support for multithreading with the _p_t_h_r_e_a_d_s
           library.  This option sets flags for both the
           preprocessor and linker.

       _S_/_3_9_0 _a_n_d _z_S_e_r_i_e_s _O_p_t_i_o_n_s

       These are the --mm options defined for the S/390 and zSeries
       architecture.

       --mmhhaarrdd--ffllooaatt
       --mmssoofftt--ffllooaatt
           Use (do not use) the hardware floating-point
           instructions and registers for floating-point
           operations.  When --mmssoofftt--ffllooaatt is specified, functions
           in _l_i_b_g_c_c_._a will be used to perform floating-point
           operations.  When --mmhhaarrdd--ffllooaatt is specified, the
           compiler generates IEEE floating-point instructions.
           This is the default.



gcc-4.3.2                   2008-08-27                        238





GCC(1)                         GNU                         GCC(1)


       --mmlloonngg--ddoouubbllee--6644
       --mmlloonngg--ddoouubbllee--112288
           These switches control the size of "long double" type.
           A size of 64bit makes the "long double" type
           equivalent to the "double" type. This is the default.

       --mmbbaacckkcchhaaiinn
       --mmnnoo--bbaacckkcchhaaiinn
           Store (do not store) the address of the caller's frame
           as backchain pointer into the callee's stack frame.  A
           backchain may be needed to allow debugging using tools
           that do not understand DWARF-2 call frame information.
           When --mmnnoo--ppaacckkeedd--ssttaacckk is in effect, the backchain
           pointer is stored at the bottom of the stack frame;
           when --mmppaacckkeedd--ssttaacckk is in effect, the backchain is
           placed into the topmost word of the 96/160 byte
           register save area.

           In general, code compiled with --mmbbaacckkcchhaaiinn is call-
           compatible with code compiled with --mmmmoo--bbaacckkcchhaaiinn;
           however, use of the backchain for debugging purposes
           usually requires that the whole binary is built with
           --mmbbaacckkcchhaaiinn.  Note that the combination of
           --mmbbaacckkcchhaaiinn, --mmppaacckkeedd--ssttaacckk and --mmhhaarrdd--ffllooaatt is not
           supported.  In order to build a linux kernel use
           --mmssoofftt--ffllooaatt.

           The default is to not maintain the backchain.

       --mmppaacckkeedd--ssttaacckk
       --mmnnoo--ppaacckkeedd--ssttaacckk
           Use (do not use) the packed stack layout.  When
           --mmnnoo--ppaacckkeedd--ssttaacckk is specified, the compiler uses the
           all fields of the 96/160 byte register save area only
           for their default purpose; unused fields still take up
           stack space.  When --mmppaacckkeedd--ssttaacckk is specified,
           register save slots are densely packed at the top of
           the register save area; unused space is reused for
           other purposes, allowing for more efficient use of the
           available stack space.  However, when --mmbbaacckkcchhaaiinn is
           also in effect, the topmost word of the save area is
           always used to store the backchain, and the return
           address register is always saved two words below the
           backchain.

           As long as the stack frame backchain is not used, code
           generated with --mmppaacckkeedd--ssttaacckk is call-compatible with
           code generated with --mmnnoo--ppaacckkeedd--ssttaacckk.  Note that some
           non-FSF releases of GCC 2.95 for S/390 or zSeries
           generated code that uses the stack frame backchain at
           run time, not just for debugging purposes.  Such code
           is not call-compatible with code compiled with
           --mmppaacckkeedd--ssttaacckk.  Also, note that the combination of
           --mmbbaacckkcchhaaiinn, --mmppaacckkeedd--ssttaacckk and --mmhhaarrdd--ffllooaatt is not



gcc-4.3.2                   2008-08-27                        239





GCC(1)                         GNU                         GCC(1)


           supported.  In order to build a linux kernel use
           --mmssoofftt--ffllooaatt.

           The default is to not use the packed stack layout.

       --mmssmmaallll--eexxeecc
       --mmnnoo--ssmmaallll--eexxeecc
           Generate (or do not generate) code using the "bras"
           instruction to do subroutine calls.  This only works
           reliably if the total executable size does not exceed
           64k.  The default is to use the "basr" instruction
           instead, which does not have this limitation.

       --mm6644
       --mm3311
           When --mm3311 is specified, generate code compliant to the
           GNU/Linux for S/390 ABI.  When --mm6644 is specified,
           generate code compliant to the GNU/Linux for zSeries
           ABI.  This allows GCC in particular to generate 64-bit
           instructions.  For the ss339900 targets, the default is
           --mm3311, while the ss339900xx targets default to --mm6644.

       --mmzzaarrcchh
       --mmeessaa
           When --mmzzaarrcchh is specified, generate code using the
           instructions available on z/Architecture.  When --mmeessaa
           is specified, generate code using the instructions
           available on ESA/390.  Note that --mmeessaa is not possible
           with --mm6644.  When generating code compliant to the
           GNU/Linux for S/390 ABI, the default is --mmeessaa.  When
           generating code compliant to the GNU/Linux for zSeries
           ABI, the default is --mmzzaarrcchh.

       --mmmmvvccllee
       --mmnnoo--mmvvccllee
           Generate (or do not generate) code using the "mvcle"
           instruction to perform block moves.  When --mmnnoo--mmvvccllee
           is specified, use a "mvc" loop instead.  This is the
           default unless optimizing for size.

       --mmddeebbuugg
       --mmnnoo--ddeebbuugg
           Print (or do not print) additional debug information
           when compiling.  The default is to not print debug
           information.

       --mmaarrcchh==_c_p_u_-_t_y_p_e
           Generate code that will run on _c_p_u_-_t_y_p_e, which is the
           name of a system representing a certain processor
           type.  Possible values for _c_p_u_-_t_y_p_e are gg55, gg66, zz990000,
           and zz999900.  When generating code using the instructions
           available on z/Architecture, the default is
           --mmaarrcchh==zz990000.  Otherwise, the default is --mmaarrcchh==gg55.




gcc-4.3.2                   2008-08-27                        240





GCC(1)                         GNU                         GCC(1)


       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune to _c_p_u_-_t_y_p_e everything applicable about the
           generated code, except for the ABI and the set of
           available instructions.  The list of _c_p_u_-_t_y_p_e values
           is the same as for --mmaarrcchh.  The default is the value
           used for --mmaarrcchh.

       --mmttppff--ttrraaccee
       --mmnnoo--ttppff--ttrraaccee
           Generate code that adds (does not add) in TPF OS
           specific branches to trace routines in the operating
           system.  This option is off by default, even when
           compiling for the TPF OS.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Generate code that uses (does not use) the floating
           point multiply and accumulate instructions.  These
           instructions are generated by default if hardware
           floating point is used.

       --mmwwaarrnn--ffrraammeessiizzee==_f_r_a_m_e_s_i_z_e
           Emit a warning if the current function exceeds the
           given frame size.  Because this is a compile time
           check it doesn't need to be a real problem when the
           program runs.  It is intended to identify functions
           which most probably cause a stack overflow.  It is
           useful to be used in an environment with limited stack
           size e.g. the linux kernel.

       --mmwwaarrnn--ddyynnaammiiccssttaacckk
           Emit a warning if the function calls alloca or uses
           dynamically sized arrays.  This is generally a bad
           idea with a limited stack size.

       --mmssttaacckk--gguuaarrdd==_s_t_a_c_k_-_g_u_a_r_d
       --mmssttaacckk--ssiizzee==_s_t_a_c_k_-_s_i_z_e
           If these options are provided the s390 back end emits
           additional instructions in the function prologue which
           trigger a trap if the stack size is _s_t_a_c_k_-_g_u_a_r_d bytes
           above the _s_t_a_c_k_-_s_i_z_e (remember that the stack on s390
           grows downward).  If the _s_t_a_c_k_-_g_u_a_r_d option is omitted
           the smallest power of 2 larger than the frame size of
           the compiled function is chosen.  These options are
           intended to be used to help debugging stack overflow
           problems.  The additionally emitted code causes only
           little overhead and hence can also be used in
           production like systems without greater performance
           degradation.  The given values have to be exact powers
           of 2 and _s_t_a_c_k_-_s_i_z_e has to be greater than _s_t_a_c_k_-_g_u_a_r_d
           without exceeding 64k.  In order to be efficient the
           extra code makes the assumption that the stack starts
           at an address aligned to the value given by _s_t_a_c_k_-
           _s_i_z_e.  The _s_t_a_c_k_-_g_u_a_r_d option can only be used in



gcc-4.3.2                   2008-08-27                        241





GCC(1)                         GNU                         GCC(1)


           conjunction with _s_t_a_c_k_-_s_i_z_e.

       _S_c_o_r_e _O_p_t_i_o_n_s

       These options are defined for Score implementations:

       --mmeebb
           Compile code for big endian mode.  This is the
           default.

       --mmeell
           Compile code for little endian mode.

       --mmnnhhwwlloooopp
           Disable generate bcnz instruction.

       --mmuullss
           Enable generate unaligned load and store instruction.

       --mmmmaacc
           Enable the use of multiply-accumulate instructions.
           Disabled by default.

       --mmssccoorree55
           Specify the SCORE5 as the target architecture.

       --mmssccoorree55uu
           Specify the SCORE5U of the target architecture.

       --mmssccoorree77
           Specify the SCORE7 as the target architecture. This is
           the default.

       --mmssccoorree77dd
           Specify the SCORE7D as the target architecture.

       _S_H _O_p_t_i_o_n_s

       These --mm options are defined for the SH implementations:

       --mm11 Generate code for the SH1.

       --mm22 Generate code for the SH2.

       --mm22ee
           Generate code for the SH2e.

       --mm33 Generate code for the SH3.

       --mm33ee
           Generate code for the SH3e.

       --mm44--nnooffppuu
           Generate code for the SH4 without a floating-point



gcc-4.3.2                   2008-08-27                        242





GCC(1)                         GNU                         GCC(1)


           unit.

       --mm44--ssiinnggllee--oonnllyy
           Generate code for the SH4 with a floating-point unit
           that only supports single-precision arithmetic.

       --mm44--ssiinnggllee
           Generate code for the SH4 assuming the floating-point
           unit is in single-precision mode by default.

       --mm44 Generate code for the SH4.

       --mm44aa--nnooffppuu
           Generate code for the SH4al-dsp, or for a SH4a in such
           a way that the floating-point unit is not used.

       --mm44aa--ssiinnggllee--oonnllyy
           Generate code for the SH4a, in such a way that no
           double-precision floating point operations are used.

       --mm44aa--ssiinnggllee
           Generate code for the SH4a assuming the floating-point
           unit is in single-precision mode by default.

       --mm44aa
           Generate code for the SH4a.

       --mm44aall
           Same as --mm44aa--nnooffppuu, except that it implicitly passes
           --ddsspp to the assembler.  GCC doesn't generate any DSP
           instructions at the moment.

       --mmbb Compile code for the processor in big endian mode.

       --mmll Compile code for the processor in little endian mode.

       --mmddaalliiggnn
           Align doubles at 64-bit boundaries.  Note that this
           changes the calling conventions, and thus some
           functions from the standard C library will not work
           unless you recompile it first with --mmddaalliiggnn.

       --mmrreellaaxx
           Shorten some address references at link time, when
           possible; uses the linker option --rreellaaxx.

       --mmbbiiggttaabbllee
           Use 32-bit offsets in "switch" tables.  The default is
           to use 16-bit offsets.

       --mmffmmoovvdd
           Enable the use of the instruction "fmovd".





gcc-4.3.2                   2008-08-27                        243





GCC(1)                         GNU                         GCC(1)


       --mmhhiittaacchhii
           Comply with the calling conventions defined by
           Renesas.

       --mmrreenneessaass
           Comply with the calling conventions defined by
           Renesas.

       --mmnnoo--rreenneessaass
           Comply with the calling conventions defined for GCC
           before the Renesas conventions were available.  This
           option is the default for all targets of the SH
           toolchain except for sshh--ssyymmbbiiaanneellff.

       --mmnnoommaaccssaavvee
           Mark the "MAC" register as call-clobbered, even if
           --mmhhiittaacchhii is given.

       --mmiieeeeee
           Increase IEEE-compliance of floating-point code.  At
           the moment, this is equivalent to
           --ffnnoo--ffiinniittee--mmaatthh--oonnllyy.  When generating 16 bit SH
           opcodes, getting IEEE-conforming results for
           comparisons of NANs / infinities incurs extra overhead
           in every floating point comparison, therefore the
           default is set to --ffffiinniittee--mmaatthh--oonnllyy.

       --mmiinnlliinnee--iicc__iinnvvaalliiddaattee
           Inline code to invalidate instruction cache entries
           after setting up nested function trampolines.  This
           option has no effect if -musermode is in effect and
           the selected code generation option (e.g. -m4) does
           not allow the use of the icbi instruction.  If the
           selected code generation option does not allow the use
           of the icbi instruction, and -musermode is not in
           effect, the inlined code will manipulate the
           instruction cache address array directly with an
           associative write.  This not only requires privileged
           mode, but it will also fail if the cache line had been
           mapped via the TLB and has become unmapped.

       --mmiissiizzee
           Dump instruction size and location in the assembly
           code.

       --mmppaaddssttrruucctt
           This option is deprecated.  It pads structures to
           multiple of 4 bytes, which is incompatible with the SH
           ABI.

       --mmssppaaccee
           Optimize for space instead of speed.  Implied by --OOss.





gcc-4.3.2                   2008-08-27                        244





GCC(1)                         GNU                         GCC(1)


       --mmpprreeffeerrggoott
           When generating position-independent code, emit
           function calls using the Global Offset Table instead
           of the Procedure Linkage Table.

       --mmuusseerrmmooddee
           Don't generate privileged mode only code; implies
           -mno-inline-ic_invalidate if the inlined code would
           not work in user mode.  This is the default when the
           target is "sh-*-linux*".

       --mmuullttccoosstt==_n_u_m_b_e_r
           Set the cost to assume for a multiply insn.

       --mmddiivv==_s_t_r_a_t_e_g_y
           Set the division strategy to use for SHmedia code.
           _s_t_r_a_t_e_g_y must be one of: call, call2, fp, inv,
           inv:minlat, inv20u, inv20l, inv:call, inv:call2,
           inv:fp .  "fp" performs the operation in floating
           point.  This has a very high latency, but needs only a
           few instructions, so it might be a good choice if your
           code has enough easily exploitable ILP to allow the
           compiler to schedule the floating point instructions
           together with other instructions.  Division by zero
           causes a floating point exception.  "inv" uses integer
           operations to calculate the inverse of the divisor,
           and then multiplies the dividend with the inverse.
           This strategy allows cse and hoisting of the inverse
           calculation.  Division by zero calculates an
           unspecified result, but does not trap.  "inv:minlat"
           is a variant of "inv" where if no cse / hoisting
           opportunities have been found, or if the entire
           operation has been hoisted to the same place, the last
           stages of the inverse calculation are intertwined with
           the final multiply to reduce the overall latency, at
           the expense of using a few more instructions, and thus
           offering fewer scheduling opportunities with other
           code.  "call" calls a library function that usually
           implements the inv:minlat strategy.  This gives high
           code density for m5-*media-nofpu compilations.
           "call2" uses a different entry point of the same
           library function, where it assumes that a pointer to a
           lookup table has already been set up, which exposes
           the pointer load to cse / code hoisting optimizations.
           "inv:call", "inv:call2" and "inv:fp" all use the "inv"
           algorithm for initial code generation, but if the code
           stays unoptimized, revert to the "call", "call2", or
           "fp" strategies, respectively.  Note that the
           potentially-trapping side effect of division by zero
           is carried by a separate instruction, so it is
           possible that all the integer instructions are hoisted
           out, but the marker for the side effect stays where it
           is.  A recombination to fp operations or a call is not
           possible in that case.  "inv20u" and "inv20l" are



gcc-4.3.2                   2008-08-27                        245





GCC(1)                         GNU                         GCC(1)


           variants of the "inv:minlat" strategy.  In the case
           that the inverse calculation was nor separated from
           the multiply, they speed up division where the
           dividend fits into 20 bits (plus sign where
           applicable), by inserting a test to skip a number of
           operations in this case; this test slows down the case
           of larger dividends.  inv20u assumes the case of a
           such a small dividend to be unlikely, and inv20l
           assumes it to be likely.

       --mmddiivvssii33__lliibbffuunncc==_n_a_m_e
           Set the name of the library function used for 32 bit
           signed division to _n_a_m_e.  This only affect the name
           used in the call and inv:call division strategies, and
           the compiler will still expect the same sets of
           input/output/clobbered registers as if this option was
           not present.

       --mmaaddjjuusstt--uunnrroollll
           Throttle unrolling to avoid thrashing target
           registers.  This option only has an effect if the gcc
           code base supports the TARGET_ADJUST_UNROLL_MAX target
           hook.

       --mmiinnddeexxeedd--aaddddrreessssiinngg
           Enable the use of the indexed addressing mode for
           SHmedia32/SHcompact.  This is only safe if the
           hardware and/or OS implement 32 bit wrap-around
           semantics for the indexed addressing mode.  The
           architecture allows the implementation of processors
           with 64 bit MMU, which the OS could use to get 32 bit
           addressing, but since no current hardware
           implementation supports this or any other way to make
           the indexed addressing mode safe to use in the 32 bit
           ABI, the default is -mno-indexed-addressing.

       --mmggeettttrrccoosstt==_n_u_m_b_e_r
           Set the cost assumed for the gettr instruction to
           _n_u_m_b_e_r.  The default is 2 if --mmpptt--ffiixxeedd is in effect,
           100 otherwise.

       --mmpptt--ffiixxeedd
           Assume pt* instructions won't trap.  This will
           generally generate better scheduled code, but is
           unsafe on current hardware.  The current architecture
           definition says that ptabs and ptrel trap when the
           target anded with 3 is 3.  This has the unintentional
           effect of making it unsafe to schedule ptabs / ptrel
           before a branch, or hoist it out of a loop.  For
           example, __do_global_ctors, a part of libgcc that runs
           constructors at program startup, calls functions in a
           list which is delimited by -1.  With the -mpt-fixed
           option, the ptabs will be done before testing against
           -1.  That means that all the constructors will be run



gcc-4.3.2                   2008-08-27                        246





GCC(1)                         GNU                         GCC(1)


           a bit quicker, but when the loop comes to the end of
           the list, the program crashes because ptabs loads -1
           into a target register.  Since this option is unsafe
           for any hardware implementing the current architecture
           specification, the default is -mno-pt-fixed.  Unless
           the user specifies a specific cost with --mmggeettttrrccoosstt,
           -mno-pt-fixed also implies --mmggeettttrrccoosstt==110000; this
           deters register allocation using target registers for
           storing ordinary integers.

       --mmiinnvvaalliidd--ssyymmbboollss
           Assume symbols might be invalid.  Ordinary function
           symbols generated by the compiler will always be valid
           to load with movi/shori/ptabs or movi/shori/ptrel, but
           with assembler and/or linker tricks it is possible to
           generate symbols that will cause ptabs / ptrel to
           trap.  This option is only meaningful when
           --mmnnoo--pptt--ffiixxeedd is in effect.  It will then prevent
           cross-basic-block cse, hoisting and most scheduling of
           symbol loads.  The default is --mmnnoo--iinnvvaalliidd--ssyymmbboollss.

       _S_P_A_R_C _O_p_t_i_o_n_s

       These --mm options are supported on the SPARC:

       --mmnnoo--aapppp--rreeggss
       --mmaapppp--rreeggss
           Specify --mmaapppp--rreeggss to generate output using the global
           registers 2 through 4, which the SPARC SVR4 ABI
           reserves for applications.  This is the default.

           To be fully SVR4 ABI compliant at the cost of some
           performance loss, specify --mmnnoo--aapppp--rreeggss.  You should
           compile libraries and system software with this
           option.

       --mmffppuu
       --mmhhaarrdd--ffllooaatt
           Generate output containing floating point
           instructions.  This is the default.

       --mmnnoo--ffppuu
       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating
           point.  WWaarrnniinngg:: the requisite libraries are not
           available for all SPARC targets.  Normally the
           facilities of the machine's usual C compiler are used,
           but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide
           suitable library functions for cross-compilation.  The
           embedded targets ssppaarrcc--**--aaoouutt and ssppaarrcclliittee--**--** do
           provide software floating point support.

           --mmssoofftt--ffllooaatt changes the calling convention in the



gcc-4.3.2                   2008-08-27                        247





GCC(1)                         GNU                         GCC(1)


           output file; therefore, it is only useful if you
           compile _a_l_l of a program with this option.  In
           particular, you need to compile _l_i_b_g_c_c_._a, the library
           that comes with GCC, with --mmssoofftt--ffllooaatt in order for
           this to work.

       --mmhhaarrdd--qquuaadd--ffllooaatt
           Generate output containing quad-word (long double)
           floating point instructions.

       --mmssoofftt--qquuaadd--ffllooaatt
           Generate output containing library calls for quad-word
           (long double) floating point instructions.  The
           functions called are those specified in the SPARC ABI.
           This is the default.

           As of this writing, there are no SPARC implementations
           that have hardware support for the quad-word floating
           point instructions.  They all invoke a trap handler
           for one of these instructions, and then the trap
           handler emulates the effect of the instruction.
           Because of the trap handler overhead, this is much
           slower than calling the ABI library routines.  Thus
           the --mmssoofftt--qquuaadd--ffllooaatt option is the default.

       --mmnnoo--uunnaalliiggnneedd--ddoouubblleess
       --mmuunnaalliiggnneedd--ddoouubblleess
           Assume that doubles have 8 byte alignment.  This is
           the default.

           With --mmuunnaalliiggnneedd--ddoouubblleess, GCC assumes that doubles
           have 8 byte alignment only if they are contained in
           another type, or if they have an absolute address.
           Otherwise, it assumes they have 4 byte alignment.
           Specifying this option avoids some rare compatibility
           problems with code generated by other compilers.  It
           is not the default because it results in a performance
           loss, especially for floating point code.

       --mmnnoo--ffaasstteerr--ssttrruuccttss
       --mmffaasstteerr--ssttrruuccttss
           With --mmffaasstteerr--ssttrruuccttss, the compiler assumes that
           structures should have 8 byte alignment.  This enables
           the use of pairs of "ldd" and "std" instructions for
           copies in structure assignment, in place of twice as
           many "ld" and "st" pairs.  However, the use of this
           changed alignment directly violates the SPARC ABI.
           Thus, it's intended only for use on targets where the
           developer acknowledges that their resulting code will
           not be directly in line with the rules of the ABI.

       --mmiimmppuurree--tteexxtt
           --mmiimmppuurree--tteexxtt, used in addition to --sshhaarreedd, tells the
           compiler to not pass --zz tteexxtt to the linker when



gcc-4.3.2                   2008-08-27                        248





GCC(1)                         GNU                         GCC(1)


           linking a shared object.  Using this option, you can
           link position-dependent code into a shared object.

           --mmiimmppuurree--tteexxtt suppresses the "relocations remain
           against allocatable but non-writable sections" linker
           error message.  However, the necessary relocations
           will trigger copy-on-write, and the shared object is
           not actually shared across processes.  Instead of
           using --mmiimmppuurree--tteexxtt, you should compile all source
           code with --ffppiicc or --ffPPIICC.

           This option is only available on SunOS and Solaris.

       --mmccppuu==_c_p_u___t_y_p_e
           Set the instruction set, register set, and instruction
           scheduling parameters for machine type _c_p_u___t_y_p_e.
           Supported values for _c_p_u___t_y_p_e are vv77, ccyypprreessss, vv88,
           ssuuppeerrssppaarrcc, ssppaarrcclliittee, ff993300, ff993344, hhyyppeerrssppaarrcc,
           ssppaarrcclliittee8866xx, ssppaarrcclleett, ttsscc770011, vv99, uullttrraassppaarrcc,
           uullttrraassppaarrcc33, nniiaaggaarraa and nniiaaggaarraa22.

           Default instruction scheduling parameters are used for
           values that select an architecture and not an
           implementation.  These are vv77, vv88, ssppaarrcclliittee,
           ssppaarrcclleett, vv99.

           Here is a list of each supported architecture and
           their supported implementations.

                       v7:             cypress
                       v8:             supersparc, hypersparc
                       sparclite:      f930, f934, sparclite86x
                       sparclet:       tsc701
                       v9:             ultrasparc, ultrasparc3, niagara, niagara2

           By default (unless configured otherwise), GCC
           generates code for the V7 variant of the SPARC
           architecture.  With --mmccppuu==ccyypprreessss, the compiler
           additionally optimizes it for the Cypress CY7C602
           chip, as used in the SPARCStation/SPARCServer 3xx
           series.  This is also appropriate for the older
           SPARCStation 1, 2, IPX etc.

           With --mmccppuu==vv88, GCC generates code for the V8 variant
           of the SPARC architecture.  The only difference from
           V7 code is that the compiler emits the integer
           multiply and integer divide instructions which exist
           in SPARC-V8 but not in SPARC-V7.  With
           --mmccppuu==ssuuppeerrssppaarrcc, the compiler additionally optimizes
           it for the SuperSPARC chip, as used in the
           SPARCStation 10, 1000 and 2000 series.

           With --mmccppuu==ssppaarrcclliittee, GCC generates code for the
           SPARClite variant of the SPARC architecture.  This



gcc-4.3.2                   2008-08-27                        249





GCC(1)                         GNU                         GCC(1)


           adds the integer multiply, integer divide step and
           scan ("ffs") instructions which exist in SPARClite but
           not in SPARC-V7.  With --mmccppuu==ff993300, the compiler
           additionally optimizes it for the Fujitsu MB86930
           chip, which is the original SPARClite, with no FPU.
           With --mmccppuu==ff993344, the compiler additionally optimizes
           it for the Fujitsu MB86934 chip, which is the more
           recent SPARClite with FPU.

           With --mmccppuu==ssppaarrcclleett, GCC generates code for the
           SPARClet variant of the SPARC architecture.  This adds
           the integer multiply, multiply/accumulate, integer
           divide step and scan ("ffs") instructions which exist
           in SPARClet but not in SPARC-V7.  With --mmccppuu==ttsscc770011,
           the compiler additionally optimizes it for the TEMIC
           SPARClet chip.

           With --mmccppuu==vv99, GCC generates code for the V9 variant
           of the SPARC architecture.  This adds 64-bit integer
           and floating-point move instructions, 3 additional
           floating-point condition code registers and
           conditional move instructions.  With --mmccppuu==uullttrraassppaarrcc,
           the compiler additionally optimizes it for the Sun
           UltraSPARC I/II/IIi chips.  With --mmccppuu==uullttrraassppaarrcc33,
           the compiler additionally optimizes it for the Sun
           UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips.  With
           --mmccppuu==nniiaaggaarraa, the compiler additionally optimizes it
           for Sun UltraSPARC T1 chips.  With --mmccppuu==nniiaaggaarraa22, the
           compiler additionally optimizes it for Sun UltraSPARC
           T2 chips.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine
           type _c_p_u___t_y_p_e, but do not set the instruction set or
           register set that the option --mmccppuu==_c_p_u___t_y_p_e would.

           The same values for --mmccppuu==_c_p_u___t_y_p_e can be used for
           --mmttuunnee==_c_p_u___t_y_p_e, but the only useful values are those
           that select a particular cpu implementation.  Those
           are ccyypprreessss, ssuuppeerrssppaarrcc, hhyyppeerrssppaarrcc, ff993300, ff993344,
           ssppaarrcclliittee8866xx, ttsscc770011, uullttrraassppaarrcc, uullttrraassppaarrcc33,
           nniiaaggaarraa, and nniiaaggaarraa22.

       --mmvv88pplluuss
       --mmnnoo--vv88pplluuss
           With --mmvv88pplluuss, GCC generates code for the SPARC-V8+
           ABI.  The difference from the V8 ABI is that the
           global and out registers are considered 64-bit wide.
           This is enabled by default on Solaris in 32-bit mode
           for all SPARC-V9 processors.

       --mmvviiss
       --mmnnoo--vviiss
           With --mmvviiss, GCC generates code that takes advantage of



gcc-4.3.2                   2008-08-27                        250





GCC(1)                         GNU                         GCC(1)


           the UltraSPARC Visual Instruction Set extensions.  The
           default is --mmnnoo--vviiss.

       These --mm options are supported in addition to the above on
       SPARC-V9 processors in 64-bit environments:

       --mmlliittttllee--eennddiiaann
           Generate code for a processor running in little-endian
           mode.  It is only available for a few configurations
           and most notably not on Solaris and Linux.

       --mm3322
       --mm6644
           Generate code for a 32-bit or 64-bit environment.  The
           32-bit environment sets int, long and pointer to 32
           bits.  The 64-bit environment sets int to 32 bits and
           long and pointer to 64 bits.

       --mmccmmooddeell==mmeeddllooww
           Generate code for the Medium/Low code model: 64-bit
           addresses, programs must be linked in the low 32 bits
           of memory.  Programs can be statically or dynamically
           linked.

       --mmccmmooddeell==mmeeddmmiidd
           Generate code for the Medium/Middle code model: 64-bit
           addresses, programs must be linked in the low 44 bits
           of memory, the text and data segments must be less
           than 2GB in size and the data segment must be located
           within 2GB of the text segment.

       --mmccmmooddeell==mmeeddaannyy
           Generate code for the Medium/Anywhere code model:
           64-bit addresses, programs may be linked anywhere in
           memory, the text and data segments must be less than
           2GB in size and the data segment must be located
           within 2GB of the text segment.

       --mmccmmooddeell==eemmbbmmeeddaannyy
           Generate code for the Medium/Anywhere code model for
           embedded systems: 64-bit addresses, the text and data
           segments must be less than 2GB in size, both starting
           anywhere in memory (determined at link time).  The
           global register %g4 points to the base of the data
           segment.  Programs are statically linked and PIC is
           not supported.

       --mmssttaacckk--bbiiaass
       --mmnnoo--ssttaacckk--bbiiaass
           With --mmssttaacckk--bbiiaass, GCC assumes that the stack pointer,
           and frame pointer if present, are offset by -2047
           which must be added back when making stack frame
           references.  This is the default in 64-bit mode.
           Otherwise, assume no such offset is present.



gcc-4.3.2                   2008-08-27                        251





GCC(1)                         GNU                         GCC(1)


       These switches are supported in addition to the above on
       Solaris:

       --tthhrreeaaddss
           Add support for multithreading using the Solaris
           threads library.  This option sets flags for both the
           preprocessor and linker.  This option does not affect
           the thread safety of object code produced by the
           compiler or that of libraries supplied with it.

       --pptthhrreeaaddss
           Add support for multithreading using the POSIX threads
           library.  This option sets flags for both the
           preprocessor and linker.  This option does not affect
           the thread safety of object code produced  by the
           compiler or that of libraries supplied with it.

       --pptthhrreeaadd
           This is a synonym for --pptthhrreeaaddss.

       _S_P_U _O_p_t_i_o_n_s

       These --mm options are supported on the SPU:

       --mmwwaarrnn--rreelloocc
       --mmeerrrroorr--rreelloocc
           The loader for SPU does not handle dynamic
           relocations.  By default, GCC will give an error when
           it generates code that requires a dynamic relocation.
           --mmnnoo--eerrrroorr--rreelloocc disables the error, --mmwwaarrnn--rreelloocc will
           generate a warning instead.

       --mmssaaffee--ddmmaa
       --mmuunnssaaffee--ddmmaa
           Instructions which initiate or test completion of DMA
           must not be reordered with respect to loads and stores
           of the memory which is being accessed.  Users
           typically address this problem using the volatile
           keyword, but that can lead to inefficient code in
           places where the memory is known to not change.
           Rather than mark the memory as volatile we treat the
           DMA instructions as potentially effecting all memory.
           With --mmuunnssaaffee--ddmmaa users must use the volatile keyword
           to protect memory accesses.

       --mmbbrraanncchh--hhiinnttss
           By default, GCC will generate a branch hint
           instruction to avoid pipeline stalls for always taken
           or probably taken branches.  A hint will not be
           generated closer than 8 instructions away from its
           branch.  There is little reason to disable them,
           except for debugging purposes, or to make an object a
           little bit smaller.




gcc-4.3.2                   2008-08-27                        252





GCC(1)                         GNU                         GCC(1)


       --mmssmmaallll--mmeemm
       --mmllaarrggee--mmeemm
           By default, GCC generates code assuming that addresses
           are never larger than 18 bits.  With --mmllaarrggee--mmeemm code
           is generated that assumes a full 32 bit address.

       --mmssttddmmaaiinn
           By default, GCC links against startup code that
           assumes the SPU-style main function interface (which
           has an unconventional parameter list).  With
           --mmssttddmmaaiinn, GCC will link your program against startup
           code that assumes a C99-style interface to "main",
           including a local copy of "argv" strings.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as
           fixed registers.  A fixed register is one that the
           register allocator can not use.  This is useful when
           compiling kernel code.  A register range is specified
           as two registers separated by a dash.  Multiple
           register ranges can be specified separated by a comma.

       _O_p_t_i_o_n_s _f_o_r _S_y_s_t_e_m _V

       These additional options are available on System V Release
       4 for compatibility with other compilers on those systems:

       --GG  Create a shared object.  It is recommended that
           --ssyymmbboolliicc or --sshhaarreedd be used instead.

       --QQyy Identify the versions of each tool used by the
           compiler, in a ".ident" assembler directive in the
           output.

       --QQnn Refrain from adding ".ident" directives to the output
           file (this is the default).

       --YYPP,,_d_i_r_s
           Search the directories _d_i_r_s, and no others, for
           libraries specified with --ll.

       --YYmm,,_d_i_r
           Look in the directory _d_i_r to find the M4 preprocessor.
           The assembler uses this option.

       _V_8_5_0 _O_p_t_i_o_n_s

       These --mm options are defined for V850 implementations:

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Treat all calls as being far away (near).  If calls
           are assumed to be far away, the compiler will always
           load the functions address up into a register, and



gcc-4.3.2                   2008-08-27                        253





GCC(1)                         GNU                         GCC(1)


           call indirect through the pointer.

       --mmnnoo--eepp
       --mmeepp
           Do not optimize (do optimize) basic blocks that use
           the same index pointer 4 or more times to copy pointer
           into the "ep" register, and use the shorter "sld" and
           "sst" instructions.  The --mmeepp option is on by default
           if you optimize.

       --mmnnoo--pprroolloogg--ffuunnccttiioonn
       --mmpprroolloogg--ffuunnccttiioonn
           Do not use (do use) external functions to save and
           restore registers at the prologue and epilogue of a
           function.  The external functions are slower, but use
           less code space if more than one function saves the
           same number of registers.  The --mmpprroolloogg--ffuunnccttiioonn
           option is on by default if you optimize.

       --mmssppaaccee
           Try to make the code as small as possible.  At
           present, this just turns on the --mmeepp and
           --mmpprroolloogg--ffuunnccttiioonn options.

       --mmttddaa==_n
           Put static or global variables whose size is _n bytes
           or less into the tiny data area that register "ep"
           points to.  The tiny data area can hold up to 256
           bytes in total (128 bytes for byte references).

       --mmssddaa==_n
           Put static or global variables whose size is _n bytes
           or less into the small data area that register "gp"
           points to.  The small data area can hold up to 64
           kilobytes.

       --mmzzddaa==_n
           Put static or global variables whose size is _n bytes
           or less into the first 32 kilobytes of memory.

       --mmvv885500
           Specify that the target processor is the V850.

       --mmbbiigg--sswwiittcchh
           Generate code suitable for big switch tables.  Use
           this option only if the assembler/linker complain
           about out of range branches within a switch table.

       --mmaapppp--rreeggss
           This option will cause r2 and r5 to be used in the
           code generated by the compiler.  This setting is the
           default.





gcc-4.3.2                   2008-08-27                        254





GCC(1)                         GNU                         GCC(1)


       --mmnnoo--aapppp--rreeggss
           This option will cause r2 and r5 to be treated as
           fixed registers.

       --mmvv885500ee11
           Specify that the target processor is the V850E1.  The
           preprocessor constants ____vv885500ee11____ and ____vv885500ee____ will
           be defined if this option is used.

       --mmvv885500ee
           Specify that the target processor is the V850E.  The
           preprocessor constant ____vv885500ee____ will be defined if
           this option is used.

           If neither --mmvv885500 nor --mmvv885500ee nor --mmvv885500ee11 are defined
           then a default target processor will be chosen and the
           relevant ____vv885500**____ preprocessor constant will be
           defined.

           The preprocessor constants ____vv885500 and ____vv885511____ are
           always defined, regardless of which processor variant
           is the target.

       --mmddiissaabbllee--ccaalllltt
           This option will suppress generation of the CALLT
           instruction for the v850e and v850e1 flavors of the
           v850 architecture.  The default is --mmnnoo--ddiissaabbllee--ccaalllltt
           which allows the CALLT instruction to be used.

       _V_A_X _O_p_t_i_o_n_s

       These --mm options are defined for the VAX:

       --mmuunniixx
           Do not output certain jump instructions ("aobleq" and
           so on) that the Unix assembler for the VAX cannot
           handle across long ranges.

       --mmggnnuu
           Do output those jump instructions, on the assumption
           that you will assemble with the GNU assembler.

       --mmgg Output code for g-format floating point numbers
           instead of d-format.

       _V_x_W_o_r_k_s _O_p_t_i_o_n_s

       The options in this section are defined for all VxWorks
       targets.  Options specific to the target hardware are
       listed with the other options for that target.

       --mmrrttpp
           GCC can generate code for both VxWorks kernels and
           real time processes (RTPs).  This option switches from



gcc-4.3.2                   2008-08-27                        255





GCC(1)                         GNU                         GCC(1)


           the former to the latter.  It also defines the
           preprocessor macro "__RTP__".

       --nnoonn--ssttaattiicc
           Link an RTP executable against shared libraries rather
           than static libraries.  The options --ssttaattiicc and
           --sshhaarreedd can also be used for RTPs; --ssttaattiicc is the
           default.

       --BBssttaattiicc
       --BBddyynnaammiicc
           These options are passed down to the linker.  They are
           defined for compatibility with Diab.

       --XXbbiinndd--llaazzyy
           Enable lazy binding of function calls.  This option is
           equivalent to --WWll,,--zz,,nnooww and is defined for
           compatibility with Diab.

       --XXbbiinndd--nnooww
           Disable lazy binding of function calls.  This option
           is the default and is defined for compatibility with
           Diab.

       _x_8_6_-_6_4 _O_p_t_i_o_n_s

       These are listed under

       _X_s_t_o_r_m_y_1_6 _O_p_t_i_o_n_s

       These options are defined for Xstormy16:

       --mmssiimm
           Choose startup files and linker script suitable for
           the simulator.

       _X_t_e_n_s_a _O_p_t_i_o_n_s

       These options are supported for Xtensa targets:

       --mmccoonnsstt1166
       --mmnnoo--ccoonnsstt1166
           Enable or disable use of "CONST16" instructions for
           loading constant values.  The "CONST16" instruction is
           currently not a standard option from Tensilica.  When
           enabled, "CONST16" instructions are always used in
           place of the standard "L32R" instructions.  The use of
           "CONST16" is enabled by default only if the "L32R"
           instruction is not available.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Enable or disable use of fused multiply/add and
           multiply/subtract instructions in the floating-point



gcc-4.3.2                   2008-08-27                        256





GCC(1)                         GNU                         GCC(1)


           option.  This has no effect if the floating-point
           option is not also enabled.  Disabling fused
           multiply/add and multiply/subtract instructions forces
           the compiler to use separate instructions for the
           multiply and add/subtract operations.  This may be
           desirable in some cases where strict IEEE
           754-compliant results are required: the fused multiply
           add/subtract instructions do not round the
           intermediate result, thereby producing results with
           _m_o_r_e bits of precision than specified by the IEEE
           standard.  Disabling fused multiply add/subtract
           instructions also ensures that the program output is
           not sensitive to the compiler's ability to combine
           multiply and add/subtract operations.

       --mmtteexxtt--sseeccttiioonn--lliitteerraallss
       --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss
           Control the treatment of literal pools.  The default
           is --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss, which places literals
           in a separate section in the output file.  This allows
           the literal pool to be placed in a data RAM/ROM, and
           it also allows the linker to combine literal pools
           from separate object files to remove redundant
           literals and improve code size.  With
           --mmtteexxtt--sseeccttiioonn--lliitteerraallss, the literals are interspersed
           in the text section in order to keep them as close as
           possible to their references.  This may be necessary
           for large assembly files.

       --mmttaarrggeett--aalliiggnn
       --mmnnoo--ttaarrggeett--aalliiggnn
           When this option is enabled, GCC instructs the
           assembler to automatically align instructions to
           reduce branch penalties at the expense of some code
           density.  The assembler attempts to widen density
           instructions to align branch targets and the
           instructions following call instructions.  If there
           are not enough preceding safe density instructions to
           align a target, no widening will be performed.  The
           default is --mmttaarrggeett--aalliiggnn.  These options do not
           affect the treatment of auto-aligned instructions like
           "LOOP", which the assembler will always align, either
           by widening density instructions or by inserting no-op
           instructions.

       --mmlloonnggccaallllss
       --mmnnoo--lloonnggccaallllss
           When this option is enabled, GCC instructs the
           assembler to translate direct calls to indirect calls
           unless it can determine that the target of a direct
           call is in the range allowed by the call instruction.
           This translation typically occurs for calls to
           functions in other source files.  Specifically, the
           assembler translates a direct "CALL" instruction into



gcc-4.3.2                   2008-08-27                        257





GCC(1)                         GNU                         GCC(1)


           an "L32R" followed by a "CALLX" instruction.  The
           default is --mmnnoo--lloonnggccaallllss.  This option should be used
           in programs where the call target can potentially be
           out of range.  This option is implemented in the
           assembler, not the compiler, so the assembly code
           generated by GCC will still show direct call
           instructions---look at the disassembled object code to
           see the actual instructions.  Note that the assembler
           will use an indirect call for every cross-file call,
           not just those that really will be out of range.

       _z_S_e_r_i_e_s _O_p_t_i_o_n_s

       These are listed under

       OOppttiioonnss ffoorr CCooddee GGeenneerraattiioonn CCoonnvveennttiioonnss

       These machine-independent options control the interface
       conventions used in code generation.

       Most of them have both positive and negative forms; the
       negative form of --ffffoooo would be --ffnnoo--ffoooo.  In the table
       below, only one of the forms is listed---the one which is
       not the default.  You can figure out the other form by
       either removing nnoo-- or adding it.

       --ffbboouunnddss--cchheecckk
           For front-ends that support it, generate additional
           code to check that indices used to access arrays are
           within the declared range.  This is currently only
           supported by the Java and Fortran front-ends, where
           this option defaults to true and false respectively.

       --ffttrraappvv
           This option generates traps for signed overflow on
           addition, subtraction, multiplication operations.

       --ffwwrraappvv
           This option instructs the compiler to assume that
           signed arithmetic overflow of addition, subtraction
           and multiplication wraps around using twos-complement
           representation.  This flag enables some optimizations
           and disables others.  This option is enabled by
           default for the Java front-end, as required by the
           Java language specification.

       --ffeexxcceeppttiioonnss
           Enable exception handling.  Generates extra code
           needed to propagate exceptions.  For some targets,
           this implies GCC will generate frame unwind
           information for all functions, which can produce
           significant data size overhead, although it does not
           affect execution.  If you do not specify this option,
           GCC will enable it by default for languages like C++



gcc-4.3.2                   2008-08-27                        258





GCC(1)                         GNU                         GCC(1)


           which normally require exception handling, and disable
           it for languages like C that do not normally require
           it.  However, you may need to enable this option when
           compiling C code that needs to interoperate properly
           with exception handlers written in C++.  You may also
           wish to disable this option if you are compiling older
           C++ programs that don't use exception handling.

       --ffnnoonn--ccaallll--eexxcceeppttiioonnss
           Generate code that allows trapping instructions to
           throw exceptions.  Note that this requires platform-
           specific runtime support that does not exist
           everywhere.  Moreover, it only allows _t_r_a_p_p_i_n_g
           instructions to throw exceptions, i.e. memory
           references or floating point instructions.  It does
           not allow exceptions to be thrown from arbitrary
           signal handlers such as "SIGALRM".

       --ffuunnwwiinndd--ttaabblleess
           Similar to --ffeexxcceeppttiioonnss, except that it will just
           generate any needed static data, but will not affect
           the generated code in any other way.  You will
           normally not enable this option; instead, a language
           processor that needs this handling would enable it on
           your behalf.

       --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess
           Generate unwind table in dwarf2 format, if supported
           by target machine.  The table is exact at each
           instruction boundary, so it can be used for stack
           unwinding from asynchronous events (such as debugger
           or garbage collector).

       --ffppcccc--ssttrruucctt--rreettuurrnn
           Return "short" "struct" and "union" values in memory
           like longer ones, rather than in registers.  This
           convention is less efficient, but it has the advantage
           of allowing intercallability between GCC-compiled
           files and files compiled with other compilers,
           particularly the Portable C Compiler (pcc).

           The precise convention for returning structures in
           memory depends on the target configuration macros.

           Short structures and unions are those whose size and
           alignment match that of some integer type.

           WWaarrnniinngg:: code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn
           switch is not binary compatible with code compiled
           with the --ffrreegg--ssttrruucctt--rreettuurrnn switch.  Use it to
           conform to a non-default application binary interface.

       --ffrreegg--ssttrruucctt--rreettuurrnn
           Return "struct" and "union" values in registers when



gcc-4.3.2                   2008-08-27                        259





GCC(1)                         GNU                         GCC(1)


           possible.  This is more efficient for small structures
           than --ffppcccc--ssttrruucctt--rreettuurrnn.

           If you specify neither --ffppcccc--ssttrruucctt--rreettuurrnn nor
           --ffrreegg--ssttrruucctt--rreettuurrnn, GCC defaults to whichever
           convention is standard for the target.  If there is no
           standard convention, GCC defaults to
           --ffppcccc--ssttrruucctt--rreettuurrnn, except on targets where GCC is
           the principal compiler.  In those cases, we can choose
           the standard, and we chose the more efficient register
           return alternative.

           WWaarrnniinngg:: code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn
           switch is not binary compatible with code compiled
           with the --ffppcccc--ssttrruucctt--rreettuurrnn switch.  Use it to
           conform to a non-default application binary interface.

       --ffsshhoorrtt--eennuummss
           Allocate to an "enum" type only as many bytes as it
           needs for the declared range of possible values.
           Specifically, the "enum" type will be equivalent to
           the smallest integer type which has enough room.

           WWaarrnniinngg:: the --ffsshhoorrtt--eennuummss switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.

       --ffsshhoorrtt--ddoouubbllee
           Use the same size for "double" as for "float".

           WWaarrnniinngg:: the --ffsshhoorrtt--ddoouubbllee switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.

       --ffsshhoorrtt--wwcchhaarr
           Override the underlying type for wwcchhaarr__tt to be sshhoorrtt
           uunnssiiggnneedd iinntt instead of the default for the target.
           This option is useful for building programs to run
           under WINE.

           WWaarrnniinngg:: the --ffsshhoorrtt--wwcchhaarr switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.

       --ffnnoo--ccoommmmoonn
           In C, allocate even uninitialized global variables in
           the data section of the object file, rather than
           generating them as common blocks.  This has the effect
           that if the same variable is declared (without
           "extern") in two different compilations, you will get
           an error when you link them.  The only reason this



gcc-4.3.2                   2008-08-27                        260





GCC(1)                         GNU                         GCC(1)


           might be useful is if you wish to verify that the
           program will work on other systems which always work
           this way.

       --ffnnoo--iiddeenntt
           Ignore the ##iiddeenntt directive.

       --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee
           Don't output a ".size" assembler directive, or
           anything else that would cause trouble if the function
           is split in the middle, and the two halves are placed
           at locations far apart in memory.  This option is used
           when compiling _c_r_t_s_t_u_f_f_._c; you should not need to use
           it for anything else.

       --ffvveerrbboossee--aassmm
           Put extra commentary information in the generated
           assembly code to make it more readable.  This option
           is generally only of use to those who actually need to
           read the generated assembly code (perhaps while
           debugging the compiler itself).

           --ffnnoo--vveerrbboossee--aassmm, the default, causes the extra
           information to be omitted and is useful when comparing
           two assembler files.

       --ffrreeccoorrdd--ggcccc--sswwiittcchheess
           This switch causes the command line that was used to
           invoke the compiler to be recorded into the object
           file that is being created.  This switch is only
           implemented on some targets and the exact format of
           the recording is target and binary file format
           dependent, but it usually takes the form of a section
           containing ASCII text.  This switch is related to the
           --ffvveerrbboossee--aassmm switch, but that switch only records
           information in the assembler output file as comments,
           so it never reaches the object file.

       --ffppiicc
           Generate position-independent code (PIC) suitable for
           use in a shared library, if supported for the target
           machine.  Such code accesses all constant addresses
           through a global offset table (GOT).  The dynamic
           loader resolves the GOT entries when the program
           starts (the dynamic loader is not part of GCC; it is
           part of the operating system).  If the GOT size for
           the linked executable exceeds a machine-specific
           maximum size, you get an error message from the linker
           indicating that --ffppiicc does not work; in that case,
           recompile with --ffPPIICC instead.  (These maximums are 8k
           on the SPARC and 32k on the m68k and RS/6000.  The 386
           has no such limit.)

           Position-independent code requires special support,



gcc-4.3.2                   2008-08-27                        261





GCC(1)                         GNU                         GCC(1)


           and therefore works only on certain machines.  For the
           386, GCC supports PIC for System V but not for the Sun
           386i.  Code generated for the IBM RS/6000 is always
           position-independent.

           When this flag is set, the macros "__pic__" and
           "__PIC__" are defined to 1.

       --ffPPIICC
           If supported for the target machine, emit position-
           independent code, suitable for dynamic linking and
           avoiding any limit on the size of the global offset
           table.  This option makes a difference on the m68k,
           PowerPC and SPARC.

           Position-independent code requires special support,
           and therefore works only on certain machines.

           When this flag is set, the macros "__pic__" and
           "__PIC__" are defined to 2.

       --ffppiiee
       --ffPPIIEE
           These options are similar to --ffppiicc and --ffPPIICC, but
           generated position independent code can be only linked
           into executables.  Usually these options are used when
           --ppiiee GCC option will be used during linking.

           --ffppiiee and --ffPPIIEE both define the macros "__pie__" and
           "__PIE__".  The macros have the value 1 for --ffppiiee and
           2 for --ffPPIIEE.

       --ffnnoo--jjuummpp--ttaabblleess
           Do not use jump tables for switch statements even
           where it would be more efficient than other code
           generation strategies.  This option is of use in
           conjunction with --ffppiicc or --ffPPIICC for building code
           which forms part of a dynamic linker and cannot
           reference the address of a jump table.  On some
           targets, jump tables do not require a GOT and this
           option is not needed.

       --ffffiixxeedd--_r_e_g
           Treat the register named _r_e_g as a fixed register;
           generated code should never refer to it (except
           perhaps as a stack pointer, frame pointer or in some
           other fixed role).

           _r_e_g must be the name of a register.  The register
           names accepted are machine-specific and are defined in
           the "REGISTER_NAMES" macro in the machine description
           macro file.

           This flag does not have a negative form, because it



gcc-4.3.2                   2008-08-27                        262





GCC(1)                         GNU                         GCC(1)


           specifies a three-way choice.

       --ffccaallll--uusseedd--_r_e_g
           Treat the register named _r_e_g as an allocable register
           that is clobbered by function calls.  It may be
           allocated for temporaries or variables that do not
           live across a call.  Functions compiled this way will
           not save and restore the register _r_e_g.

           It is an error to used this flag with the frame
           pointer or stack pointer.  Use of this flag for other
           registers that have fixed pervasive roles in the
           machine's execution model will produce disastrous
           results.

           This flag does not have a negative form, because it
           specifies a three-way choice.

       --ffccaallll--ssaavveedd--_r_e_g
           Treat the register named _r_e_g as an allocable register
           saved by functions.  It may be allocated even for
           temporaries or variables that live across a call.
           Functions compiled this way will save and restore the
           register _r_e_g if they use it.

           It is an error to used this flag with the frame
           pointer or stack pointer.  Use of this flag for other
           registers that have fixed pervasive roles in the
           machine's execution model will produce disastrous
           results.

           A different sort of disaster will result from the use
           of this flag for a register in which function values
           may be returned.

           This flag does not have a negative form, because it
           specifies a three-way choice.

       --ffppaacckk--ssttrruucctt[[==_n]]
           Without a value specified, pack all structure members
           together without holes.  When a value is specified
           (which must be a small power of two), pack structure
           members according to this value, representing the
           maximum alignment (that is, objects with default
           alignment requirements larger than this will be output
           potentially unaligned at the next fitting location.

           WWaarrnniinngg:: the --ffppaacckk--ssttrruucctt switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Additionally, it makes
           the code suboptimal.  Use it to conform to a non-
           default application binary interface.





gcc-4.3.2                   2008-08-27                        263





GCC(1)                         GNU                         GCC(1)


       --ffiinnssttrruummeenntt--ffuunnccttiioonnss
           Generate instrumentation calls for entry and exit to
           functions.  Just after function entry and just before
           function exit, the following profiling functions will
           be called with the address of the current function and
           its call site.  (On some platforms,
           "__builtin_return_address" does not work beyond the
           current function, so the call site information may not
           be available to the profiling functions otherwise.)

                   void __cyg_profile_func_enter (void *this_fn,
                                                  void *call_site);
                   void __cyg_profile_func_exit  (void *this_fn,
                                                  void *call_site);

           The first argument is the address of the start of the
           current function, which may be looked up exactly in
           the symbol table.

           This instrumentation is also done for functions
           expanded inline in other functions.  The profiling
           calls will indicate where, conceptually, the inline
           function is entered and exited.  This means that
           addressable versions of such functions must be
           available.  If all your uses of a function are
           expanded inline, this may mean an additional expansion
           of code size.  If you use eexxtteerrnn iinnlliinnee in your C
           code, an addressable version of such functions must be
           provided.  (This is normally the case anyways, but if
           you get lucky and the optimizer always expands the
           functions inline, you might have gotten away without
           providing static copies.)

           A function may be given the attribute
           "no_instrument_function", in which case this
           instrumentation will not be done.  This can be used,
           for example, for the profiling functions listed above,
           high-priority interrupt routines, and any functions
           from which the profiling functions cannot safely be
           called (perhaps signal handlers, if the profiling
           routines generate output or allocate memory).

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffiillee--lliisstt==_f_i_l_e,,_f_i_l_e,,......
           Set the list of functions that are excluded from
           instrumentation (see the description of
           "-finstrument-functions").  If the file that contains
           a function definition matches with one of _f_i_l_e, then
           that function is not instrumented.  The match is done
           on substrings: if the _f_i_l_e parameter is a substring of
           the file name, it is considered to be a match.

           For example,
           "-finstrument-functions-exclude-file-list=/bits/stl,include/sys"
           will exclude any inline function defined in files



gcc-4.3.2                   2008-08-27                        264





GCC(1)                         GNU                         GCC(1)


           whose pathnames contain "/bits/stl" or "include/sys".

           If, for some reason, you want to include letter ',' in
           one of _s_y_m, write ','. For example,
           "-finstrument-functions-exclude-file-list=',,tmp'"
           (note the single quote surrounding the option).

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffuunnccttiioonn--lliisstt==_s_y_m,,_s_y_m,,......
           This is similar to
           "-finstrument-functions-exclude-file-list", but this
           option sets the list of function names to be excluded
           from instrumentation.  The function name to be matched
           is its user-visible name, such as "vector<int>
           blah(const vector<int> &)", not the internal mangled
           name (e.g., "_Z4blahRSt6vectorIiSaIiEE").  The match
           is done on substrings: if the _s_y_m parameter is a
           substring of the function name, it is considered to be
           a match.

       --ffssttaacckk--cchheecckk
           Generate code to verify that you do not go beyond the
           boundary of the stack.  You should specify this flag
           if you are running in an environment with multiple
           threads, but only rarely need to specify it in a
           single-threaded environment since stack overflow is
           automatically detected on nearly all systems if there
           is only one stack.

           Note that this switch does not actually cause checking
           to be done; the operating system must do that.  The
           switch causes generation of code to ensure that the
           operating system sees the stack being extended.

       --ffssttaacckk--lliimmiitt--rreeggiisstteerr==_r_e_g
       --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m
       --ffnnoo--ssttaacckk--lliimmiitt
           Generate code to ensure that the stack does not grow
           beyond a certain value, either the value of a register
           or the address of a symbol.  If the stack would grow
           beyond the value, a signal is raised.  For most
           targets, the signal is raised before the stack
           overruns the boundary, so it is possible to catch the
           signal without taking special precautions.

           For instance, if the stack starts at absolute address
           00xx8800000000000000 and grows downwards, you can use the flags
           --ffssttaacckk--lliimmiitt--ssyymmbbooll==____ssttaacckk__lliimmiitt and
           --WWll,,----ddeeffssyymm,,____ssttaacckk__lliimmiitt==00xx77ffffee00000000 to enforce a
           stack limit of 128KB.  Note that this may only work
           with the GNU linker.

       --ffaarrgguummeenntt--aalliiaass
       --ffaarrgguummeenntt--nnooaalliiaass




gcc-4.3.2                   2008-08-27                        265





GCC(1)                         GNU                         GCC(1)


       --ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall
       --ffaarrgguummeenntt--nnooaalliiaass--aannyytthhiinngg
           Specify the possible relationships among parameters
           and between parameters and global data.

           --ffaarrgguummeenntt--aalliiaass specifies that arguments (parameters)
           may alias each other and may alias global
           storage.--ffaarrgguummeenntt--nnooaalliiaass specifies that arguments do
           not alias each other, but may alias global
           storage.--ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall specifies that
           arguments do not alias each other and do not alias
           global storage.  --ffaarrgguummeenntt--nnooaalliiaass--aannyytthhiinngg specifies
           that arguments do not alias any other storage.

           Each language will automatically use whatever option
           is required by the language standard.  You should not
           need to use these options yourself.

       --fflleeaaddiinngg--uunnddeerrssccoorree
           This option and its counterpart,
           --ffnnoo--lleeaaddiinngg--uunnddeerrssccoorree, forcibly change the way C
           symbols are represented in the object file.  One use
           is to help link with legacy assembly code.

           WWaarrnniinngg:: the --fflleeaaddiinngg--uunnddeerrssccoorree switch causes GCC to
           generate code that is not binary compatible with code
           generated without that switch.  Use it to conform to a
           non-default application binary interface.  Not all
           targets provide complete support for this switch.

       --ffttllss--mmooddeell==_m_o_d_e_l
           Alter the thread-local storage model to be used.  The
           _m_o_d_e_l argument should be one of "global-dynamic",
           "local-dynamic", "initial-exec" or "local-exec".

           The default without --ffppiicc is "initial-exec"; with
           --ffppiicc the default is "global-dynamic".

       --ffvviissiibbiilliittyy==_d_e_f_a_u_l_t_|_i_n_t_e_r_n_a_l_|_h_i_d_d_e_n_|_p_r_o_t_e_c_t_e_d
           Set the default ELF image symbol visibility to the
           specified option---all symbols will be marked with
           this unless overridden within the code.  Using this
           feature can very substantially improve linking and
           load times of shared object libraries, produce more
           optimized code, provide near-perfect API export and
           prevent symbol clashes.  It is ssttrroonnggllyy recommended
           that you use this in any shared objects you
           distribute.

           Despite the nomenclature, "default" always means
           public ie; available to be linked against from outside
           the shared object.  "protected" and "internal" are
           pretty useless in real-world usage so the only other
           commonly used option will be "hidden".  The default if



gcc-4.3.2                   2008-08-27                        266





GCC(1)                         GNU                         GCC(1)


           --ffvviissiibbiilliittyy isn't specified is "default", i.e., make
           every symbol public---this causes the same behavior as
           previous versions of GCC.

           A good explanation of the benefits offered by ensuring
           ELF symbols have the correct visibility is given by
           "How To Write Shared Libraries" by Ulrich Drepper
           (which can be found at
           <hhttttpp::////ppeeooppllee..rreeddhhaatt..ccoomm//~~ddrreeppppeerr//>)---however a
           superior solution made possible by this option to
           marking things hidden when the default is public is to
           make the default hidden and mark things public.  This
           is the norm with DLL's on Windows and with
           --ffvviissiibbiilliittyy==hhiiddddeenn and "__attribute__
           ((visibility("default")))" instead of
           "__declspec(dllexport)" you get almost identical
           semantics with identical syntax.  This is a great boon
           to those working with cross-platform projects.

           For those adding visibility support to existing code,
           you may find ##pprraaggmmaa GGCCCC vviissiibbiilliittyy of use.  This
           works by you enclosing the declarations you wish to
           set visibility for with (for example) ##pprraaggmmaa GGCCCC
           vviissiibbiilliittyy ppuusshh((hhiiddddeenn)) and ##pprraaggmmaa GGCCCC vviissiibbiilliittyy
           ppoopp.  Bear in mind that symbol visibility should be
           viewed aass ppaarrtt ooff tthhee AAPPII iinntteerrffaaccee ccoonnttrraacctt and thus
           all new code should always specify visibility when it
           is not the default ie; declarations only for use
           within the local DSO should aallwwaayyss be marked
           explicitly as hidden as so to avoid PLT indirection
           overheads---making this abundantly clear also aids
           readability and self-documentation of the code.  Note
           that due to ISO C++ specification requirements,
           operator new and operator delete must always be of
           default visibility.

           Be aware that headers from outside your project, in
           particular system headers and headers from any other
           library you use, may not be expecting to be compiled
           with visibility other than the default.  You may need
           to explicitly say ##pprraaggmmaa GGCCCC vviissiibbiilliittyy ppuusshh((ddeeffaauulltt))
           before including any such headers.

           eexxtteerrnn declarations are not affected by --ffvviissiibbiilliittyy,
           so a lot of code can be recompiled with
           --ffvviissiibbiilliittyy==hhiiddddeenn with no modifications.  However,
           this means that calls to eexxtteerrnn functions with no
           explicit visibility will use the PLT, so it is more
           effective to use ____aattttrriibbuuttee ((((vviissiibbiilliittyy)))) and/or
           ##pprraaggmmaa GGCCCC vviissiibbiilliittyy to tell the compiler which
           eexxtteerrnn declarations should be treated as hidden.

           Note that --ffvviissiibbiilliittyy does affect C++ vague linkage
           entities. This means that, for instance, an exception



gcc-4.3.2                   2008-08-27                        267





GCC(1)                         GNU                         GCC(1)


           class that will be thrown between DSOs must be
           explicitly marked with default visibility so that the
           ttyyppee__iinnffoo nodes will be unified between the DSOs.

           An overview of these techniques, their benefits and
           how to use them is at
           <hhttttpp::////ggcccc..ggnnuu..oorrgg//wwiikkii//VViissiibbiilliittyy>.

EENNVVIIRROONNMMEENNTT
       This section describes several environment variables that
       affect how GCC operates.  Some of them work by specifying
       directories or prefixes to use when searching for various
       kinds of files.  Some are used to specify other aspects of
       the compilation environment.

       Note that you can also specify places to search using
       options such as --BB, --II and --LL.  These take precedence over
       places specified using environment variables, which in
       turn take precedence over those specified by the
       configuration of GCC.

       LLAANNGG
       LLCC__CCTTYYPPEE
       LLCC__MMEESSSSAAGGEESS
       LLCC__AALLLL
           These environment variables control the way that GCC
           uses localization information that allow GCC to work
           with different national conventions.  GCC inspects the
           locale categories LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS if it has
           been configured to do so.  These locale categories can
           be set to any value supported by your installation.  A
           typical value is eenn__GGBB..UUTTFF--88 for English in the United
           Kingdom encoded in UTF-8.

           The LLCC__CCTTYYPPEE environment variable specifies character
           classification.  GCC uses it to determine the
           character boundaries in a string; this is needed for
           some multibyte encodings that contain quote and escape
           characters that would otherwise be interpreted as a
           string end or escape.

           The LLCC__MMEESSSSAAGGEESS environment variable specifies the
           language to use in diagnostic messages.

           If the LLCC__AALLLL environment variable is set, it
           overrides the value of LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS;
           otherwise, LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS default to the
           value of the LLAANNGG environment variable.  If none of
           these variables are set, GCC defaults to traditional C
           English behavior.

       TTMMPPDDIIRR
           If TTMMPPDDIIRR is set, it specifies the directory to use
           for temporary files.  GCC uses temporary files to hold



gcc-4.3.2                   2008-08-27                        268





GCC(1)                         GNU                         GCC(1)


           the output of one stage of compilation which is to be
           used as input to the next stage: for example, the
           output of the preprocessor, which is the input to the
           compiler proper.

       GGCCCC__EEXXEECC__PPRREEFFIIXX
           If GGCCCC__EEXXEECC__PPRREEFFIIXX is set, it specifies a prefix to
           use in the names of the subprograms executed by the
           compiler.  No slash is added when this prefix is
           combined with the name of a subprogram, but you can
           specify a prefix that ends with a slash if you wish.

           If GGCCCC__EEXXEECC__PPRREEFFIIXX is not set, GCC will attempt to
           figure out an appropriate prefix to use based on the
           pathname it was invoked with.

           If GCC cannot find the subprogram using the specified
           prefix, it tries looking in the usual places for the
           subprogram.

           The default value of GGCCCC__EEXXEECC__PPRREEFFIIXX is
           _p_r_e_f_i_x_/_l_i_b_/_g_c_c_/ where _p_r_e_f_i_x is the prefix to the
           installed compiler. In many cases _p_r_e_f_i_x is the value
           of "prefix" when you ran the _c_o_n_f_i_g_u_r_e script.

           Other prefixes specified with --BB take precedence over
           this prefix.

           This prefix is also used for finding files such as
           _c_r_t_0_._o that are used for linking.

           In addition, the prefix is used in an unusual way in
           finding the directories to search for header files.
           For each of the standard directories whose name
           normally begins with //uussrr//llooccaall//lliibb//ggcccc (more
           precisely, with the value of GGCCCC__IINNCCLLUUDDEE__DDIIRR), GCC
           tries replacing that beginning with the specified
           prefix to produce an alternate directory name.  Thus,
           with --BBffoooo//, GCC will search _f_o_o_/_b_a_r where it would
           normally search _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_b_a_r.  These alternate
           directories are searched first; the standard
           directories come next. If a standard directory begins
           with the configured _p_r_e_f_i_x then the value of _p_r_e_f_i_x is
           replaced by GGCCCC__EEXXEECC__PPRREEFFIIXX when looking for header
           files.

       CCOOMMPPIILLEERR__PPAATTHH
           The value of CCOOMMPPIILLEERR__PPAATTHH is a colon-separated list
           of directories, much like PPAATTHH.  GCC tries the
           directories thus specified when searching for
           subprograms, if it can't find the subprograms using
           GGCCCC__EEXXEECC__PPRREEFFIIXX.





gcc-4.3.2                   2008-08-27                        269





GCC(1)                         GNU                         GCC(1)


       LLIIBBRRAARRYY__PPAATTHH
           The value of LLIIBBRRAARRYY__PPAATTHH is a colon-separated list of
           directories, much like PPAATTHH.  When configured as a
           native compiler, GCC tries the directories thus
           specified when searching for special linker files, if
           it can't find them using GGCCCC__EEXXEECC__PPRREEFFIIXX.  Linking
           using GCC also uses these directories when searching
           for ordinary libraries for the --ll option (but
           directories specified with --LL come first).

       LLAANNGG
           This variable is used to pass locale information to
           the compiler.  One way in which this information is
           used is to determine the character set to be used when
           character literals, string literals and comments are
           parsed in C and C++.  When the compiler is configured
           to allow multibyte characters, the following values
           for LLAANNGG are recognized:

           CC--JJIISS
               Recognize JIS characters.

           CC--SSJJIISS
               Recognize SJIS characters.

           CC--EEUUCCJJPP
               Recognize EUCJP characters.

           If LLAANNGG is not defined, or if it has some other value,
           then the compiler will use mblen and mbtowc as defined
           by the default locale to recognize and translate
           multibyte characters.

       Some additional environments variables affect the behavior
       of the preprocessor.

       CCPPAATTHH
       CC__IINNCCLLUUDDEE__PPAATTHH
       CCPPLLUUSS__IINNCCLLUUDDEE__PPAATTHH
       OOBBJJCC__IINNCCLLUUDDEE__PPAATTHH
           Each variable's value is a list of directories
           separated by a special character, much like PPAATTHH, in
           which to look for header files.  The special
           character, "PATH_SEPARATOR", is target-dependent and
           determined at GCC build time.  For Microsoft Windows-
           based targets it is a semicolon, and for almost all
           other targets it is a colon.

           CCPPAATTHH specifies a list of directories to be searched
           as if specified with --II, but after any paths given
           with --II options on the command line.  This environment
           variable is used regardless of which language is being
           preprocessed.




gcc-4.3.2                   2008-08-27                        270





GCC(1)                         GNU                         GCC(1)


           The remaining environment variables apply only when
           preprocessing the particular language indicated.  Each
           specifies a list of directories to be searched as if
           specified with --iissyysstteemm, but after any paths given
           with --iissyysstteemm options on the command line.

           In all these variables, an empty element instructs the
           compiler to search its current working directory.
           Empty elements can appear at the beginning or end of a
           path.  For instance, if the value of CCPPAATTHH is
           ":/special/include", that has the same effect as
           --II.. --II//ssppeecciiaall//iinncclluuddee.

       DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT
           If this variable is set, its value specifies how to
           output dependencies for Make based on the non-system
           header files processed by the compiler.  System header
           files are ignored in the dependency output.

           The value of DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT can be just a file
           name, in which case the Make rules are written to that
           file, guessing the target name from the source file
           name.  Or the value can have the form _f_i_l_e _t_a_r_g_e_t, in
           which case the rules are written to file _f_i_l_e using
           _t_a_r_g_e_t as the target name.

           In other words, this environment variable is
           equivalent to combining the options --MMMM and --MMFF, with
           an optional --MMTT switch too.

       SSUUNNPPRROO__DDEEPPEENNDDEENNCCIIEESS
           This variable is the same as DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT (see
           above), except that system header files are not
           ignored, so it implies --MM rather than --MMMM.  However,
           the dependence on the main input file is omitted.

BBUUGGSS
       For instructions on reporting bugs, see
       <hhttttpp::////ggcccc..ggnnuu..oorrgg//bbuuggss..hhttmmll>.

FFOOOOTTNNOOTTEESS
       1.  On some systems, ggcccc --sshhaarreedd needs to build
           supplementary stub code for constructors to work.  On
           multi-libbed systems, ggcccc --sshhaarreedd must select the
           correct support libraries to link against.  Failing to
           supply the correct flags may lead to subtle defects.
           Supplying them in cases where they are not necessary
           is innocuous.

SSEEEE AALLSSOO
       _g_p_l(7), _g_f_d_l(7), _f_s_f_-_f_u_n_d_i_n_g(7), _c_p_p(1), _g_c_o_v(1), _a_s(1),
       _l_d(1), _g_d_b(1), _a_d_b(1), _d_b_x(1), _s_d_b(1) and the Info entries
       for _g_c_c, _c_p_p, _a_s, _l_d, _b_i_n_u_t_i_l_s and _g_d_b.




gcc-4.3.2                   2008-08-27                        271





GCC(1)                         GNU                         GCC(1)


AAUUTTHHOORR
       See the Info entry for ggcccc, or
       <hhttttpp::////ggcccc..ggnnuu..oorrgg//oonnlliinneeddooccss//ggcccc//CCoonnttrriibbuuttoorrss..hhttmmll>, for
       contributors to GCC.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1988, 1989, 1992, 1993, 1994, 1995, 1996,
       1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
       2006, 2007, 2008 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify
       this document under the terms of the GNU Free
       Documentation License, Version 1.2 or any later version
       published by the Free Software Foundation; with the
       Invariant Sections being "GNU General Public License" and
       "Funding Free Software", the Front-Cover texts being (a)
       (see below), and with the Back-Cover Texts being (b) (see
       below).  A copy of the license is included in the _g_f_d_l(7)
       man page.

       (a) The FSF's Front-Cover Text is:

            A GNU Manual

       (b) The FSF's Back-Cover Text is:

            You have freedom to copy and modify this GNU Manual, like GNU
            software.  Copies published by the Free Software Foundation raise
            funds for GNU development.




























gcc-4.3.2                   2008-08-27                        272


