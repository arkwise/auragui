GCOV(1)                               GNU                              GCOV(1)



NNAAMMEE
       gcov - coverage testing tool

SSYYNNOOPPSSIISS
       gcov [--vv|----vveerrssiioonn] [--hh|----hheellpp]
            [--aa|----aallll--bblloocckkss]
            [--bb|----bbrraanncchh--pprroobbaabbiilliittiieess]
            [--cc|----bbrraanncchh--ccoouunnttss]
            [--dd|----ddiissppllaayy--pprrooggrreessss]
            [--ff|----ffuunnccttiioonn--ssuummmmaarriieess]
            [--ii|----jjssoonn--ffoorrmmaatt]
            [--jj|----hhuummaann--rreeaaddaabbllee]
            [--kk|----uussee--ccoolloorrss]
            [--ll|----lloonngg--ffiillee--nnaammeess]
            [--mm|----ddeemmaanngglleedd--nnaammeess]
            [--nn|----nnoo--oouuttppuutt]
            [--oo|----oobbjjeecctt--ddiirreeccttoorryy _d_i_r_e_c_t_o_r_y_|_f_i_l_e]
            [--pp|----pprreesseerrvvee--ppaatthhss]
            [--qq|----uussee--hhoottnneessss--ccoolloorrss]
            [--rr|----rreellaattiivvee--oonnllyy]
            [--ss|----ssoouurrccee--pprreeffiixx _d_i_r_e_c_t_o_r_y]
            [--tt|----ssttddoouutt]
            [--uu|----uunnccoonnddiittiioonnaall--bbrraanncchheess]
            [--xx|----hhaasshh--ffiilleennaammeess]
            _f_i_l_e_s

DDEESSCCRRIIPPTTIIOONN
       ggccoovv is a test coverage program.  Use it in concert with GCC to analyze
       your programs to help create more efficient, faster running code and to
       discover untested parts of your program.  You can use ggccoovv as a
       profiling tool to help discover where your optimization efforts will
       best affect your code.  You can also use ggccoovv along with the other
       profiling tool, ggpprrooff, to assess which parts of your code use the
       greatest amount of computing time.

       Profiling tools help you analyze your code's performance.  Using a
       profiler such as ggccoovv or ggpprrooff, you can find out some basic performance
       statistics, such as:

       *   how often each line of code executes

       *   what lines of code are actually executed

       *   how much computing time each section of code uses

       Once you know these things about how your code works when compiled, you
       can look at each module to see which modules should be optimized.  ggccoovv
       helps you determine where to work on optimization.

       Software developers also use coverage testing in concert with
       testsuites, to make sure software is actually good enough for a
       release.  Testsuites can verify that a program works as expected; a
       coverage program tests to see how much of the program is exercised by
       the testsuite.  Developers can then determine what kinds of test cases
       need to be added to the testsuites to create both better testing and a
       better final product.

       You should compile your code without optimization if you plan to use
       ggccoovv because the optimization, by combining some lines of code into one
       function, may not give you as much information as you need to look for
       `hot spots' where the code is using a great deal of computer time.
       Likewise, because ggccoovv accumulates statistics by line (at the lowest
       resolution), it works best with a programming style that places only
       one statement on each line.  If you use complicated macros that expand
       to loops or to other control structures, the statistics are less
       helpful---they only report on the line where the macro call appears.
       If your complex macros behave like functions, you can replace them with
       inline functions to solve this problem.

       ggccoovv creates a logfile called _s_o_u_r_c_e_f_i_l_e_._g_c_o_v which indicates how many
       times each line of a source file _s_o_u_r_c_e_f_i_l_e_._c has executed.  You can
       use these logfiles along with ggpprrooff to aid in fine-tuning the
       performance of your programs.  ggpprrooff gives timing information you can
       use along with the information you get from ggccoovv.

       ggccoovv works only on code compiled with GCC.  It is not compatible with
       any other profiling or test coverage mechanism.

OOPPTTIIOONNSS
       --aa
       ----aallll--bblloocckkss
           Write individual execution counts for every basic block.  Normally
           gcov outputs execution counts only for the main blocks of a line.
           With this option you can determine if blocks within a single line
           are not being executed.

       --bb
       ----bbrraanncchh--pprroobbaabbiilliittiieess
           Write branch frequencies to the output file, and write branch
           summary info to the standard output.  This option allows you to see
           how often each branch in your program was taken.  Unconditional
           branches will not be shown, unless the --uu option is given.

       --cc
       ----bbrraanncchh--ccoouunnttss
           Write branch frequencies as the number of branches taken, rather
           than the percentage of branches taken.

       --dd
       ----ddiissppllaayy--pprrooggrreessss
           Display the progress on the standard output.

       --ff
       ----ffuunnccttiioonn--ssuummmmaarriieess
           Output summaries for each function in addition to the file level
           summary.

       --hh
       ----hheellpp
           Display help about using ggccoovv (on the standard output), and exit
           without doing any further processing.

       --ii
       ----jjssoonn--ffoorrmmaatt
           Output gcov file in an easy-to-parse JSON intermediate format which
           does not require source code for generation.  The JSON file is
           compressed with gzip compression algorithm and the files have
           _._g_c_o_v_._j_s_o_n_._g_z extension.

           Structure of the JSON is following:

                   {
                     "current_working_directory": <current_working_directory>,
                     "data_file": <data_file>,
                     "format_version": <format_version>,
                     "gcc_version": <gcc_version>
                     "files": [<file>]
                   }

           Fields of the root element have following semantics:

           *   _c_u_r_r_e_n_t___w_o_r_k_i_n_g___d_i_r_e_c_t_o_r_y: working directory where a
               compilation unit was compiled

           *   _d_a_t_a___f_i_l_e: name of the data file (GCDA)

           *   _f_o_r_m_a_t___v_e_r_s_i_o_n: semantic version of the format

           *   _g_c_c___v_e_r_s_i_o_n: version of the GCC compiler

           Each _f_i_l_e has the following form:

                   {
                     "file": <file_name>,
                     "functions": [<function>],
                     "lines": [<line>]
                   }

           Fields of the _f_i_l_e element have following semantics:

           *   _f_i_l_e___n_a_m_e: name of the source file

           Each _f_u_n_c_t_i_o_n has the following form:

                   {
                     "blocks": <blocks>,
                     "blocks_executed": <blocks_executed>,
                     "demangled_name": "<demangled_name>,
                     "end_column": <end_column>,
                     "end_line": <end_line>,
                     "execution_count": <execution_count>,
                     "name": <name>,
                     "start_column": <start_column>
                     "start_line": <start_line>
                   }

           Fields of the _f_u_n_c_t_i_o_n element have following semantics:

           *   _b_l_o_c_k_s: number of blocks that are in the function

           *   _b_l_o_c_k_s___e_x_e_c_u_t_e_d: number of executed blocks of the function

           *   _d_e_m_a_n_g_l_e_d___n_a_m_e: demangled name of the function

           *   _e_n_d___c_o_l_u_m_n: column in the source file where the function ends

           *   _e_n_d___l_i_n_e: line in the source file where the function ends

           *   _e_x_e_c_u_t_i_o_n___c_o_u_n_t: number of executions of the function

           *   _n_a_m_e: name of the function

           *   _s_t_a_r_t___c_o_l_u_m_n: column in the source file where the function
               begins

           *   _s_t_a_r_t___l_i_n_e: line in the source file where the function begins

           Note that line numbers and column numbers number from 1.  In the
           current implementation, _s_t_a_r_t___l_i_n_e and _s_t_a_r_t___c_o_l_u_m_n do not include
           any template parameters and the leading return type but that this
           is likely to be fixed in the future.

           Each _l_i_n_e has the following form:

                   {
                     "branches": [<branch>],
                     "count": <count>,
                     "line_number": <line_number>,
                     "unexecuted_block": <unexecuted_block>
                     "function_name": <function_name>,
                   }

           Branches are present only with _-_b option.  Fields of the _l_i_n_e
           element have following semantics:

           *   _c_o_u_n_t: number of executions of the line

           *   _l_i_n_e___n_u_m_b_e_r: line number

           *   _u_n_e_x_e_c_u_t_e_d___b_l_o_c_k: flag whether the line contains an unexecuted
               block (not all statements on the line are executed)

           *   _f_u_n_c_t_i_o_n___n_a_m_e: a name of a function this _l_i_n_e belongs to (for a
               line with an inlined statements can be not set)

           Each _b_r_a_n_c_h has the following form:

                   {
                     "count": <count>,
                     "fallthrough": <fallthrough>,
                     "throw": <throw>
                   }

           Fields of the _b_r_a_n_c_h element have following semantics:

           *   _c_o_u_n_t: number of executions of the branch

           *   _f_a_l_l_t_h_r_o_u_g_h: true when the branch is a fall through branch

           *   _t_h_r_o_w: true when the branch is an exceptional branch

       --jj
       ----hhuummaann--rreeaaddaabbllee
           Write counts in human readable format (like 24.6k).

       --kk
       ----uussee--ccoolloorrss
           Use colors for lines of code that have zero coverage.  We use red
           color for non-exceptional lines and cyan for exceptional.  Same
           colors are used for basic blocks with --aa option.

       --ll
       ----lloonngg--ffiillee--nnaammeess
           Create long file names for included source files.  For example, if
           the header file _x_._h contains code, and was included in the file
           _a_._c, then running ggccoovv on the file _a_._c will produce an output file
           called _a_._c_#_#_x_._h_._g_c_o_v instead of _x_._h_._g_c_o_v.  This can be useful if
           _x_._h is included in multiple source files and you want to see the
           individual contributions.  If you use the --pp option, both the
           including and included file names will be complete path names.

       --mm
       ----ddeemmaanngglleedd--nnaammeess
           Display demangled function names in output. The default is to show
           mangled function names.

       --nn
       ----nnoo--oouuttppuutt
           Do not create the ggccoovv output file.

       --oo _d_i_r_e_c_t_o_r_y_|_f_i_l_e
       ----oobbjjeecctt--ddiirreeccttoorryy _d_i_r_e_c_t_o_r_y
       ----oobbjjeecctt--ffiillee _f_i_l_e
           Specify either the directory containing the gcov data files, or the
           object path name.  The _._g_c_n_o, and _._g_c_d_a data files are searched for
           using this option.  If a directory is specified, the data files are
           in that directory and named after the input file name, without its
           extension.  If a file is specified here, the data files are named
           after that file, without its extension.

       --pp
       ----pprreesseerrvvee--ppaatthhss
           Preserve complete path information in the names of generated _._g_c_o_v
           files.  Without this option, just the filename component is used.
           With this option, all directories are used, with // characters
           translated to ## characters, _. directory components removed and
           unremoveable _._.  components renamed to ^^.  This is useful if
           sourcefiles are in several different directories.

       --qq
       ----uussee--hhoottnneessss--ccoolloorrss
           Emit perf-like colored output for hot lines.  Legend of the color
           scale is printed at the very beginning of the output file.

       --rr
       ----rreellaattiivvee--oonnllyy
           Only output information about source files with a relative pathname
           (after source prefix elision).  Absolute paths are usually system
           header files and coverage of any inline functions therein is
           normally uninteresting.

       --ss _d_i_r_e_c_t_o_r_y
       ----ssoouurrccee--pprreeffiixx _d_i_r_e_c_t_o_r_y
           A prefix for source file names to remove when generating the output
           coverage files.  This option is useful when building in a separate
           directory, and the pathname to the source directory is not wanted
           when determining the output file names.  Note that this prefix
           detection is applied before determining whether the source file is
           absolute.

       --tt
       ----ssttddoouutt
           Output to standard output instead of output files.

       --uu
       ----uunnccoonnddiittiioonnaall--bbrraanncchheess
           When branch probabilities are given, include those of unconditional
           branches.  Unconditional branches are normally not interesting.

       --vv
       ----vveerrssiioonn
           Display the ggccoovv version number (on the standard output), and exit
           without doing any further processing.

       --ww
       ----vveerrbboossee
           Print verbose informations related to basic blocks and arcs.

       --xx
       ----hhaasshh--ffiilleennaammeess
           When using _-_-_p_r_e_s_e_r_v_e_-_p_a_t_h_s, gcov uses the full pathname of the
           source files to create an output filename.  This can lead to long
           filenames that can overflow filesystem limits.  This option creates
           names of the form _s_o_u_r_c_e_-_f_i_l_e_#_#_m_d_5_._g_c_o_v, where the _s_o_u_r_c_e_-_f_i_l_e
           component is the final filename part and the _m_d_5 component is
           calculated from the full mangled name that would have been used
           otherwise.  The option is an alternative to the _-_-_p_r_e_s_e_r_v_e_-_p_a_t_h_s on
           systems which have a filesystem limit.

       ggccoovv should be run with the current directory the same as that when you
       invoked the compiler.  Otherwise it will not be able to locate the
       source files.  ggccoovv produces files called _m_a_n_g_l_e_d_n_a_m_e_._g_c_o_v in the
       current directory.  These contain the coverage information of the
       source file they correspond to.  One _._g_c_o_v file is produced for each
       source (or header) file containing code, which was compiled to produce
       the data files.  The _m_a_n_g_l_e_d_n_a_m_e part of the output file name is
       usually simply the source file name, but can be something more
       complicated if the --ll or --pp options are given.  Refer to those options
       for details.

       If you invoke ggccoovv with multiple input files, the contributions from
       each input file are summed.  Typically you would invoke it with the
       same list of files as the final link of your executable.

       The _._g_c_o_v files contain the :: separated fields along with program
       source code.  The format is

               <execution_count>:<line_number>:<source line text>

       Additional block information may succeed each line, when requested by
       command line option.  The _e_x_e_c_u_t_i_o_n___c_o_u_n_t is -- for lines containing no
       code.  Unexecuted lines are marked ########## or ==========, depending on whether
       they are reachable by non-exceptional paths or only exceptional paths
       such as C++ exception handlers, respectively. Given the --aa option,
       unexecuted blocks are marked $$$$$$$$$$ or %%%%%%%%%%, depending on whether a
       basic block is reachable via non-exceptional or exceptional paths.
       Executed basic blocks having a statement with zero _e_x_e_c_u_t_i_o_n___c_o_u_n_t end
       with ** character and are colored with magenta color with the --kk option.
       This functionality is not supported in Ada.

       Note that GCC can completely remove the bodies of functions that are
       not needed -- for instance if they are inlined everywhere.  Such
       functions are marked with --, which can be confusing.  Use the
       --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss and --ffkkeeeepp--ssttaattiicc--ffuunnccttiioonnss options to retain
       these functions and allow gcov to properly show their _e_x_e_c_u_t_i_o_n___c_o_u_n_t.

       Some lines of information at the start have _l_i_n_e___n_u_m_b_e_r of zero.  These
       preamble lines are of the form

               -:0:<tag>:<value>

       The ordering and number of these preamble lines will be augmented as
       ggccoovv development progresses --- do not rely on them remaining
       unchanged.  Use _t_a_g to locate a particular preamble line.

       The additional block information is of the form

               <tag> <information>

       The _i_n_f_o_r_m_a_t_i_o_n is human readable, but designed to be simple enough for
       machine parsing too.

       When printing percentages, 0% and 100% are only printed when the values
       are _e_x_a_c_t_l_y 0% and 100% respectively.  Other values which would
       conventionally be rounded to 0% or 100% are instead printed as the
       nearest non-boundary value.

       When using ggccoovv, you must first compile your program with a special GCC
       option ----ccoovveerraaggee.  This tells the compiler to generate additional
       information needed by gcov (basically a flow graph of the program) and
       also includes additional code in the object files for generating the
       extra profiling information needed by gcov.  These additional files are
       placed in the directory where the object file is located.

       Running the program will cause profile output to be generated.  For
       each source file compiled with --ffpprrooffiillee--aarrccss, an accompanying _._g_c_d_a
       file will be placed in the object file directory.

       Running ggccoovv with your program's source file names as arguments will
       now produce a listing of the code along with frequency of execution for
       each line.  For example, if your program is called _t_m_p_._c_p_p, this is
       what you see when you use the basic ggccoovv facility:

               $ g++ --coverage tmp.cpp
               $ a.out
               $ gcov tmp.cpp -m
               File 'tmp.cpp'
               Lines executed:92.86% of 14
               Creating 'tmp.cpp.gcov'

       The file _t_m_p_._c_p_p_._g_c_o_v contains output from ggccoovv.  Here is a sample:

                       -:    0:Source:tmp.cpp
                       -:    0:Working directory:/home/gcc/testcase
                       -:    0:Graph:tmp.gcno
                       -:    0:Data:tmp.gcda
                       -:    0:Runs:1
                       -:    0:Programs:1
                       -:    1:#include <stdio.h>
                       -:    2:
                       -:    3:template<class T>
                       -:    4:class Foo
                       -:    5:{
                       -:    6:  public:
                      1*:    7:  Foo(): b (1000) {}
               ------------------
               Foo<char>::Foo():
                   #####:    7:  Foo(): b (1000) {}
               ------------------
               Foo<int>::Foo():
                       1:    7:  Foo(): b (1000) {}
               ------------------
                      2*:    8:  void inc () { b++; }
               ------------------
               Foo<char>::inc():
                   #####:    8:  void inc () { b++; }
               ------------------
               Foo<int>::inc():
                       2:    8:  void inc () { b++; }
               ------------------
                       -:    9:
                       -:   10:  private:
                       -:   11:  int b;
                       -:   12:};
                       -:   13:
                       -:   14:template class Foo<int>;
                       -:   15:template class Foo<char>;
                       -:   16:
                       -:   17:int
                       1:   18:main (void)
                       -:   19:{
                       -:   20:  int i, total;
                       1:   21:  Foo<int> counter;
                       -:   22:
                       1:   23:  counter.inc();
                       1:   24:  counter.inc();
                       1:   25:  total = 0;
                       -:   26:
                      11:   27:  for (i = 0; i < 10; i++)
                      10:   28:    total += i;
                       -:   29:
                      1*:   30:  int v = total > 100 ? 1 : 2;
                       -:   31:
                       1:   32:  if (total != 45)
                   #####:   33:    printf ("Failure\n");
                       -:   34:  else
                       1:   35:    printf ("Success\n");
                       1:   36:  return 0;
                       -:   37:}

       Note that line 7 is shown in the report multiple times.  First
       occurrence presents total number of execution of the line and the next
       two belong to instances of class Foo constructors.  As you can also
       see, line 30 contains some unexecuted basic blocks and thus execution
       count has asterisk symbol.

       When you use the --aa option, you will get individual block counts, and
       the output looks like this:

                       -:    0:Source:tmp.cpp
                       -:    0:Working directory:/home/gcc/testcase
                       -:    0:Graph:tmp.gcno
                       -:    0:Data:tmp.gcda
                       -:    0:Runs:1
                       -:    0:Programs:1
                       -:    1:#include <stdio.h>
                       -:    2:
                       -:    3:template<class T>
                       -:    4:class Foo
                       -:    5:{
                       -:    6:  public:
                      1*:    7:  Foo(): b (1000) {}
               ------------------
               Foo<char>::Foo():
                   #####:    7:  Foo(): b (1000) {}
               ------------------
               Foo<int>::Foo():
                       1:    7:  Foo(): b (1000) {}
               ------------------
                      2*:    8:  void inc () { b++; }
               ------------------
               Foo<char>::inc():
                   #####:    8:  void inc () { b++; }
               ------------------
               Foo<int>::inc():
                       2:    8:  void inc () { b++; }
               ------------------
                       -:    9:
                       -:   10:  private:
                       -:   11:  int b;
                       -:   12:};
                       -:   13:
                       -:   14:template class Foo<int>;
                       -:   15:template class Foo<char>;
                       -:   16:
                       -:   17:int
                       1:   18:main (void)
                       -:   19:{
                       -:   20:  int i, total;
                       1:   21:  Foo<int> counter;
                       1:   21-block  0
                       -:   22:
                       1:   23:  counter.inc();
                       1:   23-block  0
                       1:   24:  counter.inc();
                       1:   24-block  0
                       1:   25:  total = 0;
                       -:   26:
                      11:   27:  for (i = 0; i < 10; i++)
                       1:   27-block  0
                      11:   27-block  1
                      10:   28:    total += i;
                      10:   28-block  0
                       -:   29:
                      1*:   30:  int v = total > 100 ? 1 : 2;
                       1:   30-block  0
                   %%%%%:   30-block  1
                       1:   30-block  2
                       -:   31:
                       1:   32:  if (total != 45)
                       1:   32-block  0
                   #####:   33:    printf ("Failure\n");
                   %%%%%:   33-block  0
                       -:   34:  else
                       1:   35:    printf ("Success\n");
                       1:   35-block  0
                       1:   36:  return 0;
                       1:   36-block  0
                       -:   37:}

       In this mode, each basic block is only shown on one line -- the last
       line of the block.  A multi-line block will only contribute to the
       execution count of that last line, and other lines will not be shown to
       contain code, unless previous blocks end on those lines.  The total
       execution count of a line is shown and subsequent lines show the
       execution counts for individual blocks that end on that line.  After
       each block, the branch and call counts of the block will be shown, if
       the --bb option is given.

       Because of the way GCC instruments calls, a call count can be shown
       after a line with no individual blocks.  As you can see, line 33
       contains a basic block that was not executed.

       When you use the --bb option, your output looks like this:

                       -:    0:Source:tmp.cpp
                       -:    0:Working directory:/home/gcc/testcase
                       -:    0:Graph:tmp.gcno
                       -:    0:Data:tmp.gcda
                       -:    0:Runs:1
                       -:    0:Programs:1
                       -:    1:#include <stdio.h>
                       -:    2:
                       -:    3:template<class T>
                       -:    4:class Foo
                       -:    5:{
                       -:    6:  public:
                      1*:    7:  Foo(): b (1000) {}
               ------------------
               Foo<char>::Foo():
               function Foo<char>::Foo() called 0 returned 0% blocks executed 0%
                   #####:    7:  Foo(): b (1000) {}
               ------------------
               Foo<int>::Foo():
               function Foo<int>::Foo() called 1 returned 100% blocks executed 100%
                       1:    7:  Foo(): b (1000) {}
               ------------------
                      2*:    8:  void inc () { b++; }
               ------------------
               Foo<char>::inc():
               function Foo<char>::inc() called 0 returned 0% blocks executed 0%
                   #####:    8:  void inc () { b++; }
               ------------------
               Foo<int>::inc():
               function Foo<int>::inc() called 2 returned 100% blocks executed 100%
                       2:    8:  void inc () { b++; }
               ------------------
                       -:    9:
                       -:   10:  private:
                       -:   11:  int b;
                       -:   12:};
                       -:   13:
                       -:   14:template class Foo<int>;
                       -:   15:template class Foo<char>;
                       -:   16:
                       -:   17:int
               function main called 1 returned 100% blocks executed 81%
                       1:   18:main (void)
                       -:   19:{
                       -:   20:  int i, total;
                       1:   21:  Foo<int> counter;
               call    0 returned 100%
               branch  1 taken 100% (fallthrough)
               branch  2 taken 0% (throw)
                       -:   22:
                       1:   23:  counter.inc();
               call    0 returned 100%
               branch  1 taken 100% (fallthrough)
               branch  2 taken 0% (throw)
                       1:   24:  counter.inc();
               call    0 returned 100%
               branch  1 taken 100% (fallthrough)
               branch  2 taken 0% (throw)
                       1:   25:  total = 0;
                       -:   26:
                      11:   27:  for (i = 0; i < 10; i++)
               branch  0 taken 91% (fallthrough)
               branch  1 taken 9%
                      10:   28:    total += i;
                       -:   29:
                      1*:   30:  int v = total > 100 ? 1 : 2;
               branch  0 taken 0% (fallthrough)
               branch  1 taken 100%
                       -:   31:
                       1:   32:  if (total != 45)
               branch  0 taken 0% (fallthrough)
               branch  1 taken 100%
                   #####:   33:    printf ("Failure\n");
               call    0 never executed
               branch  1 never executed
               branch  2 never executed
                       -:   34:  else
                       1:   35:    printf ("Success\n");
               call    0 returned 100%
               branch  1 taken 100% (fallthrough)
               branch  2 taken 0% (throw)
                       1:   36:  return 0;
                       -:   37:}

       For each function, a line is printed showing how many times the
       function is called, how many times it returns and what percentage of
       the function's blocks were executed.

       For each basic block, a line is printed after the last line of the
       basic block describing the branch or call that ends the basic block.
       There can be multiple branches and calls listed for a single source
       line if there are multiple basic blocks that end on that line.  In this
       case, the branches and calls are each given a number.  There is no
       simple way to map these branches and calls back to source constructs.
       In general, though, the lowest numbered branch or call will correspond
       to the leftmost construct on the source line.

       For a branch, if it was executed at least once, then a percentage
       indicating the number of times the branch was taken divided by the
       number of times the branch was executed will be printed.  Otherwise,
       the message "never executed" is printed.

       For a call, if it was executed at least once, then a percentage
       indicating the number of times the call returned divided by the number
       of times the call was executed will be printed.  This will usually be
       100%, but may be less for functions that call "exit" or "longjmp", and
       thus may not return every time they are called.

       The execution counts are cumulative.  If the example program were
       executed again without removing the _._g_c_d_a file, the count for the
       number of times each line in the source was executed would be added to
       the results of the previous run(s).  This is potentially useful in
       several ways.  For example, it could be used to accumulate data over a
       number of program runs as part of a test verification suite, or to
       provide more accurate long-term information over a large number of
       program runs.

       The data in the _._g_c_d_a files is saved immediately before the program
       exits.  For each source file compiled with --ffpprrooffiillee--aarrccss, the
       profiling code first attempts to read in an existing _._g_c_d_a file; if the
       file doesn't match the executable (differing number of basic block
       counts) it will ignore the contents of the file.  It then adds in the
       new execution counts and finally writes the data to the file.

   UUssiinngg ggccoovv wwiitthh GGCCCC OOppttiimmiizzaattiioonn
       If you plan to use ggccoovv to help optimize your code, you must first
       compile your program with a special GCC option ----ccoovveerraaggee.  Aside from
       that, you can use any other GCC options; but if you want to prove that
       every single line in your program was executed, you should not compile
       with optimization at the same time.  On some machines the optimizer can
       eliminate some simple code lines by combining them with other lines.
       For example, code like this:

               if (a != b)
                 c = 1;
               else
                 c = 0;

       can be compiled into one instruction on some machines.  In this case,
       there is no way for ggccoovv to calculate separate execution counts for
       each line because there isn't separate code for each line.  Hence the
       ggccoovv output looks like this if you compiled the program with
       optimization:

                     100:   12:if (a != b)
                     100:   13:  c = 1;
                     100:   14:else
                     100:   15:  c = 0;

       The output shows that this block of code, combined by optimization,
       executed 100 times.  In one sense this result is correct, because there
       was only one instruction representing all four of these lines.
       However, the output does not indicate how many times the result was 0
       and how many times the result was 1.

       Inlineable functions can create unexpected line counts.  Line counts
       are shown for the source code of the inlineable function, but what is
       shown depends on where the function is inlined, or if it is not inlined
       at all.

       If the function is not inlined, the compiler must emit an out of line
       copy of the function, in any object file that needs it.  If _f_i_l_e_A_._o and
       _f_i_l_e_B_._o both contain out of line bodies of a particular inlineable
       function, they will also both contain coverage counts for that
       function.  When _f_i_l_e_A_._o and _f_i_l_e_B_._o are linked together, the linker
       will, on many systems, select one of those out of line bodies for all
       calls to that function, and remove or ignore the other.  Unfortunately,
       it will not remove the coverage counters for the unused function body.
       Hence when instrumented, all but one use of that function will show
       zero counts.

       If the function is inlined in several places, the block structure in
       each location might not be the same.  For instance, a condition might
       now be calculable at compile time in some instances.  Because the
       coverage of all the uses of the inline function will be shown for the
       same source lines, the line counts themselves might seem inconsistent.

       Long-running applications can use the "__gcov_reset" and "__gcov_dump"
       facilities to restrict profile collection to the program region of
       interest. Calling "__gcov_reset(void)" will clear all profile counters
       to zero, and calling "__gcov_dump(void)" will cause the profile
       information collected at that point to be dumped to _._g_c_d_a output files.
       Instrumented applications use a static destructor with priority 99 to
       invoke the "__gcov_dump" function. Thus "__gcov_dump" is executed after
       all user defined static destructors, as well as handlers registered
       with "atexit".  If an executable loads a dynamic shared object via
       dlopen functionality, --WWll,,----ddyynnaammiicc--lliisstt--ddaattaa is needed to dump all
       profile data.

       Profiling run-time library reports various errors related to profile
       manipulation and profile saving.  Errors are printed into standard
       error output or GGCCOOVV__EERRRROORR__FFIILLEE file, if environment variable is used.
       In order to terminate immediately after an errors occurs set
       GGCCOOVV__EEXXIITT__AATT__EERRRROORR environment variable.  That can help users to find
       profile clashing which leads to a misleading profile.

SSEEEE AALLSSOO
       ggppll(7), ggffddll(7), ffssff--ffuunnddiinngg(7), ggcccc(1) and the Info entry for _g_c_c.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1996-2019 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3 or
       any later version published by the Free Software Foundation; with the
       Invariant Sections being "GNU General Public License" and "Funding Free
       Software", the Front-Cover texts being (a) (see below), and with the
       Back-Cover Texts being (b) (see below).  A copy of the license is
       included in the ggffddll(7) man page.

       (a) The FSF's Front-Cover Text is:

            A GNU Manual

       (b) The FSF's Back-Cover Text is:

            You have freedom to copy and modify this GNU Manual, like GNU
            software.  Copies published by the Free Software Foundation raise
            funds for GNU development.



gcc-9.3.0                         2020-03-12                           GCOV(1)
