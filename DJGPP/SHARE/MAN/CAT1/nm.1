NM(1)                        GNU Development Tools                       NM(1)



NNAAMMEE
       nm - list symbols from object files

SSYYNNOOPPSSIISS
       nm [--AA|--oo|----pprriinntt--ffiillee--nnaammee] [--aa|----ddeebbuugg--ssyymmss]
          [--BB|----ffoorrmmaatt==bbssdd] [--CC|----ddeemmaannggllee[=_s_t_y_l_e]]
          [--DD|----ddyynnaammiicc] [--ff_f_o_r_m_a_t|----ffoorrmmaatt==_f_o_r_m_a_t]
          [--gg|----eexxtteerrnn--oonnllyy] [--hh|----hheellpp]
          [--ll|----lliinnee--nnuummbbeerrss] [----iinnlliinneess]
          [--nn|--vv|----nnuummeerriicc--ssoorrtt]
          [--PP|----ppoorrttaabbiilliittyy] [--pp|----nnoo--ssoorrtt]
          [--rr|----rreevveerrssee--ssoorrtt] [--SS|----pprriinntt--ssiizzee]
          [--ss|----pprriinntt--aarrmmaapp] [--tt _r_a_d_i_x|----rraaddiixx==_r_a_d_i_x]
          [--uu|----uunnddeeffiinneedd--oonnllyy] [--VV|----vveerrssiioonn]
          [--XX 3322__6644] [----ddeeffiinneedd--oonnllyy] [----nnoo--ddeemmaannggllee]
          [----pplluuggiinn _n_a_m_e]
          [----nnoo--rreeccuurrssee--lliimmiitt|----rreeccuurrssee--lliimmiitt]]
          [----ssiizzee--ssoorrtt] [----ssppeecciiaall--ssyymmss]
          [----ssyynntthheettiicc] [----wwiitthh--ssyymmbbooll--vveerrssiioonnss] [----ttaarrggeett==_b_f_d_n_a_m_e]
          [_o_b_j_f_i_l_e...]

DDEESSCCRRIIPPTTIIOONN
       GNU nnmm lists the symbols from object files _o_b_j_f_i_l_e....  If no object
       files are listed as arguments, nnmm assumes the file _a_._o_u_t.

       For each symbol, nnmm shows:

       +o   The symbol value, in the radix selected by options (see below), or
           hexadecimal by default.

       +o   The symbol type.  At least the following types are used; others
           are, as well, depending on the object file format.  If lowercase,
           the symbol is usually local; if uppercase, the symbol is global
           (external).  There are however a few lowercase symbols that are
           shown for special global symbols ("u", "v" and "w").

           "A" The symbol's value is absolute, and will not be changed by
               further linking.

           "B"
           "b" The symbol is in the BSS data section.  This section typically
               contains zero-initialized or uninitialized data, although the
               exact behavior is system dependent.

           "C" The symbol is common.  Common symbols are uninitialized data.
               When linking, multiple common symbols may appear with the same
               name.  If the symbol is defined anywhere, the common symbols
               are treated as undefined references.

           "D"
           "d" The symbol is in the initialized data section.

           "G"
           "g" The symbol is in an initialized data section for small objects.
               Some object file formats permit more efficient access to small
               data objects, such as a global int variable as opposed to a
               large global array.

           "i" For PE format files this indicates that the symbol is in a
               section specific to the implementation of DLLs.  For ELF format
               files this indicates that the symbol is an indirect function.
               This is a GNU extension to the standard set of ELF symbol
               types.  It indicates a symbol which if referenced by a
               relocation does not evaluate to its address, but instead must
               be invoked at runtime.  The runtime execution will then return
               the value to be used in the relocation.

           "I" The symbol is an indirect reference to another symbol.

           "N" The symbol is a debugging symbol.

           "n" The symbol is in the read-only data section.

           "p" The symbol is in a stack unwind section.

           "R"
           "r" The symbol is in a read only data section.

           "S"
           "s" The symbol is in an uninitialized or zero-initialized data
               section for small objects.

           "T"
           "t" The symbol is in the text (code) section.

           "U" The symbol is undefined.

           "u" The symbol is a unique global symbol.  This is a GNU extension
               to the standard set of ELF symbol bindings.  For such a symbol
               the dynamic linker will make sure that in the entire process
               there is just one symbol with this name and type in use.

           "V"
           "v" The symbol is a weak object.  When a weak defined symbol is
               linked with a normal defined symbol, the normal defined symbol
               is used with no error.  When a weak undefined symbol is linked
               and the symbol is not defined, the value of the weak symbol
               becomes zero with no error.  On some systems, uppercase
               indicates that a default value has been specified.

           "W"
           "w" The symbol is a weak symbol that has not been specifically
               tagged as a weak object symbol.  When a weak defined symbol is
               linked with a normal defined symbol, the normal defined symbol
               is used with no error.  When a weak undefined symbol is linked
               and the symbol is not defined, the value of the symbol is
               determined in a system-specific manner without error.  On some
               systems, uppercase indicates that a default value has been
               specified.

           "-" The symbol is a stabs symbol in an a.out object file.  In this
               case, the next values printed are the stabs other field, the
               stabs desc field, and the stab type.  Stabs symbols are used to
               hold debugging information.

           "?" The symbol type is unknown, or object file format specific.

       +o   The symbol name.

OOPPTTIIOONNSS
       The long and short forms of options, shown here as alternatives, are
       equivalent.

       --AA
       --oo
       ----pprriinntt--ffiillee--nnaammee
           Precede each symbol by the name of the input file (or archive
           member) in which it was found, rather than identifying the input
           file once only, before all of its symbols.

       --aa
       ----ddeebbuugg--ssyymmss
           Display all symbols, even debugger-only symbols; normally these are
           not listed.

       --BB  The same as ----ffoorrmmaatt==bbssdd (for compatibility with the MIPS nnmm).

       --CC
       ----ddeemmaannggllee[[==_s_t_y_l_e]]
           Decode (_d_e_m_a_n_g_l_e) low-level symbol names into user-level names.
           Besides removing any initial underscore prepended by the system,
           this makes C++ function names readable. Different compilers have
           different mangling styles. The optional demangling style argument
           can be used to choose an appropriate demangling style for your
           compiler.

       ----nnoo--ddeemmaannggllee
           Do not demangle low-level symbol names.  This is the default.

       ----rreeccuurrssee--lliimmiitt
       ----nnoo--rreeccuurrssee--lliimmiitt
       ----rreeccuurrssiioonn--lliimmiitt
       ----nnoo--rreeccuurrssiioonn--lliimmiitt
           Enables or disables a limit on the amount of recursion performed
           whilst demangling strings.  Since the name mangling formats allow
           for an inifinite level of recursion it is possible to create
           strings whose decoding will exhaust the amount of stack space
           available on the host machine, triggering a memory fault.  The
           limit tries to prevent this from happening by restricting recursion
           to 2048 levels of nesting.

           The default is for this limit to be enabled, but disabling it may
           be necessary in order to demangle truly complicated names.  Note
           however that if the recursion limit is disabled then stack
           exhaustion is possible and any bug reports about such an event will
           be rejected.

       --DD
       ----ddyynnaammiicc
           Display the dynamic symbols rather than the normal symbols.  This
           is only meaningful for dynamic objects, such as certain types of
           shared libraries.

       --ff _f_o_r_m_a_t
       ----ffoorrmmaatt==_f_o_r_m_a_t
           Use the output format _f_o_r_m_a_t, which can be "bsd", "sysv", or
           "posix".  The default is "bsd".  Only the first character of _f_o_r_m_a_t
           is significant; it can be either upper or lower case.

       --gg
       ----eexxtteerrnn--oonnllyy
           Display only external symbols.

       --hh
       ----hheellpp
           Show a summary of the options to nnmm and exit.

       --ll
       ----lliinnee--nnuummbbeerrss
           For each symbol, use debugging information to try to find a
           filename and line number.  For a defined symbol, look for the line
           number of the address of the symbol.  For an undefined symbol, look
           for the line number of a relocation entry which refers to the
           symbol.  If line number information can be found, print it after
           the other symbol information.

       ----iinnlliinneess
           When option --ll is active, if the address belongs to a function that
           was inlined, then this option causes the source information for all
           enclosing scopes back to the first non-inlined function to be
           printed as well.  For example, if "main" inlines "callee1" which
           inlines "callee2", and address is from "callee2", the source
           information for "callee1" and "main" will also be printed.

       --nn
       --vv
       ----nnuummeerriicc--ssoorrtt
           Sort symbols numerically by their addresses, rather than
           alphabetically by their names.

       --pp
       ----nnoo--ssoorrtt
           Do not bother to sort the symbols in any order; print them in the
           order encountered.

       --PP
       ----ppoorrttaabbiilliittyy
           Use the POSIX.2 standard output format instead of the default
           format.  Equivalent to --ff ppoossiixx.

       --rr
       ----rreevveerrssee--ssoorrtt
           Reverse the order of the sort (whether numeric or alphabetic); let
           the last come first.

       --SS
       ----pprriinntt--ssiizzee
           Print both value and size of defined symbols for the "bsd" output
           style.  This option has no effect for object formats that do not
           record symbol sizes, unless ----ssiizzee--ssoorrtt is also used in which case
           a calculated size is displayed.

       --ss
       ----pprriinntt--aarrmmaapp
           When listing symbols from archive members, include the index: a
           mapping (stored in the archive by aarr or rraannlliibb) of which modules
           contain definitions for which names.

       --tt _r_a_d_i_x
       ----rraaddiixx==_r_a_d_i_x
           Use _r_a_d_i_x as the radix for printing the symbol values.  It must be
           dd for decimal, oo for octal, or xx for hexadecimal.

       --uu
       ----uunnddeeffiinneedd--oonnllyy
           Display only undefined symbols (those external to each object
           file).

       --VV
       ----vveerrssiioonn
           Show the version number of nnmm and exit.

       --XX  This option is ignored for compatibility with the AIX version of
           nnmm.  It takes one parameter which must be the string 3322__6644.  The
           default mode of AIX nnmm corresponds to --XX 3322, which is not supported
           by GNU nnmm.

       ----ddeeffiinneedd--oonnllyy
           Display only defined symbols for each object file.

       ----pplluuggiinn _n_a_m_e
           Load the plugin called _n_a_m_e to add support for extra target types.
           This option is only available if the toolchain has been built with
           plugin support enabled.

           If ----pplluuggiinn is not provided, but plugin support has been enabled
           then nnmm iterates over the files in _$_{_l_i_b_d_i_r_}_/_b_f_d_-_p_l_u_g_i_n_s in
           alphabetic order and the first plugin that claims the object in
           question is used.

           Please note that this plugin search directory is _n_o_t the one used
           by lldd's --pplluuggiinn option.  In order to make nnmm use the  linker plugin
           it must be copied into the _$_{_l_i_b_d_i_r_}_/_b_f_d_-_p_l_u_g_i_n_s directory.  For
           GCC based compilations the linker plugin is called
           _l_i_b_l_t_o___p_l_u_g_i_n_._s_o_._0_._0_._0.  For Clang based compilations it is called
           _L_L_V_M_g_o_l_d_._s_o.  The GCC plugin is always backwards compatible with
           earlier versions, so it is sufficient to just copy the newest one.

       ----ssiizzee--ssoorrtt
           Sort symbols by size.  For ELF objects symbol sizes are read from
           the ELF, for other object types the symbol sizes are computed as
           the difference between the value of the symbol and the value of the
           symbol with the next higher value.  If the "bsd" output format is
           used the size of the symbol is printed, rather than the value, and
           --SS must be used in order both size and value to be printed.

       ----ssppeecciiaall--ssyymmss
           Display symbols which have a target-specific special meaning.
           These symbols are usually used by the target for some special
           processing and are not normally helpful when included in the normal
           symbol lists.  For example for ARM targets this option would skip
           the mapping symbols used to mark transitions between ARM code,
           THUMB code and data.

       ----ssyynntthheettiicc
           Include synthetic symbols in the output.  These are special symbols
           created by the linker for various purposes.  They are not shown by
           default since they are not part of the binary's original source
           code.

       ----wwiitthh--ssyymmbbooll--vveerrssiioonnss
           Enables the display of symbol version information if any exists.
           The version string is displayed as a suffix to the symbol name,
           preceeded by an @ character.  For example ffoooo@@VVEERR__11.  If the
           version is the default version to be used when resolving
           unversioned references to the symbol then it is displayed as a
           suffix preceeded by two @ characters.  For example ffoooo@@@@VVEERR__22.

       ----ttaarrggeett==_b_f_d_n_a_m_e
           Specify an object code format other than your system's default
           format.

       @@_f_i_l_e
           Read command-line options from _f_i_l_e.  The options read are inserted
           in place of the original @_f_i_l_e option.  If _f_i_l_e does not exist, or
           cannot be read, then the option will be treated literally, and not
           removed.

           Options in _f_i_l_e are separated by whitespace.  A whitespace
           character may be included in an option by surrounding the entire
           option in either single or double quotes.  Any character (including
           a backslash) may be included by prefixing the character to be
           included with a backslash.  The _f_i_l_e may itself contain additional
           @_f_i_l_e options; any such options will be processed recursively.

SSEEEE AALLSSOO
       aarr(1), oobbjjdduummpp(1), rraannlliibb(1), and the Info entries for _b_i_n_u_t_i_l_s.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1991-2020 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3 or
       any later version published by the Free Software Foundation; with no
       Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
       Texts.  A copy of the license is included in the section entitled "GNU
       Free Documentation License".



binutils-2.35.1                   2020-09-19                             NM(1)
