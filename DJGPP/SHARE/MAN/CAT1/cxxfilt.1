C++FILT(1)                   GNU Development Tools                  C++FILT(1)



NNAAMMEE
       cxxfilt - demangle C++ and Java symbols

SSYYNNOOPPSSIISS
       c++filt [--__|----ssttrriipp--uunnddeerrssccoorree]
               [--nn|----nnoo--ssttrriipp--uunnddeerrssccoorree]
               [--pp|----nnoo--ppaarraammss]
               [--tt|----ttyyppeess]
               [--ii|----nnoo--vveerrbboossee]
               [--rr|----nnoo--rreeccuurrssee--lliimmiitt]
               [--RR|----rreeccuurrssee--lliimmiitt]
               [--ss _f_o_r_m_a_t|----ffoorrmmaatt==_f_o_r_m_a_t]
               [----hheellpp]  [----vveerrssiioonn]  [_s_y_m_b_o_l...]

DDEESSCCRRIIPPTTIIOONN
       The C++ and Java languages provide function overloading, which means
       that you can write many functions with the same name, providing that
       each function takes parameters of different types.  In order to be able
       to distinguish these similarly named functions C++ and Java encode them
       into a low-level assembler name which uniquely identifies each
       different version.  This process is known as _m_a_n_g_l_i_n_g. The cc++++ffiilltt [1]
       program does the inverse mapping: it decodes (_d_e_m_a_n_g_l_e_s) low-level
       names into user-level names so that they can be read.

       Every alphanumeric word (consisting of letters, digits, underscores,
       dollars, or periods) seen in the input is a potential mangled name.  If
       the name decodes into a C++ name, the C++ name replaces the low-level
       name in the output, otherwise the original word is output.  In this way
       you can pass an entire assembler source file, containing mangled names,
       through cc++++ffiilltt and see the same source file containing demangled
       names.

       You can also use cc++++ffiilltt to decipher individual symbols by passing them
       on the command line:

               c++filt <symbol>

       If no _s_y_m_b_o_l arguments are given, cc++++ffiilltt reads symbol names from the
       standard input instead.  All the results are printed on the standard
       output.  The difference between reading names from the command line
       versus reading names from the standard input is that command-line
       arguments are expected to be just mangled names and no checking is
       performed to separate them from surrounding text.  Thus for example:

               c++filt -n _Z1fv

       will work and demangle the name to "f()" whereas:

               c++filt -n _Z1fv,

       will not work.  (Note the extra comma at the end of the mangled name
       which makes it invalid).  This command however will work:

               echo _Z1fv, | c++filt -n

       and will display "f(),", i.e., the demangled name followed by a
       trailing comma.  This behaviour is because when the names are read from
       the standard input it is expected that they might be part of an
       assembler source file where there might be extra, extraneous characters
       trailing after a mangled name.  For example:

                   .type   _Z1fv, @function

OOPPTTIIOONNSS
       --__
       ----ssttrriipp--uunnddeerrssccoorree
           On some systems, both the C and C++ compilers put an underscore in
           front of every name.  For example, the C name "foo" gets the low-
           level name "_foo".  This option removes the initial underscore.
           Whether cc++++ffiilltt removes the underscore by default is target
           dependent.

       --nn
       ----nnoo--ssttrriipp--uunnddeerrssccoorree
           Do not remove the initial underscore.

       --pp
       ----nnoo--ppaarraammss
           When demangling the name of a function, do not display the types of
           the function's parameters.

       --tt
       ----ttyyppeess
           Attempt to demangle types as well as function names.  This is
           disabled by default since mangled types are normally only used
           internally in the compiler, and they can be confused with non-
           mangled names.  For example, a function called "a" treated as a
           mangled type name would be demangled to "signed char".

       --ii
       ----nnoo--vveerrbboossee
           Do not include implementation details (if any) in the demangled
           output.

       --rr
       --RR
       ----rreeccuurrssee--lliimmiitt
       ----nnoo--rreeccuurrssee--lliimmiitt
       ----rreeccuurrssiioonn--lliimmiitt
       ----nnoo--rreeccuurrssiioonn--lliimmiitt
           Enables or disables a limit on the amount of recursion performed
           whilst demangling strings.  Since the name mangling formats allow
           for an inifinite level of recursion it is possible to create
           strings whose decoding will exhaust the amount of stack space
           available on the host machine, triggering a memory fault.  The
           limit tries to prevent this from happening by restricting recursion
           to 2048 levels of nesting.

           The default is for this limit to be enabled, but disabling it may
           be necessary in order to demangle truly complicated names.  Note
           however that if the recursion limit is disabled then stack
           exhaustion is possible and any bug reports about such an event will
           be rejected.

           The --rr option is a synonym for the ----nnoo--rreeccuurrssee--lliimmiitt option.  The
           --RR option is a synonym for the ----rreeccuurrssee--lliimmiitt option.

       --ss _f_o_r_m_a_t
       ----ffoorrmmaatt==_f_o_r_m_a_t
           cc++++ffiilltt can decode various methods of mangling, used by different
           compilers.  The argument to this option selects which method it
           uses:

           "auto"
               Automatic selection based on executable (the default method)

           "gnu"
               the one used by the GNU C++ compiler (g++)

           "lucid"
               the one used by the Lucid compiler (lcc)

           "arm"
               the one specified by the C++ Annotated Reference Manual

           "hp"
               the one used by the HP compiler (aCC)

           "edg"
               the one used by the EDG compiler

           "gnu-v3"
               the one used by the GNU C++ compiler (g++) with the V3 ABI.

           "java"
               the one used by the GNU Java compiler (gcj)

           "gnat"
               the one used by the GNU Ada compiler (GNAT).

       ----hheellpp
           Print a summary of the options to cc++++ffiilltt and exit.

       ----vveerrssiioonn
           Print the version number of cc++++ffiilltt and exit.

       @@_f_i_l_e
           Read command-line options from _f_i_l_e.  The options read are inserted
           in place of the original @_f_i_l_e option.  If _f_i_l_e does not exist, or
           cannot be read, then the option will be treated literally, and not
           removed.

           Options in _f_i_l_e are separated by whitespace.  A whitespace
           character may be included in an option by surrounding the entire
           option in either single or double quotes.  Any character (including
           a backslash) may be included by prefixing the character to be
           included with a backslash.  The _f_i_l_e may itself contain additional
           @_f_i_l_e options; any such options will be processed recursively.

FFOOOOTTNNOOTTEESS
       1.  MS-DOS does not allow "+" characters in file names, so on MS-DOS
           this program is named CCXXXXFFIILLTT.

SSEEEE AALLSSOO
       the Info entries for _b_i_n_u_t_i_l_s.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1991-2020 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3 or
       any later version published by the Free Software Foundation; with no
       Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
       Texts.  A copy of the license is included in the section entitled "GNU
       Free Documentation License".



binutils-2.35.1                   2020-09-19                        C++FILT(1)
