LD(1)                        GNU Development Tools                       LD(1)



NNAAMMEE
       ld - The GNU linker

SSYYNNOOPPSSIISS
       ld [ooppttiioonnss] _o_b_j_f_i_l_e ...

DDEESSCCRRIIPPTTIIOONN
       lldd combines a number of object and archive files, relocates their data
       and ties up symbol references. Usually the last step in compiling a
       program is to run lldd.

       lldd accepts Linker Command Language files written in a superset of
       AT&T's Link Editor Command Language syntax, to provide explicit and
       total control over the linking process.

       This man page does not describe the command language; see the lldd entry
       in "info" for full details on the command language and on other aspects
       of the GNU linker.

       This version of lldd uses the general purpose BFD libraries to operate on
       object files. This allows lldd to read, combine, and write object files
       in many different formats---for example, COFF or "a.out".  Different
       formats may be linked together to produce any available kind of object
       file.

       Aside from its flexibility, the GNU linker is more helpful than other
       linkers in providing diagnostic information.  Many linkers abandon
       execution immediately upon encountering an error; whenever possible, lldd
       continues executing, allowing you to identify other errors (or, in some
       cases, to get an output file in spite of the error).

       The GNU linker lldd is meant to cover a broad range of situations, and to
       be as compatible as possible with other linkers.  As a result, you have
       many choices to control its behavior.

OOPPTTIIOONNSS
       The linker supports a plethora of command-line options, but in actual
       practice few of them are used in any particular context.  For instance,
       a frequent use of lldd is to link standard Unix object files on a
       standard, supported Unix system.  On such a system, to link a file
       "hello.o":

               ld -o <output> /lib/crt0.o hello.o -lc

       This tells lldd to produce a file called _o_u_t_p_u_t as the result of linking
       the file "/lib/crt0.o" with "hello.o" and the library "libc.a", which
       will come from the standard search directories.  (See the discussion of
       the --ll option below.)

       Some of the command-line options to lldd may be specified at any point in
       the command line.  However, options which refer to files, such as --ll or
       --TT, cause the file to be read at the point at which the option appears
       in the command line, relative to the object files and other file
       options.  Repeating non-file options with a different argument will
       either have no further effect, or override prior occurrences (those
       further to the left on the command line) of that option.  Options which
       may be meaningfully specified more than once are noted in the
       descriptions below.

       Non-option arguments are object files or archives which are to be
       linked together.  They may follow, precede, or be mixed in with
       command-line options, except that an object file argument may not be
       placed between an option and its argument.

       Usually the linker is invoked with at least one object file, but you
       can specify other forms of binary input files using --ll, --RR, and the
       script command language.  If _n_o binary input files at all are
       specified, the linker does not produce any output, and issues the
       message NNoo iinnppuutt ffiilleess.

       If the linker cannot recognize the format of an object file, it will
       assume that it is a linker script.  A script specified in this way
       augments the main linker script used for the link (either the default
       linker script or the one specified by using --TT).  This feature permits
       the linker to link against a file which appears to be an object or an
       archive, but actually merely defines some symbol values, or uses
       "INPUT" or "GROUP" to load other objects.  Specifying a script in this
       way merely augments the main linker script, with the extra commands
       placed after the main script; use the --TT option to replace the default
       linker script entirely, but note the effect of the "INSERT" command.

       For options whose names are a single letter, option arguments must
       either follow the option letter without intervening whitespace, or be
       given as separate arguments immediately following the option that
       requires them.

       For options whose names are multiple letters, either one dash or two
       can precede the option name; for example, --ttrraaccee--ssyymmbbooll and
       ----ttrraaccee--ssyymmbbooll are equivalent.  Note---there is one exception to this
       rule.  Multiple letter options that start with a lower case 'o' can
       only be preceded by two dashes.  This is to reduce confusion with the
       --oo option.  So for example --oommaaggiicc sets the output file name to mmaaggiicc
       whereas ----oommaaggiicc sets the NMAGIC flag on the output.

       Arguments to multiple-letter options must either be separated from the
       option name by an equals sign, or be given as separate arguments
       immediately following the option that requires them.  For example,
       ----ttrraaccee--ssyymmbbooll ffoooo and ----ttrraaccee--ssyymmbbooll==ffoooo are equivalent.  Unique
       abbreviations of the names of multiple-letter options are accepted.

       Note---if the linker is being invoked indirectly, via a compiler driver
       (e.g. ggcccc) then all the linker command-line options should be prefixed
       by --WWll,, (or whatever is appropriate for the particular compiler driver)
       like this:

                 gcc -Wl,--start-group foo.o bar.o -Wl,--end-group

       This is important, because otherwise the compiler driver program may
       silently drop the linker options, resulting in a bad link.  Confusion
       may also arise when passing options that require values through a
       driver, as the use of a space between option and argument acts as a
       separator, and causes the driver to pass only the option to the linker
       and the argument to the compiler.  In this case, it is simplest to use
       the joined forms of both single- and multiple-letter options, such as:

                 gcc foo.o bar.o -Wl,-eENTRY -Wl,-Map=a.map

       Here is a table of the generic command-line switches accepted by the
       GNU linker:

       @@_f_i_l_e
           Read command-line options from _f_i_l_e.  The options read are inserted
           in place of the original @_f_i_l_e option.  If _f_i_l_e does not exist, or
           cannot be read, then the option will be treated literally, and not
           removed.

           Options in _f_i_l_e are separated by whitespace.  A whitespace
           character may be included in an option by surrounding the entire
           option in either single or double quotes.  Any character (including
           a backslash) may be included by prefixing the character to be
           included with a backslash.  The _f_i_l_e may itself contain additional
           @_f_i_l_e options; any such options will be processed recursively.

       --aa _k_e_y_w_o_r_d
           This option is supported for HP/UX compatibility.  The _k_e_y_w_o_r_d
           argument must be one of the strings aarrcchhiivvee, sshhaarreedd, or ddeeffaauulltt.
           --aaaarrcchhiivvee is functionally equivalent to --BBssttaattiicc, and the other two
           keywords are functionally equivalent to --BBddyynnaammiicc.  This option may
           be used any number of times.

       ----aauuddiitt _A_U_D_I_T_L_I_B
           Adds _A_U_D_I_T_L_I_B to the "DT_AUDIT" entry of the dynamic section.
           _A_U_D_I_T_L_I_B is not checked for existence, nor will it use the
           DT_SONAME specified in the library.  If specified multiple times
           "DT_AUDIT" will contain a colon separated list of audit interfaces
           to use. If the linker finds an object with an audit entry while
           searching for shared libraries, it will add a corresponding
           "DT_DEPAUDIT" entry in the output file.  This option is only
           meaningful on ELF platforms supporting the rtld-audit interface.

       --bb _i_n_p_u_t_-_f_o_r_m_a_t
       ----ffoorrmmaatt==_i_n_p_u_t_-_f_o_r_m_a_t
           lldd may be configured to support more than one kind of object file.
           If your lldd is configured this way, you can use the --bb option to
           specify the binary format for input object files that follow this
           option on the command line.  Even when lldd is configured to support
           alternative object formats, you don't usually need to specify this,
           as lldd should be configured to expect as a default input format the
           most usual format on each machine.  _i_n_p_u_t_-_f_o_r_m_a_t is a text string,
           the name of a particular format supported by the BFD libraries.
           (You can list the available binary formats with oobbjjdduummpp --ii.)

           You may want to use this option if you are linking files with an
           unusual binary format.  You can also use --bb to switch formats
           explicitly (when linking object files of different formats), by
           including --bb _i_n_p_u_t_-_f_o_r_m_a_t before each group of object files in a
           particular format.

           The default format is taken from the environment variable
           "GNUTARGET".

           You can also define the input format from a script, using the
           command "TARGET";

       --cc _M_R_I_-_c_o_m_m_a_n_d_f_i_l_e
       ----mmrrii--ssccrriipptt==_M_R_I_-_c_o_m_m_a_n_d_f_i_l_e
           For compatibility with linkers produced by MRI, lldd accepts script
           files written in an alternate, restricted command language,
           described in the MRI Compatible Script Files section of GNU ld
           documentation.  Introduce MRI script files with the option --cc; use
           the --TT option to run linker scripts written in the general-purpose
           lldd scripting language.  If _M_R_I_-_c_m_d_f_i_l_e does not exist, lldd looks for
           it in the directories specified by any --LL options.

       --dd
       --ddcc
       --ddpp These three options are equivalent; multiple forms are supported
           for compatibility with other linkers.  They assign space to common
           symbols even if a relocatable output file is specified (with --rr).
           The script command "FORCE_COMMON_ALLOCATION" has the same effect.

       ----ddeeppaauuddiitt _A_U_D_I_T_L_I_B
       --PP _A_U_D_I_T_L_I_B
           Adds _A_U_D_I_T_L_I_B to the "DT_DEPAUDIT" entry of the dynamic section.
           _A_U_D_I_T_L_I_B is not checked for existence, nor will it use the
           DT_SONAME specified in the library.  If specified multiple times
           "DT_DEPAUDIT" will contain a colon separated list of audit
           interfaces to use.  This option is only meaningful on ELF platforms
           supporting the rtld-audit interface.  The -P option is provided for
           Solaris compatibility.

       ----eennaabbllee--nnoonn--ccoonnttiigguuoouuss--rreeggiioonnss
           This option avoids generating an error if an input section does not
           fit a matching output section. The linker tries to allocate the
           input section to subseque nt matching output sections, and
           generates an error only if no output section is large enough.  This
           is useful when several non-contiguous memory regions are available
           and the input section does not require a particular one.  The order
           in which input sections are evaluated does not change, for
           instance:

                     MEMORY {
                       MEM1 (rwx) : ORIGIN : 0x1000, LENGTH = 0x14
                       MEM2 (rwx) : ORIGIN : 0x1000, LENGTH = 0x40
                       MEM3 (rwx) : ORIGIN : 0x2000, LENGTH = 0x40
                     }
                     SECTIONS {
                       mem1 : { *(.data.*); } > MEM1
                       mem2 : { *(.data.*); } > MEM2
                       mem3 : { *(.data.*); } > MEM2
                     }

                     with input sections:
                     .data.1: size 8
                     .data.2: size 0x10
                     .data.3: size 4

                     results in .data.1 affected to mem1, and .data.2 and .data.3
                     affected to mem2, even though .data.3 would fit in mem3.

           This option is incompatible with INSERT statements because it
           changes the way input sections are mapped to output sections.

       ----eennaabbllee--nnoonn--ccoonnttiigguuoouuss--rreeggiioonnss--wwaarrnniinnggss
           This option enables warnings when "--enable-non-contiguous-regions"
           allows possibly unexpected matches in sections mapping, potentially
           leading to silently discarding a section instead of failing because
           it does not fit any output region.

       --ee _e_n_t_r_y
       ----eennttrryy==_e_n_t_r_y
           Use _e_n_t_r_y as the explicit symbol for beginning execution of your
           program, rather than the default entry point.  If there is no
           symbol named _e_n_t_r_y, the linker will try to parse _e_n_t_r_y as a number,
           and use that as the entry address (the number will be interpreted
           in base 10; you may use a leading 00xx for base 16, or a leading 00
           for base 8).

       ----eexxcclluuddee--lliibbss _l_i_b,,_l_i_b,,......
           Specifies a list of archive libraries from which symbols should not
           be automatically exported.  The library names may be delimited by
           commas or colons.  Specifying "--exclude-libs ALL" excludes symbols
           in all archive libraries from automatic export.  This option is
           available only for the i386 PE targeted port of the linker and for
           ELF targeted ports.  For i386 PE, symbols explicitly listed in a
           .def file are still exported, regardless of this option.  For ELF
           targeted ports, symbols affected by this option will be treated as
           hidden.

       ----eexxcclluuddee--mmoodduulleess--ffoorr--iimmpplliibb _m_o_d_u_l_e,,_m_o_d_u_l_e,,......
           Specifies a list of object files or archive members, from which
           symbols should not be automatically exported, but which should be
           copied wholesale into the import library being generated during the
           link.  The module names may be delimited by commas or colons, and
           must match exactly the filenames used by lldd to open the files; for
           archive members, this is simply the member name, but for object
           files the name listed must include and match precisely any path
           used to specify the input file on the linker's command-line.  This
           option is available only for the i386 PE targeted port of the
           linker.  Symbols explicitly listed in a .def file are still
           exported, regardless of this option.

       --EE
       ----eexxppoorrtt--ddyynnaammiicc
       ----nnoo--eexxppoorrtt--ddyynnaammiicc
           When creating a dynamically linked executable, using the --EE option
           or the ----eexxppoorrtt--ddyynnaammiicc option causes the linker to add all symbols
           to the dynamic symbol table.  The dynamic symbol table is the set
           of symbols which are visible from dynamic objects at run time.

           If you do not use either of these options (or use the
           ----nnoo--eexxppoorrtt--ddyynnaammiicc option to restore the default behavior), the
           dynamic symbol table will normally contain only those symbols which
           are referenced by some dynamic object mentioned in the link.

           If you use "dlopen" to load a dynamic object which needs to refer
           back to the symbols defined by the program, rather than some other
           dynamic object, then you will probably need to use this option when
           linking the program itself.

           You can also use the dynamic list to control what symbols should be
           added to the dynamic symbol table if the output format supports it.
           See the description of ----ddyynnaammiicc--lliisstt.

           Note that this option is specific to ELF targeted ports.  PE
           targets support a similar function to export all symbols from a DLL
           or EXE; see the description of ----eexxppoorrtt--aallll--ssyymmbboollss below.

       ----eexxppoorrtt--ddyynnaammiicc--ssyymmbbooll==_g_l_o_b
           When creating a dynamically linked executable, symbols matching
           _g_l_o_b will be added to the dynamic symbol table. When creating a
           shared library, references to symbols matching _g_l_o_b will not be
           bound to the definitions within the shared library. This option is
           a no-op when creating a shared library and --BBssyymmbboolliicc or
           ----ddyynnaammiicc--lliisstt are not specified. This option is only meaningful on
           ELF platforms which support shared libraries.

       ----eexxppoorrtt--ddyynnaammiicc--ssyymmbbooll--lliisstt==_f_i_l_e
           Specify a ----eexxppoorrtt--ddyynnaammiicc--ssyymmbbooll for each pattern in the file.
           The format of the file is the same as the version node without
           scope and node name.  See VVEERRSSIIOONN for more information.

       --EEBB Link big-endian objects.  This affects the default output format.

       --EELL Link little-endian objects.  This affects the default output
           format.

       --ff _n_a_m_e
       ----aauuxxiilliiaarryy==_n_a_m_e
           When creating an ELF shared object, set the internal DT_AUXILIARY
           field to the specified name.  This tells the dynamic linker that
           the symbol table of the shared object should be used as an
           auxiliary filter on the symbol table of the shared object _n_a_m_e.

           If you later link a program against this filter object, then, when
           you run the program, the dynamic linker will see the DT_AUXILIARY
           field.  If the dynamic linker resolves any symbols from the filter
           object, it will first check whether there is a definition in the
           shared object _n_a_m_e.  If there is one, it will be used instead of
           the definition in the filter object.  The shared object _n_a_m_e need
           not exist.  Thus the shared object _n_a_m_e may be used to provide an
           alternative implementation of certain functions, perhaps for
           debugging or for machine-specific performance.

           This option may be specified more than once.  The DT_AUXILIARY
           entries will be created in the order in which they appear on the
           command line.

       --FF _n_a_m_e
       ----ffiilltteerr==_n_a_m_e
           When creating an ELF shared object, set the internal DT_FILTER
           field to the specified name.  This tells the dynamic linker that
           the symbol table of the shared object which is being created should
           be used as a filter on the symbol table of the shared object _n_a_m_e.

           If you later link a program against this filter object, then, when
           you run the program, the dynamic linker will see the DT_FILTER
           field.  The dynamic linker will resolve symbols according to the
           symbol table of the filter object as usual, but it will actually
           link to the definitions found in the shared object _n_a_m_e.  Thus the
           filter object can be used to select a subset of the symbols
           provided by the object _n_a_m_e.

           Some older linkers used the --FF option throughout a compilation
           toolchain for specifying object-file format for both input and
           output object files.  The GNU linker uses other mechanisms for this
           purpose: the --bb, ----ffoorrmmaatt, ----ooffoorrmmaatt options, the "TARGET" command
           in linker scripts, and the "GNUTARGET" environment variable.  The
           GNU linker will ignore the --FF option when not creating an ELF
           shared object.

       --ffiinnii==_n_a_m_e
           When creating an ELF executable or shared object, call NAME when
           the executable or shared object is unloaded, by setting DT_FINI to
           the address of the function.  By default, the linker uses "_fini"
           as the function to call.

       --gg  Ignored.  Provided for compatibility with other tools.

       --GG _v_a_l_u_e
       ----ggppssiizzee==_v_a_l_u_e
           Set the maximum size of objects to be optimized using the GP
           register to _s_i_z_e.  This is only meaningful for object file formats
           such as MIPS ELF that support putting large and small objects into
           different sections.  This is ignored for other object file formats.

       --hh _n_a_m_e
       --ssoonnaammee==_n_a_m_e
           When creating an ELF shared object, set the internal DT_SONAME
           field to the specified name.  When an executable is linked with a
           shared object which has a DT_SONAME field, then when the executable
           is run the dynamic linker will attempt to load the shared object
           specified by the DT_SONAME field rather than the using the file
           name given to the linker.

       --ii  Perform an incremental link (same as option --rr).

       --iinniitt==_n_a_m_e
           When creating an ELF executable or shared object, call NAME when
           the executable or shared object is loaded, by setting DT_INIT to
           the address of the function.  By default, the linker uses "_init"
           as the function to call.

       --ll _n_a_m_e_s_p_e_c
       ----lliibbrraarryy==_n_a_m_e_s_p_e_c
           Add the archive or object file specified by _n_a_m_e_s_p_e_c to the list of
           files to link.  This option may be used any number of times.  If
           _n_a_m_e_s_p_e_c is of the form _:_f_i_l_e_n_a_m_e, lldd will search the library path
           for a file called _f_i_l_e_n_a_m_e, otherwise it will search the library
           path for a file called _l_i_b_n_a_m_e_s_p_e_c_._a.

           On systems which support shared libraries, lldd may also search for
           files other than _l_i_b_n_a_m_e_s_p_e_c_._a.  Specifically, on ELF and SunOS
           systems, lldd will search a directory for a library called
           _l_i_b_n_a_m_e_s_p_e_c_._s_o before searching for one called _l_i_b_n_a_m_e_s_p_e_c_._a.  (By
           convention, a ".so" extension indicates a shared library.)  Note
           that this behavior does not apply to _:_f_i_l_e_n_a_m_e, which always
           specifies a file called _f_i_l_e_n_a_m_e.

           The linker will search an archive only once, at the location where
           it is specified on the command line.  If the archive defines a
           symbol which was undefined in some object which appeared before the
           archive on the command line, the linker will include the
           appropriate file(s) from the archive.  However, an undefined symbol
           in an object appearing later on the command line will not cause the
           linker to search the archive again.

           See the --(( option for a way to force the linker to search archives
           multiple times.

           You may list the same archive multiple times on the command line.

           This type of archive searching is standard for Unix linkers.
           However, if you are using lldd on AIX, note that it is different from
           the behaviour of the AIX linker.

       --LL _s_e_a_r_c_h_d_i_r
       ----lliibbrraarryy--ppaatthh==_s_e_a_r_c_h_d_i_r
           Add path _s_e_a_r_c_h_d_i_r to the list of paths that lldd will search for
           archive libraries and lldd control scripts.  You may use this option
           any number of times.  The directories are searched in the order in
           which they are specified on the command line.  Directories
           specified on the command line are searched before the default
           directories.  All --LL options apply to all --ll options, regardless of
           the order in which the options appear.  --LL options do not affect
           how lldd searches for a linker script unless --TT option is specified.

           If _s_e_a_r_c_h_d_i_r begins with "=" or $SYSROOT, then this prefix will be
           replaced by the _s_y_s_r_o_o_t _p_r_e_f_i_x, controlled by the ----ssyyssrroooott option,
           or specified when the linker is configured.

           The default set of paths searched (without being specified with --LL)
           depends on which emulation mode lldd is using, and in some cases also
           on how it was configured.

           The paths can also be specified in a link script with the
           "SEARCH_DIR" command.  Directories specified this way are searched
           at the point in which the linker script appears in the command
           line.

       --mm _e_m_u_l_a_t_i_o_n
           Emulate the _e_m_u_l_a_t_i_o_n linker.  You can list the available
           emulations with the ----vveerrbboossee or --VV options.

           If the --mm option is not used, the emulation is taken from the
           "LDEMULATION" environment variable, if that is defined.

           Otherwise, the default emulation depends upon how the linker was
           configured.

       --MM
       ----pprriinntt--mmaapp
           Print a link map to the standard output.  A link map provides
           information about the link, including the following:

           +o   Where object files are mapped into memory.

           +o   How common symbols are allocated.

           +o   All archive members included in the link, with a mention of the
               symbol which caused the archive member to be brought in.

           +o   The values assigned to symbols.

               Note - symbols whose values are computed by an expression which
               involves a reference to a previous value of the same symbol may
               not have correct result displayed in the link map.  This is
               because the linker discards intermediate results and only
               retains the final value of an expression.  Under such
               circumstances the linker will display the final value enclosed
               by square brackets.  Thus for example a linker script
               containing:

                          foo = 1
                          foo = foo * 4
                          foo = foo + 8

               will produce the following output in the link map if the --MM
               option is used:

                          0x00000001                foo = 0x1
                          [0x0000000c]                foo = (foo * 0x4)
                          [0x0000000c]                foo = (foo + 0x8)

               See EExxpprreessssiioonnss for more information about expressions in
               linker scripts.

           +o   How GNU properties are merged.

               When the linker merges input .note.gnu.property sections into
               one output .note.gnu.property section, some properties are
               removed or updated.  These actions are reported in the link
               map.  For example:

                       Removed property 0xc0000002 to merge foo.o (0x1) and bar.o (not found)

               This indicates that property 0xc0000002 is removed from output
               when merging properties in  _f_o_o_._o, whose property 0xc0000002
               value is 0x1, and _b_a_r_._o, which doesn't have property
               0xc0000002.

                       Updated property 0xc0010001 (0x1) to merge foo.o (0x1) and bar.o (0x1)

               This indicates that property 0xc0010001 value is updated to 0x1
               in output when merging properties in  _f_o_o_._o, whose 0xc0010001
               property value is 0x1, and _b_a_r_._o, whose 0xc0010001 property
               value is 0x1.

       ----pprriinntt--mmaapp--ddiissccaarrddeedd
       ----nnoo--pprriinntt--mmaapp--ddiissccaarrddeedd
           Print (or do not print) the list of discarded and garbage collected
           sections in the link map.  Enabled by default.

       --nn
       ----nnmmaaggiicc
           Turn off page alignment of sections, and disable linking against
           shared libraries.  If the output format supports Unix style magic
           numbers, mark the output as "NMAGIC".

       --NN
       ----oommaaggiicc
           Set the text and data sections to be readable and writable.  Also,
           do not page-align the data segment, and disable linking against
           shared libraries.  If the output format supports Unix style magic
           numbers, mark the output as "OMAGIC". Note: Although a writable
           text section is allowed for PE-COFF targets, it does not conform to
           the format specification published by Microsoft.

       ----nnoo--oommaaggiicc
           This option negates most of the effects of the --NN option.  It sets
           the text section to be read-only, and forces the data segment to be
           page-aligned.  Note - this option does not enable linking against
           shared libraries.  Use --BBddyynnaammiicc for this.

       --oo _o_u_t_p_u_t
       ----oouuttppuutt==_o_u_t_p_u_t
           Use _o_u_t_p_u_t as the name for the program produced by lldd; if this
           option is not specified, the name _a_._o_u_t is used by default.  The
           script command "OUTPUT" can also specify the output file name.

       ----ddeeppeennddeennccyy--ffiillee==_d_e_p_f_i_l_e
           Write a _d_e_p_e_n_d_e_n_c_y _f_i_l_e to _d_e_p_f_i_l_e.  This file contains a rule
           suitable for "make" describing the output file and all the input
           files that were read to produce it.  The output is similar to the
           compiler's output with --MM --MMPP.  Note that there is no option like
           the compiler's --MMMM, to exclude "system files" (which is not a well-
           specified concept in the linker, unlike "system headers" in the
           compiler).  So the output from ----ddeeppeennddeennccyy--ffiillee is always specific
           to the exact state of the installation where it was produced, and
           should not be copied into distributed makefiles without careful
           editing.

       --OO _l_e_v_e_l
           If _l_e_v_e_l is a numeric values greater than zero lldd optimizes the
           output.  This might take significantly longer and therefore
           probably should only be enabled for the final binary.  At the
           moment this option only affects ELF shared library generation.
           Future releases of the linker may make more use of this option.
           Also currently there is no difference in the linker's behaviour for
           different non-zero values of this option.  Again this may change
           with future releases.

       --pplluuggiinn _n_a_m_e
           Involve a plugin in the linking process.  The _n_a_m_e parameter is the
           absolute filename of the plugin.  Usually this parameter is
           automatically added by the complier, when using link time
           optimization, but users can also add their own plugins if they so
           wish.

           Note that the location of the compiler originated plugins is
           different from the place where the aarr, nnmm and rraannlliibb programs
           search for their plugins.  In order for those commands to make use
           of a compiler based plugin it must first be copied into the
           _$_{_l_i_b_d_i_r_}_/_b_f_d_-_p_l_u_g_i_n_s directory.  All gcc based linker plugins are
           backward compatible, so it is sufficient to just copy in the newest
           one.

       ----ppuusshh--ssttaattee
           The ----ppuusshh--ssttaattee allows to preserve the current state of the flags
           which govern the input file handling so that they can all be
           restored with one corresponding ----ppoopp--ssttaattee option.

           The option which are covered are: --BBddyynnaammiicc, --BBssttaattiicc, --ddnn, --ddyy,
           --ccaallll__sshhaarreedd, --nnoonn__sshhaarreedd, --ssttaattiicc, --NN, --nn, ----wwhhoollee--aarrcchhiivvee,
           ----nnoo--wwhhoollee--aarrcchhiivvee, --rr, --UUrr, ----ccooppyy--ddtt--nneeeeddeedd--eennttrriieess,
           ----nnoo--ccooppyy--ddtt--nneeeeddeedd--eennttrriieess, ----aass--nneeeeddeedd, ----nnoo--aass--nneeeeddeedd, and --aa.

           One target for this option are specifications for _p_k_g_-_c_o_n_f_i_g.  When
           used with the ----lliibbss option all possibly needed libraries are
           listed and then possibly linked with all the time.  It is better to
           return something as follows:

                   -Wl,--push-state,--as-needed -libone -libtwo -Wl,--pop-state

       ----ppoopp--ssttaattee
           Undoes the effect of --push-state, restores the previous values of
           the flags governing input file handling.

       --qq
       ----eemmiitt--rreellooccss
           Leave relocation sections and contents in fully linked executables.
           Post link analysis and optimization tools may need this information
           in order to perform correct modifications of executables.  This
           results in larger executables.

           This option is currently only supported on ELF platforms.

       ----ffoorrccee--ddyynnaammiicc
           Force the output file to have dynamic sections.  This option is
           specific to VxWorks targets.

       --rr
       ----rreellooccaattaabbllee
           Generate relocatable output---i.e., generate an output file that
           can in turn serve as input to lldd.  This is often called _p_a_r_t_i_a_l
           _l_i_n_k_i_n_g.  As a side effect, in environments that support standard
           Unix magic numbers, this option also sets the output file's magic
           number to "OMAGIC".  If this option is not specified, an absolute
           file is produced.  When linking C++ programs, this option _w_i_l_l _n_o_t
           resolve references to constructors; to do that, use --UUrr.

           When an input file does not have the same format as the output
           file, partial linking is only supported if that input file does not
           contain any relocations.  Different output formats can have further
           restrictions; for example some "a.out"-based formats do not support
           partial linking with input files in other formats at all.

           This option does the same thing as --ii.

       --RR _f_i_l_e_n_a_m_e
       ----jjuusstt--ssyymmbboollss==_f_i_l_e_n_a_m_e
           Read symbol names and their addresses from _f_i_l_e_n_a_m_e, but do not
           relocate it or include it in the output.  This allows your output
           file to refer symbolically to absolute locations of memory defined
           in other programs.  You may use this option more than once.

           For compatibility with other ELF linkers, if the --RR option is
           followed by a directory name, rather than a file name, it is
           treated as the --rrppaatthh option.

       --ss
       ----ssttrriipp--aallll
           Omit all symbol information from the output file.

       --SS
       ----ssttrriipp--ddeebbuugg
           Omit debugger symbol information (but not all symbols) from the
           output file.

       ----ssttrriipp--ddiissccaarrddeedd
       ----nnoo--ssttrriipp--ddiissccaarrddeedd
           Omit (or do not omit) global symbols defined in discarded sections.
           Enabled by default.

       --tt
       ----ttrraaccee
           Print the names of the input files as lldd processes them.  If --tt is
           given twice then members within archives are also printed.  --tt
           output is useful to generate a list of all the object files and
           scripts involved in linking, for example, when packaging files for
           a linker bug report.

       --TT _s_c_r_i_p_t_f_i_l_e
       ----ssccrriipptt==_s_c_r_i_p_t_f_i_l_e
           Use _s_c_r_i_p_t_f_i_l_e as the linker script.  This script replaces lldd's
           default linker script (rather than adding to it), so _c_o_m_m_a_n_d_f_i_l_e
           must specify everything necessary to describe the output file.
           If _s_c_r_i_p_t_f_i_l_e does not exist in the current directory, "ld" looks
           for it in the directories specified by any preceding --LL options.
           Multiple --TT options accumulate.

       --ddTT _s_c_r_i_p_t_f_i_l_e
       ----ddeeffaauulltt--ssccrriipptt==_s_c_r_i_p_t_f_i_l_e
           Use _s_c_r_i_p_t_f_i_l_e as the default linker script.

           This option is similar to the ----ssccrriipptt option except that
           processing of the script is delayed until after the rest of the
           command line has been processed.  This allows options placed after
           the ----ddeeffaauulltt--ssccrriipptt option on the command line to affect the
           behaviour of the linker script, which can be important when the
           linker command line cannot be directly controlled by the user.  (eg
           because the command line is being constructed by another tool, such
           as ggcccc).

       --uu _s_y_m_b_o_l
       ----uunnddeeffiinneedd==_s_y_m_b_o_l
           Force _s_y_m_b_o_l to be entered in the output file as an undefined
           symbol.  Doing this may, for example, trigger linking of additional
           modules from standard libraries.  --uu may be repeated with different
           option arguments to enter additional undefined symbols.  This
           option is equivalent to the "EXTERN" linker script command.

           If this option is being used to force additional modules to be
           pulled into the link, and if it is an error for the symbol to
           remain undefined, then the option ----rreeqquuiirree--ddeeffiinneedd should be used
           instead.

       ----rreeqquuiirree--ddeeffiinneedd==_s_y_m_b_o_l
           Require that _s_y_m_b_o_l is defined in the output file.  This option is
           the same as option ----uunnddeeffiinneedd except that if _s_y_m_b_o_l is not defined
           in the output file then the linker will issue an error and exit.
           The same effect can be achieved in a linker script by using
           "EXTERN", "ASSERT" and "DEFINED" together.  This option can be used
           multiple times to require additional symbols.

       --UUrr For anything other than C++ programs, this option is equivalent to
           --rr: it generates relocatable output---i.e., an output file that can
           in turn serve as input to lldd.  When linking C++ programs, --UUrr _d_o_e_s
           resolve references to constructors, unlike --rr.  It does not work to
           use --UUrr on files that were themselves linked with --UUrr; once the
           constructor table has been built, it cannot be added to.  Use --UUrr
           only for the last partial link, and --rr for the others.

       ----oorrpphhaann--hhaannddlliinngg==_M_O_D_E
           Control how orphan sections are handled.  An orphan section is one
           not specifically mentioned in a linker script.

           _M_O_D_E can have any of the following values:

           "place"
               Orphan sections are placed into a suitable output section
               following the strategy described in OOrrpphhaann SSeeccttiioonnss.  The
               option ----uunniiqquuee also affects how sections are placed.

           "discard"
               All orphan sections are discarded, by placing them in the
               //DDIISSCCAARRDD// section.

           "warn"
               The linker will place the orphan section as for "place" and
               also issue a warning.

           "error"
               The linker will exit with an error if any orphan section is
               found.

           The default if ----oorrpphhaann--hhaannddlliinngg is not given is "place".

       ----uunniiqquuee[[==_S_E_C_T_I_O_N]]
           Creates a separate output section for every input section matching
           _S_E_C_T_I_O_N, or if the optional wildcard _S_E_C_T_I_O_N argument is missing,
           for every orphan input section.  An orphan section is one not
           specifically mentioned in a linker script.  You may use this option
           multiple times on the command line;  It prevents the normal merging
           of input sections with the same name, overriding output section
           assignments in a linker script.

       --vv
       ----vveerrssiioonn
       --VV  Display the version number for lldd.  The --VV option also lists the
           supported emulations.

       --xx
       ----ddiissccaarrdd--aallll
           Delete all local symbols.

       --XX
       ----ddiissccaarrdd--llooccaallss
           Delete all temporary local symbols.  (These symbols start with
           system-specific local label prefixes, typically ..LL for ELF systems
           or LL for traditional a.out systems.)

       --yy _s_y_m_b_o_l
       ----ttrraaccee--ssyymmbbooll==_s_y_m_b_o_l
           Print the name of each linked file in which _s_y_m_b_o_l appears.  This
           option may be given any number of times.  On many systems it is
           necessary to prepend an underscore.

           This option is useful when you have an undefined symbol in your
           link but don't know where the reference is coming from.

       --YY _p_a_t_h
           Add _p_a_t_h to the default library search path.  This option exists
           for Solaris compatibility.

       --zz _k_e_y_w_o_r_d
           The recognized keywords are:

           bbnnddpplltt
               Always generate BND prefix in PLT entries. Supported for
               Linux/x86_64.

           ccaallll--nnoopp==pprreeffiixx--aaddddrr
           ccaallll--nnoopp==ssuuffffiixx--nnoopp
           ccaallll--nnoopp==pprreeffiixx--_b_y_t_e
           ccaallll--nnoopp==ssuuffffiixx--_b_y_t_e
               Specify the 1-byte "NOP" padding when transforming indirect
               call to a locally defined function, foo, via its GOT slot.
               ccaallll--nnoopp==pprreeffiixx--aaddddrr generates "0x67 call foo".
               ccaallll--nnoopp==ssuuffffiixx--nnoopp generates "call foo 0x90".
               ccaallll--nnoopp==pprreeffiixx--_b_y_t_e generates "_b_y_t_e _c_a_l_l _f_o_o_".
               ccaallll--nnoopp==ssuuffffiixx--_b_y_t_e generates "call foo _b_y_t_e_".  Supported for
               i386 and x86_64.

           cceett--rreeppoorrtt==nnoonnee
           cceett--rreeppoorrtt==wwaarrnniinngg
           cceett--rreeppoorrtt==eerrrroorr
               Specify how to report the missing
               GNU_PROPERTY_X86_FEATURE_1_IBT and
               GNU_PROPERTY_X86_FEATURE_1_SHSTK properties in input
               .note.gnu.property section.  cceett--rreeppoorrtt==nnoonnee, which is the
               default, will make the linker not report missing properties in
               input files.  cceett--rreeppoorrtt==wwaarrnniinngg will make the linker issue a
               warning for missing properties in input files.
               cceett--rreeppoorrtt==eerrrroorr will make the linker issue an error for
               missing properties in input files.  Note that iibbtt will turn off
               the missing GNU_PROPERTY_X86_FEATURE_1_IBT property report and
               sshhssttkk will turn off the missing
               GNU_PROPERTY_X86_FEATURE_1_SHSTK property report.  Supported
               for Linux/i386 and Linux/x86_64.

           ccoommbbrreelloocc
           nnooccoommbbrreelloocc
               Combine multiple dynamic relocation sections and sort to
               improve dynamic symbol lookup caching.  Do not do this if
               nnooccoommbbrreelloocc.

           ccoommmmoonn
           nnooccoommmmoonn
               Generate common symbols with STT_COMMON type during a
               relocatable link.  Use STT_OBJECT type if nnooccoommmmoonn.

           ccoommmmoonn--ppaaggee--ssiizzee==_v_a_l_u_e
               Set the page size most commonly used to _v_a_l_u_e.  Memory image
               layout will be optimized to minimize memory pages if the system
               is using pages of this size.

           ddeeffss
               Report unresolved symbol references from regular object files.
               This is done even if the linker is creating a non-symbolic
               shared library.  This option is the inverse of --zz uunnddeeffss.

           ddyynnaammiicc--uunnddeeffiinneedd--wweeaakk
           nnooddyynnaammiicc--uunnddeeffiinneedd--wweeaakk
               Make undefined weak symbols dynamic when building a dynamic
               object, if they are referenced from a regular object file and
               not forced local by symbol visibility or versioning.  Do not
               make them dynamic if nnooddyynnaammiicc--uunnddeeffiinneedd--wweeaakk.  If neither
               option is given, a target may default to either option being in
               force, or make some other selection of undefined weak symbols
               dynamic.  Not all targets support these options.

           eexxeeccssttaacckk
               Marks the object as requiring executable stack.

           gglloobbaall
               This option is only meaningful when building a shared object.
               It makes the symbols defined by this shared object available
               for symbol resolution of subsequently loaded libraries.

           gglloobbaallaauuddiitt
               This option is only meaningful when building a dynamic
               executable.  This option marks the executable as requiring
               global auditing by setting the "DF_1_GLOBAUDIT" bit in the
               "DT_FLAGS_1" dynamic tag.  Global auditing requires that any
               auditing library defined via the ----ddeeppaauuddiitt or --PP command-line
               options be run for all dynamic objects loaded by the
               application.

           iibbttpplltt
               Generate Intel Indirect Branch Tracking (IBT) enabled PLT
               entries.  Supported for Linux/i386 and Linux/x86_64.

           iibbtt Generate GNU_PROPERTY_X86_FEATURE_1_IBT in .note.gnu.property
               section to indicate compatibility with IBT.  This also implies
               iibbttpplltt.  Supported for Linux/i386 and Linux/x86_64.

           iinniittffiirrsstt
               This option is only meaningful when building a shared object.
               It marks the object so that its runtime initialization will
               occur before the runtime initialization of any other objects
               brought into the process at the same time.  Similarly the
               runtime finalization of the object will occur after the runtime
               finalization of any other objects.

           iinntteerrppoossee
               Specify that the dynamic loader should modify its symbol search
               order so that symbols in this shared library interpose all
               other shared libraries not so marked.

           llaazzyy
               When generating an executable or shared library, mark it to
               tell the dynamic linker to defer function call resolution to
               the point when the function is called (lazy binding), rather
               than at load time.  Lazy binding is the default.

           llooaaddffllttrr
               Specify that the object's filters be processed immediately at
               runtime.

           mmaaxx--ppaaggee--ssiizzee==_v_a_l_u_e
               Set the maximum memory page size supported to _v_a_l_u_e.

           mmuullddeeffss
               Allow multiple definitions.

           nnooccooppyyrreelloocc
               Disable linker generated .dynbss variables used in place of
               variables defined in shared libraries.  May result in dynamic
               text relocations.

           nnooddeeffaauullttlliibb
               Specify that the dynamic loader search for dependencies of this
               object should ignore any default library search paths.

           nnooddeelleettee
               Specify that the object shouldn't be unloaded at runtime.

           nnooddllooppeenn
               Specify that the object is not available to "dlopen".

           nnoodduummpp
               Specify that the object can not be dumped by "dldump".

           nnooeexxeeccssttaacckk
               Marks the object as not requiring executable stack.

           nnooeexxtteerrnn--pprrootteecctteedd--ddaattaa
               Don't treat protected data symbols as external when building a
               shared library.  This option overrides the linker backend
               default.  It can be used to work around incorrect relocations
               against protected data symbols generated by compiler.  Updates
               on protected data symbols by another module aren't visible to
               the resulting shared library.  Supported for i386 and x86-64.

           nnoorreelloocc--oovveerrffllooww
               Disable relocation overflow check.  This can be used to disable
               relocation overflow check if there will be no dynamic
               relocation overflow at run-time.  Supported for x86_64.

           nnooww When generating an executable or shared library, mark it to
               tell the dynamic linker to resolve all symbols when the program
               is started, or when the shared library is loaded by dlopen,
               instead of deferring function call resolution to the point when
               the function is first called.

           oorriiggiinn
               Specify that the object requires $$OORRIIGGIINN handling in paths.

           rreellrroo
           nnoorreellrroo
               Create an ELF "PT_GNU_RELRO" segment header in the object.
               This specifies a memory segment that should be made read-only
               after relocation, if supported.  Specifying ccoommmmoonn--ppaaggee--ssiizzee
               smaller than the system page size will render this protection
               ineffective.  Don't create an ELF "PT_GNU_RELRO" segment if
               nnoorreellrroo.

           sseeppaarraattee--ccooddee
           nnoosseeppaarraattee--ccooddee
               Create separate code "PT_LOAD" segment header in the object.
               This specifies a memory segment that should contain only
               instructions and must be in wholly disjoint pages from any
               other data.  Don't create separate code "PT_LOAD" segment if
               nnoosseeppaarraattee--ccooddee is used.

           sshhssttkk
               Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK in .note.gnu.property
               section to indicate compatibility with Intel Shadow Stack.
               Supported for Linux/i386 and Linux/x86_64.

           ssttaacckk--ssiizzee==_v_a_l_u_e
               Specify a stack size for an ELF "PT_GNU_STACK" segment.
               Specifying zero will override any default non-zero sized
               "PT_GNU_STACK" segment creation.

           ssttaarrtt--ssttoopp--vviissiibbiilliittyy==_v_a_l_u_e
               Specify the ELF symbol visibility for synthesized
               "__start_SECNAME" and "__stop_SECNAME" symbols.  _v_a_l_u_e must be
               exactly ddeeffaauulltt, iinntteerrnnaall, hhiiddddeenn, or pprrootteecctteedd.  If no --zz
               ssttaarrtt--ssttoopp--vviissiibbiilliittyy option is given, pprrootteecctteedd is used for
               compatibility with historical practice.  However, it's highly
               recommended to use --zz ssttaarrtt--ssttoopp--vviissiibbiilliittyy==hhiiddddeenn in new
               programs and shared libraries so that these symbols are not
               exported between shared objects, which is not usually what's
               intended.

           tteexxtt
           nnootteexxtt
           tteexxttooffff
               Report an error if DT_TEXTREL is set, i.e., if the position-
               independent or shared object has dynamic relocations in read-
               only sections.  Don't report an error if nnootteexxtt or tteexxttooffff.

           uunnddeeffss
               Do not report unresolved symbol references from regular object
               files, either when creating an executable, or when creating a
               shared library.  This option is the inverse of --zz ddeeffss.

           Other keywords are ignored for Solaris compatibility.

       --(( _a_r_c_h_i_v_e_s --))
       ----ssttaarrtt--ggrroouupp _a_r_c_h_i_v_e_s ----eenndd--ggrroouupp
           The _a_r_c_h_i_v_e_s should be a list of archive files.  They may be either
           explicit file names, or --ll options.

           The specified archives are searched repeatedly until no new
           undefined references are created.  Normally, an archive is searched
           only once in the order that it is specified on the command line.
           If a symbol in that archive is needed to resolve an undefined
           symbol referred to by an object in an archive that appears later on
           the command line, the linker would not be able to resolve that
           reference.  By grouping the archives, they will all be searched
           repeatedly until all possible references are resolved.

           Using this option has a significant performance cost.  It is best
           to use it only when there are unavoidable circular references
           between two or more archives.

       ----aacccceepptt--uunnkknnoowwnn--iinnppuutt--aarrcchh
       ----nnoo--aacccceepptt--uunnkknnoowwnn--iinnppuutt--aarrcchh
           Tells the linker to accept input files whose architecture cannot be
           recognised.  The assumption is that the user knows what they are
           doing and deliberately wants to link in these unknown input files.
           This was the default behaviour of the linker, before release 2.14.
           The default behaviour from release 2.14 onwards is to reject such
           input files, and so the ----aacccceepptt--uunnkknnoowwnn--iinnppuutt--aarrcchh option has been
           added to restore the old behaviour.

       ----aass--nneeeeddeedd
       ----nnoo--aass--nneeeeddeedd
           This option affects ELF DT_NEEDED tags for dynamic libraries
           mentioned on the command line after the ----aass--nneeeeddeedd option.
           Normally the linker will add a DT_NEEDED tag for each dynamic
           library mentioned on the command line, regardless of whether the
           library is actually needed or not.  ----aass--nneeeeddeedd causes a DT_NEEDED
           tag to only be emitted for a library that _a_t _t_h_a_t _p_o_i_n_t _i_n _t_h_e _l_i_n_k
           satisfies a non-weak undefined symbol reference from a regular
           object file or, if the library is not found in the DT_NEEDED lists
           of other needed libraries, a non-weak undefined symbol reference
           from another needed dynamic library.  Object files or libraries
           appearing on the command line _a_f_t_e_r the library in question do not
           affect whether the library is seen as needed.  This is similar to
           the rules for extraction of object files from archives.
           ----nnoo--aass--nneeeeddeedd restores the default behaviour.

       ----aadddd--nneeeeddeedd
       ----nnoo--aadddd--nneeeeddeedd
           These two options have been deprecated because of the similarity of
           their names to the ----aass--nneeeeddeedd and ----nnoo--aass--nneeeeddeedd options.  They
           have been replaced by ----ccooppyy--ddtt--nneeeeddeedd--eennttrriieess and
           ----nnoo--ccooppyy--ddtt--nneeeeddeedd--eennttrriieess.

       --aasssseerrtt _k_e_y_w_o_r_d
           This option is ignored for SunOS compatibility.

       --BBddyynnaammiicc
       --ddyy
       --ccaallll__sshhaarreedd
           Link against dynamic libraries.  This is only meaningful on
           platforms for which shared libraries are supported.  This option is
           normally the default on such platforms.  The different variants of
           this option are for compatibility with various systems.  You may
           use this option multiple times on the command line: it affects
           library searching for --ll options which follow it.

       --BBggrroouupp
           Set the "DF_1_GROUP" flag in the "DT_FLAGS_1" entry in the dynamic
           section.  This causes the runtime linker to handle lookups in this
           object and its dependencies to be performed only inside the group.
           ----uunnrreessoollvveedd--ssyymmbboollss==rreeppoorrtt--aallll is implied.  This option is only
           meaningful on ELF platforms which support shared libraries.

       --BBssttaattiicc
       --ddnn
       --nnoonn__sshhaarreedd
       --ssttaattiicc
           Do not link against shared libraries.  This is only meaningful on
           platforms for which shared libraries are supported.  The different
           variants of this option are for compatibility with various systems.
           You may use this option multiple times on the command line: it
           affects library searching for --ll options which follow it.  This
           option also implies ----uunnrreessoollvveedd--ssyymmbboollss==rreeppoorrtt--aallll.  This option
           can be used with --sshhaarreedd.  Doing so means that a shared library is
           being created but that all of the library's external references
           must be resolved by pulling in entries from static libraries.

       --BBssyymmbboolliicc
           When creating a shared library, bind references to global symbols
           to the definition within the shared library, if any.  Normally, it
           is possible for a program linked against a shared library to
           override the definition within the shared library.  This option is
           only meaningful on ELF platforms which support shared libraries.

       --BBssyymmbboolliicc--ffuunnccttiioonnss
           When creating a shared library, bind references to global function
           symbols to the definition within the shared library, if any.  This
           option is only meaningful on ELF platforms which support shared
           libraries.

       ----ddyynnaammiicc--lliisstt==_d_y_n_a_m_i_c_-_l_i_s_t_-_f_i_l_e
           Specify the name of a dynamic list file to the linker.  This is
           typically used when creating shared libraries to specify a list of
           global symbols whose references shouldn't be bound to the
           definition within the shared library, or creating dynamically
           linked executables to specify a list of symbols which should be
           added to the symbol table in the executable.  This option is only
           meaningful on ELF platforms which support shared libraries.

           The format of the dynamic list is the same as the version node
           without scope and node name.  See VVEERRSSIIOONN for more information.

       ----ddyynnaammiicc--lliisstt--ddaattaa
           Include all global data symbols to the dynamic list.

       ----ddyynnaammiicc--lliisstt--ccpppp--nneeww
           Provide the builtin dynamic list for C++ operator new and delete.
           It is mainly useful for building shared libstdc++.

       ----ddyynnaammiicc--lliisstt--ccpppp--ttyyppeeiinnffoo
           Provide the builtin dynamic list for C++ runtime type
           identification.

       ----cchheecckk--sseeccttiioonnss
       ----nnoo--cchheecckk--sseeccttiioonnss
           Asks the linker _n_o_t to check section addresses after they have been
           assigned to see if there are any overlaps.  Normally the linker
           will perform this check, and if it finds any overlaps it will
           produce suitable error messages.  The linker does know about, and
           does make allowances for sections in overlays.  The default
           behaviour can be restored by using the command-line switch
           ----cchheecckk--sseeccttiioonnss.  Section overlap is not usually checked for
           relocatable links.  You can force checking in that case by using
           the ----cchheecckk--sseeccttiioonnss option.

       ----ccooppyy--ddtt--nneeeeddeedd--eennttrriieess
       ----nnoo--ccooppyy--ddtt--nneeeeddeedd--eennttrriieess
           This option affects the treatment of dynamic libraries referred to
           by DT_NEEDED tags _i_n_s_i_d_e ELF dynamic libraries mentioned on the
           command line.  Normally the linker won't add a DT_NEEDED tag to the
           output binary for each library mentioned in a DT_NEEDED tag in an
           input dynamic library.  With ----ccooppyy--ddtt--nneeeeddeedd--eennttrriieess specified on
           the command line however any dynamic libraries that follow it will
           have their DT_NEEDED entries added.  The default behaviour can be
           restored with ----nnoo--ccooppyy--ddtt--nneeeeddeedd--eennttrriieess.

           This option also has an effect on the resolution of symbols in
           dynamic libraries.  With ----ccooppyy--ddtt--nneeeeddeedd--eennttrriieess dynamic libraries
           mentioned on the command line will be recursively searched,
           following their DT_NEEDED tags to other libraries, in order to
           resolve symbols required by the output binary.  With the default
           setting however the searching of dynamic libraries that follow it
           will stop with the dynamic library itself.  No DT_NEEDED links will
           be traversed to resolve symbols.

       ----ccrreeff
           Output a cross reference table.  If a linker map file is being
           generated, the cross reference table is printed to the map file.
           Otherwise, it is printed on the standard output.

           The format of the table is intentionally simple, so that it may be
           easily processed by a script if necessary.  The symbols are printed
           out, sorted by name.  For each symbol, a list of file names is
           given.  If the symbol is defined, the first file listed is the
           location of the definition.  If the symbol is defined as a common
           value then any files where this happens appear next.  Finally any
           files that reference the symbol are listed.

       ----nnoo--ddeeffiinnee--ccoommmmoonn
           This option inhibits the assignment of addresses to common symbols.
           The script command "INHIBIT_COMMON_ALLOCATION" has the same effect.

           The ----nnoo--ddeeffiinnee--ccoommmmoonn option allows decoupling the decision to
           assign addresses to Common symbols from the choice of the output
           file type; otherwise a non-Relocatable output type forces assigning
           addresses to Common symbols.  Using ----nnoo--ddeeffiinnee--ccoommmmoonn allows
           Common symbols that are referenced from a shared library to be
           assigned addresses only in the main program.  This eliminates the
           unused duplicate space in the shared library, and also prevents any
           possible confusion over resolving to the wrong duplicate when there
           are many dynamic modules with specialized search paths for runtime
           symbol resolution.

       ----ffoorrccee--ggrroouupp--aallllooccaattiioonn
           This option causes the linker to place section group members like
           normal input sections, and to delete the section groups.  This is
           the default behaviour for a final link but this option can be used
           to change the behaviour of a relocatable link (--rr).  The script
           command "FORCE_GROUP_ALLOCATION" has the same effect.

       ----ddeeffssyymm==_s_y_m_b_o_l==_e_x_p_r_e_s_s_i_o_n
           Create a global symbol in the output file, containing the absolute
           address given by _e_x_p_r_e_s_s_i_o_n.  You may use this option as many times
           as necessary to define multiple symbols in the command line.  A
           limited form of arithmetic is supported for the _e_x_p_r_e_s_s_i_o_n in this
           context: you may give a hexadecimal constant or the name of an
           existing symbol, or use "+" and "-" to add or subtract hexadecimal
           constants or symbols.  If you need more elaborate expressions,
           consider using the linker command language from a script.  _N_o_t_e_:
           there should be no white space between _s_y_m_b_o_l, the equals sign
           ("=="), and _e_x_p_r_e_s_s_i_o_n.

       ----ddeemmaannggllee[[==_s_t_y_l_e]]
       ----nnoo--ddeemmaannggllee
           These options control whether to demangle symbol names in error
           messages and other output.  When the linker is told to demangle, it
           tries to present symbol names in a readable fashion: it strips
           leading underscores if they are used by the object file format, and
           converts C++ mangled symbol names into user readable names.
           Different compilers have different mangling styles.  The optional
           demangling style argument can be used to choose an appropriate
           demangling style for your compiler.  The linker will demangle by
           default unless the environment variable CCOOLLLLEECCTT__NNOO__DDEEMMAANNGGLLEE is set.
           These options may be used to override the default.

       --II_f_i_l_e
       ----ddyynnaammiicc--lliinnkkeerr==_f_i_l_e
           Set the name of the dynamic linker.  This is only meaningful when
           generating dynamically linked ELF executables.  The default dynamic
           linker is normally correct; don't use this unless you know what you
           are doing.

       ----nnoo--ddyynnaammiicc--lliinnkkeerr
           When producing an executable file, omit the request for a dynamic
           linker to be used at load-time.  This is only meaningful for ELF
           executables that contain dynamic relocations, and usually requires
           entry point code that is capable of processing these relocations.

       ----eemmbbeeddddeedd--rreellooccss
           This option is similar to the ----eemmiitt--rreellooccss option except that the
           relocs are stored in a target-specific section.  This option is
           only supported by the BBFFIINN, CCRR1166 and _M_6_8_K targets.

       ----ddiissaabbllee--mmuullttiippllee--aabbss--ddeeffss
           Do not allow multiple definitions with symbols included in filename
           invoked by -R or --just-symbols

       ----ffaattaall--wwaarrnniinnggss
       ----nnoo--ffaattaall--wwaarrnniinnggss
           Treat all warnings as errors.  The default behaviour can be
           restored with the option ----nnoo--ffaattaall--wwaarrnniinnggss.

       ----ffoorrccee--eexxee--ssuuffffiixx
           Make sure that an output file has a .exe suffix.

           If a successfully built fully linked output file does not have a
           ".exe" or ".dll" suffix, this option forces the linker to copy the
           output file to one of the same name with a ".exe" suffix. This
           option is useful when using unmodified Unix makefiles on a
           Microsoft Windows host, since some versions of Windows won't run an
           image unless it ends in a ".exe" suffix.

       ----ggcc--sseeccttiioonnss
       ----nnoo--ggcc--sseeccttiioonnss
           Enable garbage collection of unused input sections.  It is ignored
           on targets that do not support this option.  The default behaviour
           (of not performing this garbage collection) can be restored by
           specifying ----nnoo--ggcc--sseeccttiioonnss on the command line.  Note that garbage
           collection for COFF and PE format targets is supported, but the
           implementation is currently considered to be experimental.

           ----ggcc--sseeccttiioonnss decides which input sections are used by examining
           symbols and relocations.  The section containing the entry symbol
           and all sections containing symbols undefined on the command-line
           will be kept, as will sections containing symbols referenced by
           dynamic objects.  Note that when building shared libraries, the
           linker must assume that any visible symbol is referenced.  Once
           this initial set of sections has been determined, the linker
           recursively marks as used any section referenced by their
           relocations.  See ----eennttrryy, ----uunnddeeffiinneedd, and ----ggcc--kkeeeepp--eexxppoorrtteedd.

           This option can be set when doing a partial link (enabled with
           option --rr).  In this case the root of symbols kept must be
           explicitly specified either by one of the options ----eennttrryy,
           ----uunnddeeffiinneedd, or ----ggcc--kkeeeepp--eexxppoorrtteedd or by a "ENTRY" command in the
           linker script.

       ----pprriinntt--ggcc--sseeccttiioonnss
       ----nnoo--pprriinntt--ggcc--sseeccttiioonnss
           List all sections removed by garbage collection.  The listing is
           printed on stderr.  This option is only effective if garbage
           collection has been enabled via the ----ggcc--sseeccttiioonnss) option.  The
           default behaviour (of not listing the sections that are removed)
           can be restored by specifying ----nnoo--pprriinntt--ggcc--sseeccttiioonnss on the command
           line.

       ----ggcc--kkeeeepp--eexxppoorrtteedd
           When ----ggcc--sseeccttiioonnss is enabled, this option prevents garbage
           collection of unused input sections that contain global symbols
           having default or protected visibility.  This option is intended to
           be used for executables where unreferenced sections would otherwise
           be garbage collected regardless of the external visibility of
           contained symbols.  Note that this option has no effect when
           linking shared objects since it is already the default behaviour.
           This option is only supported for ELF format targets.

       ----pprriinntt--oouuttppuutt--ffoorrmmaatt
           Print the name of the default output format (perhaps influenced by
           other command-line options).  This is the string that would appear
           in an "OUTPUT_FORMAT" linker script command.

       ----pprriinntt--mmeemmoorryy--uussaaggee
           Print used size, total size and used size of memory regions created
           with the MMEEMMOORRYY command.  This is useful on embedded targets to
           have a quick view of amount of free memory.  The format of the
           output has one headline and one line per region.  It is both human
           readable and easily parsable by tools.  Here is an example of an
           output:

                   Memory region         Used Size  Region Size  %age Used
                                ROM:        256 KB         1 MB     25.00%
                                RAM:          32 B         2 GB      0.00%

       ----hheellpp
           Print a summary of the command-line options on the standard output
           and exit.

       ----ttaarrggeett--hheellpp
           Print a summary of all target-specific options on the standard
           output and exit.

       --MMaapp==_m_a_p_f_i_l_e
           Print a link map to the file _m_a_p_f_i_l_e.  See the description of the
           --MM option, above.  Specifying a directory as _m_a_p_f_i_l_e causes the
           linker map to be written into a file inside the directory.  The
           name of the file is based upon the _o_u_t_p_u_t filename with ".map"
           appended.

       ----nnoo--kkeeeepp--mmeemmoorryy
           lldd normally optimizes for speed over memory usage by caching the
           symbol tables of input files in memory.  This option tells lldd to
           instead optimize for memory usage, by rereading the symbol tables
           as necessary.  This may be required if lldd runs out of memory space
           while linking a large executable.

       ----nnoo--uunnddeeffiinneedd
       --zz ddeeffss
           Report unresolved symbol references from regular object files.
           This is done even if the linker is creating a non-symbolic shared
           library.  The switch ----[[nnoo--]]aallllooww--sshhlliibb--uunnddeeffiinneedd controls the
           behaviour for reporting unresolved references found in shared
           libraries being linked in.

           The effects of this option can be reverted by using "-z undefs".

       ----aallllooww--mmuullttiippllee--ddeeffiinniittiioonn
       --zz mmuullddeeffss
           Normally when a symbol is defined multiple times, the linker will
           report a fatal error. These options allow multiple definitions and
           the first definition will be used.

       ----aallllooww--sshhlliibb--uunnddeeffiinneedd
       ----nnoo--aallllooww--sshhlliibb--uunnddeeffiinneedd
           Allows or disallows undefined symbols in shared libraries.  This
           switch is similar to ----nnoo--uunnddeeffiinneedd except that it determines the
           behaviour when the undefined symbols are in a shared library rather
           than a regular object file.  It does not affect how undefined
           symbols in regular object files are handled.

           The default behaviour is to report errors for any undefined symbols
           referenced in shared libraries if the linker is being used to
           create an executable, but to allow them if the linker is being used
           to create a shared library.

           The reasons for allowing undefined symbol references in shared
           libraries specified at link time are that:

           +o   A shared library specified at link time may not be the same as
               the one that is available at load time, so the symbol might
               actually be resolvable at load time.

           +o   There are some operating systems, eg BeOS and HPPA, where
               undefined symbols in shared libraries are normal.

               The BeOS kernel for example patches shared libraries at load
               time to select whichever function is most appropriate for the
               current architecture.  This is used, for example, to
               dynamically select an appropriate memset function.

       ----nnoo--uunnddeeffiinneedd--vveerrssiioonn
           Normally when a symbol has an undefined version, the linker will
           ignore it. This option disallows symbols with undefined version and
           a fatal error will be issued instead.

       ----ddeeffaauulltt--ssyymmvveerr
           Create and use a default symbol version (the soname) for
           unversioned exported symbols.

       ----ddeeffaauulltt--iimmppoorrtteedd--ssyymmvveerr
           Create and use a default symbol version (the soname) for
           unversioned imported symbols.

       ----nnoo--wwaarrnn--mmiissmmaattcchh
           Normally lldd will give an error if you try to link together input
           files that are mismatched for some reason, perhaps because they
           have been compiled for different processors or for different
           endiannesses.  This option tells lldd that it should silently permit
           such possible errors.  This option should only be used with care,
           in cases when you have taken some special action that ensures that
           the linker errors are inappropriate.

       ----nnoo--wwaarrnn--sseeaarrcchh--mmiissmmaattcchh
           Normally lldd will give a warning if it finds an incompatible library
           during a library search.  This option silences the warning.

       ----nnoo--wwhhoollee--aarrcchhiivvee
           Turn off the effect of the ----wwhhoollee--aarrcchhiivvee option for subsequent
           archive files.

       ----nnooiinnhhiibbiitt--eexxeecc
           Retain the executable output file whenever it is still usable.
           Normally, the linker will not produce an output file if it
           encounters errors during the link process; it exits without writing
           an output file when it issues any error whatsoever.

       --nnoossttddlliibb
           Only search library directories explicitly specified on the command
           line.  Library directories specified in linker scripts (including
           linker scripts specified on the command line) are ignored.

       ----ooffoorrmmaatt==_o_u_t_p_u_t_-_f_o_r_m_a_t
           lldd may be configured to support more than one kind of object file.
           If your lldd is configured this way, you can use the ----ooffoorrmmaatt option
           to specify the binary format for the output object file.  Even when
           lldd is configured to support alternative object formats, you don't
           usually need to specify this, as lldd should be configured to produce
           as a default output format the most usual format on each machine.
           _o_u_t_p_u_t_-_f_o_r_m_a_t is a text string, the name of a particular format
           supported by the BFD libraries.  (You can list the available binary
           formats with oobbjjdduummpp --ii.)  The script command "OUTPUT_FORMAT" can
           also specify the output format, but this option overrides it.

       ----oouutt--iimmpplliibb _f_i_l_e
           Create an import library in _f_i_l_e corresponding to the executable
           the linker is generating (eg. a DLL or ELF program).  This import
           library (which should be called "*.dll.a" or "*.a" for DLLs) may be
           used to link clients against the generated executable; this
           behaviour makes it possible to skip a separate import library
           creation step (eg. "dlltool" for DLLs).  This option is only
           available for the i386 PE and ELF targetted ports of the linker.

       --ppiiee
       ----ppiicc--eexxeeccuuttaabbllee
           Create a position independent executable.  This is currently only
           supported on ELF platforms.  Position independent executables are
           similar to shared libraries in that they are relocated by the
           dynamic linker to the virtual address the OS chooses for them
           (which can vary between invocations).  Like normal dynamically
           linked executables they can be executed and symbols defined in the
           executable cannot be overridden by shared libraries.

       --qqmmaaggiicc
           This option is ignored for Linux compatibility.

       --QQyy This option is ignored for SVR4 compatibility.

       ----rreellaaxx
       ----nnoo--rreellaaxx
           An option with machine dependent effects.  This option is only
           supported on a few targets.

           On some platforms the ----rreellaaxx option performs target-specific,
           global optimizations that become possible when the linker resolves
           addressing in the program, such as relaxing address modes,
           synthesizing new instructions, selecting shorter version of current
           instructions, and combining constant values.

           On some platforms these link time global optimizations may make
           symbolic debugging of the resulting executable impossible.  This is
           known to be the case for the Matsushita MN10200 and MN10300 family
           of processors.

           On platforms where this is not supported, ----rreellaaxx is accepted, but
           ignored.

           On platforms where ----rreellaaxx is accepted the option ----nnoo--rreellaaxx can be
           used to disable the feature.

       ----rreettaaiinn--ssyymmbboollss--ffiillee==_f_i_l_e_n_a_m_e
           Retain _o_n_l_y the symbols listed in the file _f_i_l_e_n_a_m_e, discarding all
           others.  _f_i_l_e_n_a_m_e is simply a flat file, with one symbol name per
           line.  This option is especially useful in environments (such as
           VxWorks) where a large global symbol table is accumulated
           gradually, to conserve run-time memory.

           ----rreettaaiinn--ssyymmbboollss--ffiillee does _n_o_t discard undefined symbols, or
           symbols needed for relocations.

           You may only specify ----rreettaaiinn--ssyymmbboollss--ffiillee once in the command
           line.  It overrides --ss and --SS.

       --rrppaatthh==_d_i_r
           Add a directory to the runtime library search path.  This is used
           when linking an ELF executable with shared objects.  All --rrppaatthh
           arguments are concatenated and passed to the runtime linker, which
           uses them to locate shared objects at runtime.

           The --rrppaatthh option is also used when locating shared objects which
           are needed by shared objects explicitly included in the link; see
           the description of the --rrppaatthh--lliinnkk option.  Searching --rrppaatthh in
           this way is only supported by native linkers and cross linkers
           which have been configured with the ----wwiitthh--ssyyssrroooott option.

           If --rrppaatthh is not used when linking an ELF executable, the contents
           of the environment variable "LD_RUN_PATH" will be used if it is
           defined.

           The --rrppaatthh option may also be used on SunOS.  By default, on SunOS,
           the linker will form a runtime search path out of all the --LL
           options it is given.  If a --rrppaatthh option is used, the runtime
           search path will be formed exclusively using the --rrppaatthh options,
           ignoring the --LL options.  This can be useful when using gcc, which
           adds many --LL options which may be on NFS mounted file systems.

           For compatibility with other ELF linkers, if the --RR option is
           followed by a directory name, rather than a file name, it is
           treated as the --rrppaatthh option.

       --rrppaatthh--lliinnkk==_d_i_r
           When using ELF or SunOS, one shared library may require another.
           This happens when an "ld -shared" link includes a shared library as
           one of the input files.

           When the linker encounters such a dependency when doing a non-
           shared, non-relocatable link, it will automatically try to locate
           the required shared library and include it in the link, if it is
           not included explicitly.  In such a case, the --rrppaatthh--lliinnkk option
           specifies the first set of directories to search.  The --rrppaatthh--lliinnkk
           option may specify a sequence of directory names either by
           specifying a list of names separated by colons, or by appearing
           multiple times.

           The tokens _$_O_R_I_G_I_N and _$_L_I_B can appear in these search directories.
           They will be replaced by the full path to the directory containing
           the program or shared object in the case of _$_O_R_I_G_I_N and either lliibb
           - for 32-bit binaries - or lliibb6644 - for 64-bit binaries - in the
           case of _$_L_I_B.

           The alternative form of these tokens - _$_{_O_R_I_G_I_N_} and _$_{_L_I_B_} can
           also be used.  The token _$_P_L_A_T_F_O_R_M is not supported.

           This option should be used with caution as it overrides the search
           path that may have been hard compiled into a shared library. In
           such a case it is possible to use unintentionally a different
           search path than the runtime linker would do.

           The linker uses the following search paths to locate required
           shared libraries:

           1.  Any directories specified by --rrppaatthh--lliinnkk options.

           2.  Any directories specified by --rrppaatthh options.  The difference
               between --rrppaatthh and --rrppaatthh--lliinnkk is that directories specified by
               --rrppaatthh options are included in the executable and used at
               runtime, whereas the --rrppaatthh--lliinnkk option is only effective at
               link time. Searching --rrppaatthh in this way is only supported by
               native linkers and cross linkers which have been configured
               with the ----wwiitthh--ssyyssrroooott option.

           3.  On an ELF system, for native linkers, if the --rrppaatthh and
               --rrppaatthh--lliinnkk options were not used, search the contents of the
               environment variable "LD_RUN_PATH".

           4.  On SunOS, if the --rrppaatthh option was not used, search any
               directories specified using --LL options.

           5.  For a native linker, search the contents of the environment
               variable "LD_LIBRARY_PATH".

           6.  For a native ELF linker, the directories in "DT_RUNPATH" or
               "DT_RPATH" of a shared library are searched for shared
               libraries needed by it. The "DT_RPATH" entries are ignored if
               "DT_RUNPATH" entries exist.

           7.  The default directories, normally _/_l_i_b and _/_u_s_r_/_l_i_b.

           8.  For a linker for a Linux system, if the file _/_e_t_c_/_l_d_._s_o_._c_o_n_f
               exists, the list of directories found in that file.  Note: the
               path to this file is prefixed with the "sysroot" value, if that
               is defined, and then any "prefix" string if the linker was
               configured with the ----pprreeffiixx==<<ppaatthh>> option.

           9.  For a native linker on a FreeBSD system, any directories
               specified by the "_PATH_ELF_HINTS" macro defined in the
               _e_l_f_-_h_i_n_t_s_._h header file.

           10. Any directories specifed by a "SEARCH_DIR" command in the
               linker script being used.

           If the required shared library is not found, the linker will issue
           a warning and continue with the link.

       --sshhaarreedd
       --BBsshhaarreeaabbllee
           Create a shared library.  This is currently only supported on ELF,
           XCOFF and SunOS platforms.  On SunOS, the linker will automatically
           create a shared library if the --ee option is not used and there are
           undefined symbols in the link.

       ----ssoorrtt--ccoommmmoonn
       ----ssoorrtt--ccoommmmoonn==aasscceennddiinngg
       ----ssoorrtt--ccoommmmoonn==ddeesscceennddiinngg
           This option tells lldd to sort the common symbols by alignment in
           ascending or descending order when it places them in the
           appropriate output sections.  The symbol alignments considered are
           sixteen-byte or larger, eight-byte, four-byte, two-byte, and one-
           byte. This is to prevent gaps between symbols due to alignment
           constraints.  If no sorting order is specified, then descending
           order is assumed.

       ----ssoorrtt--sseeccttiioonn==nnaammee
           This option will apply "SORT_BY_NAME" to all wildcard section
           patterns in the linker script.

       ----ssoorrtt--sseeccttiioonn==aalliiggnnmmeenntt
           This option will apply "SORT_BY_ALIGNMENT" to all wildcard section
           patterns in the linker script.

       ----ssppaarree--ddyynnaammiicc--ttaaggss==_c_o_u_n_t
           This option specifies the number of empty slots to leave in the
           .dynamic section of ELF shared objects.  Empty slots may be needed
           by post processing tools, such as the prelinker.  The default is 5.

       ----sspplliitt--bbyy--ffiillee[[==_s_i_z_e]]
           Similar to ----sspplliitt--bbyy--rreelloocc but creates a new output section for
           each input file when _s_i_z_e is reached.  _s_i_z_e defaults to a size of 1
           if not given.

       ----sspplliitt--bbyy--rreelloocc[[==_c_o_u_n_t]]
           Tries to creates extra sections in the output file so that no
           single output section in the file contains more than _c_o_u_n_t
           relocations.  This is useful when generating huge relocatable files
           for downloading into certain real time kernels with the COFF object
           file format; since COFF cannot represent more than 65535
           relocations in a single section.  Note that this will fail to work
           with object file formats which do not support arbitrary sections.
           The linker will not split up individual input sections for
           redistribution, so if a single input section contains more than
           _c_o_u_n_t relocations one output section will contain that many
           relocations.  _c_o_u_n_t defaults to a value of 32768.

       ----ssttaattss
           Compute and display statistics about the operation of the linker,
           such as execution time and memory usage.

       ----ssyyssrroooott==_d_i_r_e_c_t_o_r_y
           Use _d_i_r_e_c_t_o_r_y as the location of the sysroot, overriding the
           configure-time default.  This option is only supported by linkers
           that were configured using ----wwiitthh--ssyyssrroooott.

       ----ttaasskk--lliinnkk
           This is used by COFF/PE based targets to create a task-linked
           object file where all of the global symbols have been converted to
           statics.

       ----ttrraaddiittiioonnaall--ffoorrmmaatt
           For some targets, the output of lldd is different in some ways from
           the output of some existing linker.  This switch requests lldd to use
           the traditional format instead.

           For example, on SunOS, lldd combines duplicate entries in the symbol
           string table.  This can reduce the size of an output file with full
           debugging information by over 30 percent.  Unfortunately, the SunOS
           "dbx" program can not read the resulting program ("gdb" has no
           trouble).  The ----ttrraaddiittiioonnaall--ffoorrmmaatt switch tells lldd to not combine
           duplicate entries.

       ----sseeccttiioonn--ssttaarrtt==_s_e_c_t_i_o_n_n_a_m_e==_o_r_g
           Locate a section in the output file at the absolute address given
           by _o_r_g.  You may use this option as many times as necessary to
           locate multiple sections in the command line.  _o_r_g must be a single
           hexadecimal integer; for compatibility with other linkers, you may
           omit the leading 00xx usually associated with hexadecimal values.
           _N_o_t_e_: there should be no white space between _s_e_c_t_i_o_n_n_a_m_e, the
           equals sign ("=="), and _o_r_g.

       --TTbbssss==_o_r_g
       --TTddaattaa==_o_r_g
       --TTtteexxtt==_o_r_g
           Same as ----sseeccttiioonn--ssttaarrtt, with ".bss", ".data" or ".text" as the
           _s_e_c_t_i_o_n_n_a_m_e.

       --TTtteexxtt--sseeggmmeenntt==_o_r_g
           When creating an ELF executable, it will set the address of the
           first byte of the text segment.

       --TTrrooddaattaa--sseeggmmeenntt==_o_r_g
           When creating an ELF executable or shared object for a target where
           the read-only data is in its own segment separate from the
           executable text, it will set the address of the first byte of the
           read-only data segment.

       --TTllddaattaa--sseeggmmeenntt==_o_r_g
           When creating an ELF executable or shared object for x86-64 medium
           memory model, it will set the address of the first byte of the
           ldata segment.

       ----uunnrreessoollvveedd--ssyymmbboollss==_m_e_t_h_o_d
           Determine how to handle unresolved symbols.  There are four
           possible values for mmeetthhoodd:

           iiggnnoorree--aallll
               Do not report any unresolved symbols.

           rreeppoorrtt--aallll
               Report all unresolved symbols.  This is the default.

           iiggnnoorree--iinn--oobbjjeecctt--ffiilleess
               Report unresolved symbols that are contained in shared
               libraries, but ignore them if they come from regular object
               files.

           iiggnnoorree--iinn--sshhaarreedd--lliibbss
               Report unresolved symbols that come from regular object files,
               but ignore them if they come from shared libraries.  This can
               be useful when creating a dynamic binary and it is known that
               all the shared libraries that it should be referencing are
               included on the linker's command line.

           The behaviour for shared libraries on their own can also be
           controlled by the ----[[nnoo--]]aallllooww--sshhlliibb--uunnddeeffiinneedd option.

           Normally the linker will generate an error message for each
           reported unresolved symbol but the option ----wwaarrnn--uunnrreessoollvveedd--ssyymmbboollss
           can change this to a warning.

       ----ddllll--vveerrbboossee
       ----vveerrbboossee[[==_N_U_M_B_E_R]]
           Display the version number for lldd and list the linker emulations
           supported.  Display which input files can and cannot be opened.
           Display the linker script being used by the linker. If the optional
           _N_U_M_B_E_R argument > 1, plugin symbol status will also be displayed.

       ----vveerrssiioonn--ssccrriipptt==_v_e_r_s_i_o_n_-_s_c_r_i_p_t_f_i_l_e
           Specify the name of a version script to the linker.  This is
           typically used when creating shared libraries to specify additional
           information about the version hierarchy for the library being
           created.  This option is only fully supported on ELF platforms
           which support shared libraries; see VVEERRSSIIOONN.  It is partially
           supported on PE platforms, which can use version scripts to filter
           symbol visibility in auto-export mode: any symbols marked llooccaall in
           the version script will not be exported.

       ----wwaarrnn--ccoommmmoonn
           Warn when a common symbol is combined with another common symbol or
           with a symbol definition.  Unix linkers allow this somewhat sloppy
           practice, but linkers on some other operating systems do not.  This
           option allows you to find potential problems from combining global
           symbols.  Unfortunately, some C libraries use this practice, so you
           may get some warnings about symbols in the libraries as well as in
           your programs.

           There are three kinds of global symbols, illustrated here by C
           examples:

           iinntt ii == 11;;
               A definition, which goes in the initialized data section of the
               output file.

           eexxtteerrnn iinntt ii;;
               An undefined reference, which does not allocate space.  There
               must be either a definition or a common symbol for the variable
               somewhere.

           iinntt ii;;
               A common symbol.  If there are only (one or more) common
               symbols for a variable, it goes in the uninitialized data area
               of the output file.  The linker merges multiple common symbols
               for the same variable into a single symbol.  If they are of
               different sizes, it picks the largest size.  The linker turns a
               common symbol into a declaration, if there is a definition of
               the same variable.

           The ----wwaarrnn--ccoommmmoonn option can produce five kinds of warnings.  Each
           warning consists of a pair of lines: the first describes the symbol
           just encountered, and the second describes the previous symbol
           encountered with the same name.  One or both of the two symbols
           will be a common symbol.

           1.  Turning a common symbol into a reference, because there is
               already a definition for the symbol.

                       <file>(<section>): warning: common of `<symbol>'
                          overridden by definition
                       <file>(<section>): warning: defined here

           2.  Turning a common symbol into a reference, because a later
               definition for the symbol is encountered.  This is the same as
               the previous case, except that the symbols are encountered in a
               different order.

                       <file>(<section>): warning: definition of `<symbol>'
                          overriding common
                       <file>(<section>): warning: common is here

           3.  Merging a common symbol with a previous same-sized common
               symbol.

                       <file>(<section>): warning: multiple common
                          of `<symbol>'
                       <file>(<section>): warning: previous common is here

           4.  Merging a common symbol with a previous larger common symbol.

                       <file>(<section>): warning: common of `<symbol>'
                          overridden by larger common
                       <file>(<section>): warning: larger common is here

           5.  Merging a common symbol with a previous smaller common symbol.
               This is the same as the previous case, except that the symbols
               are encountered in a different order.

                       <file>(<section>): warning: common of `<symbol>'
                          overriding smaller common
                       <file>(<section>): warning: smaller common is here

       ----wwaarrnn--ccoonnssttrruuccttoorrss
           Warn if any global constructors are used.  This is only useful for
           a few object file formats.  For formats like COFF or ELF, the
           linker can not detect the use of global constructors.

       ----wwaarrnn--mmuullttiippllee--ggpp
           Warn if multiple global pointer values are required in the output
           file.  This is only meaningful for certain processors, such as the
           Alpha.  Specifically, some processors put large-valued constants in
           a special section.  A special register (the global pointer) points
           into the middle of this section, so that constants can be loaded
           efficiently via a base-register relative addressing mode.  Since
           the offset in base-register relative mode is fixed and relatively
           small (e.g., 16 bits), this limits the maximum size of the constant
           pool.  Thus, in large programs, it is often necessary to use
           multiple global pointer values in order to be able to address all
           possible constants.  This option causes a warning to be issued
           whenever this case occurs.

       ----wwaarrnn--oonnccee
           Only warn once for each undefined symbol, rather than once per
           module which refers to it.

       ----wwaarrnn--sseeccttiioonn--aalliiggnn
           Warn if the address of an output section is changed because of
           alignment.  Typically, the alignment will be set by an input
           section.  The address will only be changed if it not explicitly
           specified; that is, if the "SECTIONS" command does not specify a
           start address for the section.

       ----wwaarrnn--tteexxttrreell
           Warn if the linker adds DT_TEXTREL to a position-independent
           executable or shared object.

       ----wwaarrnn--aalltteerrnnaattee--eemm
           Warn if an object has alternate ELF machine code.

       ----wwaarrnn--uunnrreessoollvveedd--ssyymmbboollss
           If the linker is going to report an unresolved symbol (see the
           option ----uunnrreessoollvveedd--ssyymmbboollss) it will normally generate an error.
           This option makes it generate a warning instead.

       ----eerrrroorr--uunnrreessoollvveedd--ssyymmbboollss
           This restores the linker's default behaviour of generating errors
           when it is reporting unresolved symbols.

       ----wwhhoollee--aarrcchhiivvee
           For each archive mentioned on the command line after the
           ----wwhhoollee--aarrcchhiivvee option, include every object file in the archive in
           the link, rather than searching the archive for the required object
           files.  This is normally used to turn an archive file into a shared
           library, forcing every object to be included in the resulting
           shared library.  This option may be used more than once.

           Two notes when using this option from gcc: First, gcc doesn't know
           about this option, so you have to use --WWll,,--wwhhoollee--aarrcchhiivvee.  Second,
           don't forget to use --WWll,,--nnoo--wwhhoollee--aarrcchhiivvee after your list of
           archives, because gcc will add its own list of archives to your
           link and you may not want this flag to affect those as well.

       ----wwrraapp==_s_y_m_b_o_l
           Use a wrapper function for _s_y_m_b_o_l.  Any undefined reference to
           _s_y_m_b_o_l will be resolved to "__wrap__s_y_m_b_o_l_".  Any undefined
           reference to "__real__s_y_m_b_o_l_" will be resolved to _s_y_m_b_o_l.

           This can be used to provide a wrapper for a system function.  The
           wrapper function should be called "__wrap__s_y_m_b_o_l_".  If it wishes to
           call the system function, it should call "__real__s_y_m_b_o_l_".

           Here is a trivial example:

                   void *
                   __wrap_malloc (size_t c)
                   {
                     printf ("malloc called with %zu\n", c);
                     return __real_malloc (c);
                   }

           If you link other code with this file using ----wwrraapp mmaalllloocc, then all
           calls to "malloc" will call the function "__wrap_malloc" instead.
           The call to "__real_malloc" in "__wrap_malloc" will call the real
           "malloc" function.

           You may wish to provide a "__real_malloc" function as well, so that
           links without the ----wwrraapp option will succeed.  If you do this, you
           should not put the definition of "__real_malloc" in the same file
           as "__wrap_malloc"; if you do, the assembler may resolve the call
           before the linker has a chance to wrap it to "malloc".

           Only undefined references are replaced by the linker.  So,
           translation unit internal references to _s_y_m_b_o_l are not resolved to
           "__wrap__s_y_m_b_o_l_".  In the next example, the call to "f" in "g" is
           not resolved to "__wrap_f".

                   int
                   f (void)
                   {
                     return 123;
                   }

                   int
                   g (void)
                   {
                     return f();
                   }

       ----eehh--ffrraammee--hhddrr
       ----nnoo--eehh--ffrraammee--hhddrr
           Request (----eehh--ffrraammee--hhddrr) or suppress (----nnoo--eehh--ffrraammee--hhddrr) the
           creation of ".eh_frame_hdr" section and ELF "PT_GNU_EH_FRAME"
           segment header.

       ----nnoo--lldd--ggeenneerraatteedd--uunnwwiinndd--iinnffoo
           Request creation of ".eh_frame" unwind info for linker generated
           code sections like PLT.  This option is on by default if linker
           generated unwind info is supported.

       ----eennaabbllee--nneeww--ddttaaggss
       ----ddiissaabbllee--nneeww--ddttaaggss
           This linker can create the new dynamic tags in ELF. But the older
           ELF systems may not understand them. If you specify
           ----eennaabbllee--nneeww--ddttaaggss, the new dynamic tags will be created as needed
           and older dynamic tags will be omitted.  If you specify
           ----ddiissaabbllee--nneeww--ddttaaggss, no new dynamic tags will be created. By
           default, the new dynamic tags are not created. Note that those
           options are only available for ELF systems.

       ----hhaasshh--ssiizzee==_n_u_m_b_e_r
           Set the default size of the linker's hash tables to a prime number
           close to _n_u_m_b_e_r.  Increasing this value can reduce the length of
           time it takes the linker to perform its tasks, at the expense of
           increasing the linker's memory requirements.  Similarly reducing
           this value can reduce the memory requirements at the expense of
           speed.

       ----hhaasshh--ssttyyllee==_s_t_y_l_e
           Set the type of linker's hash table(s).  _s_t_y_l_e can be either "sysv"
           for classic ELF ".hash" section, "gnu" for new style GNU
           ".gnu.hash" section or "both" for both the classic ELF ".hash" and
           new style GNU ".gnu.hash" hash tables.  The default depends upon
           how the linker was configured, but for most Linux based systems it
           will be "both".

       ----ccoommpprreessss--ddeebbuugg--sseeccttiioonnss==nnoonnee
       ----ccoommpprreessss--ddeebbuugg--sseeccttiioonnss==zzlliibb
       ----ccoommpprreessss--ddeebbuugg--sseeccttiioonnss==zzlliibb--ggnnuu
       ----ccoommpprreessss--ddeebbuugg--sseeccttiioonnss==zzlliibb--ggaabbii
           On ELF platforms, these options control how DWARF debug sections
           are compressed using zlib.

           ----ccoommpprreessss--ddeebbuugg--sseeccttiioonnss==nnoonnee doesn't compress DWARF debug
           sections.  ----ccoommpprreessss--ddeebbuugg--sseeccttiioonnss==zzlliibb--ggnnuu compresses DWARF
           debug sections and renames them to begin with ..zzddeebbuugg instead of
           ..ddeebbuugg.  ----ccoommpprreessss--ddeebbuugg--sseeccttiioonnss==zzlliibb--ggaabbii also compresses DWARF
           debug sections, but rather than renaming them it sets the
           SHF_COMPRESSED flag in the sections' headers.

           The ----ccoommpprreessss--ddeebbuugg--sseeccttiioonnss==zzlliibb option is an alias for
           ----ccoommpprreessss--ddeebbuugg--sseeccttiioonnss==zzlliibb--ggaabbii.

           Note that this option overrides any compression in input debug
           sections, so if a binary is linked with
           ----ccoommpprreessss--ddeebbuugg--sseeccttiioonnss==nnoonnee for example, then any compressed
           debug sections in input files will be uncompressed before they are
           copied into the output binary.

           The default compression behaviour varies depending upon the target
           involved and the configure options used to build the toolchain.
           The default can be determined by examining the output from the
           linker's ----hheellpp option.

       ----rreedduuccee--mmeemmoorryy--oovveerrhheeaaddss
           This option reduces memory requirements at ld runtime, at the
           expense of linking speed.  This was introduced to select the old
           O(n^2) algorithm for link map file generation, rather than the new
           O(n) algorithm which uses about 40% more memory for symbol storage.

           Another effect of the switch is to set the default hash table size
           to 1021, which again saves memory at the cost of lengthening the
           linker's run time.  This is not done however if the ----hhaasshh--ssiizzee
           switch has been used.

           The ----rreedduuccee--mmeemmoorryy--oovveerrhheeaaddss switch may be also be used to enable
           other tradeoffs in future versions of the linker.

       ----bbuuiilldd--iidd
       ----bbuuiilldd--iidd==_s_t_y_l_e
           Request the creation of a ".note.gnu.build-id" ELF note section or
           a ".buildid" COFF section.  The contents of the note are unique
           bits identifying this linked file.  _s_t_y_l_e can be "uuid" to use 128
           random bits, "sha1" to use a 160-bit SHA1 hash on the normative
           parts of the output contents, "md5" to use a 128-bit MD5 hash on
           the normative parts of the output contents, or "0x_h_e_x_s_t_r_i_n_g_" to use
           a chosen bit string specified as an even number of hexadecimal
           digits ("-" and ":" characters between digit pairs are ignored).
           If _s_t_y_l_e is omitted, "sha1" is used.

           The "md5" and "sha1" styles produces an identifier that is always
           the same in an identical output file, but will be unique among all
           nonidentical output files.  It is not intended to be compared as a
           checksum for the file's contents.  A linked file may be changed
           later by other tools, but the build ID bit string identifying the
           original linked file does not change.

           Passing "none" for _s_t_y_l_e disables the setting from any "--build-id"
           options earlier on the command line.

       The i386 PE linker supports the --sshhaarreedd option, which causes the output
       to be a dynamically linked library (DLL) instead of a normal
       executable.  You should name the output "*.dll" when you use this
       option.  In addition, the linker fully supports the standard "*.def"
       files, which may be specified on the linker command line like an object
       file (in fact, it should precede archives it exports symbols from, to
       ensure that they get linked in, just like a normal object file).

       In addition to the options common to all targets, the i386 PE linker
       support additional command-line options that are specific to the i386
       PE target.  Options that take values may be separated from their values
       by either a space or an equals sign.

       ----aadddd--ssttddccaallll--aalliiaass
           If given, symbols with a stdcall suffix (@_n_n) will be exported as-
           is and also with the suffix stripped.  [This option is specific to
           the i386 PE targeted port of the linker]

       ----bbaassee--ffiillee _f_i_l_e
           Use _f_i_l_e as the name of a file in which to save the base addresses
           of all the relocations needed for generating DLLs with _d_l_l_t_o_o_l.
           [This is an i386 PE specific option]

       ----ddllll
           Create a DLL instead of a regular executable.  You may also use
           --sshhaarreedd or specify a "LIBRARY" in a given ".def" file.  [This
           option is specific to the i386 PE targeted port of the linker]

       ----eennaabbllee--lloonngg--sseeccttiioonn--nnaammeess
       ----ddiissaabbllee--lloonngg--sseeccttiioonn--nnaammeess
           The PE variants of the COFF object format add an extension that
           permits the use of section names longer than eight characters, the
           normal limit for COFF.  By default, these names are only allowed in
           object files, as fully-linked executable images do not carry the
           COFF string table required to support the longer names.  As a GNU
           extension, it is possible to allow their use in executable images
           as well, or to (probably pointlessly!)  disallow it in object
           files, by using these two options.  Executable images generated
           with these long section names are slightly non-standard, carrying
           as they do a string table, and may generate confusing output when
           examined with non-GNU PE-aware tools, such as file viewers and
           dumpers.  However, GDB relies on the use of PE long section names
           to find Dwarf-2 debug information sections in an executable image
           at runtime, and so if neither option is specified on the command-
           line, lldd will enable long section names, overriding the default and
           technically correct behaviour, when it finds the presence of debug
           information while linking an executable image and not stripping
           symbols.  [This option is valid for all PE targeted ports of the
           linker]

       ----eennaabbllee--ssttddccaallll--ffiixxuupp
       ----ddiissaabbllee--ssttddccaallll--ffiixxuupp
           If the link finds a symbol that it cannot resolve, it will attempt
           to do "fuzzy linking" by looking for another defined symbol that
           differs only in the format of the symbol name (cdecl vs stdcall)
           and will resolve that symbol by linking to the match.  For example,
           the undefined symbol "_foo" might be linked to the function
           "_foo@12", or the undefined symbol "_bar@16" might be linked to the
           function "_bar".  When the linker does this, it prints a warning,
           since it normally should have failed to link, but sometimes import
           libraries generated from third-party dlls may need this feature to
           be usable.  If you specify ----eennaabbllee--ssttddccaallll--ffiixxuupp, this feature is
           fully enabled and warnings are not printed.  If you specify
           ----ddiissaabbllee--ssttddccaallll--ffiixxuupp, this feature is disabled and such
           mismatches are considered to be errors.  [This option is specific
           to the i386 PE targeted port of the linker]

       ----lleeaaddiinngg--uunnddeerrssccoorree
       ----nnoo--lleeaaddiinngg--uunnddeerrssccoorree
           For most targets default symbol-prefix is an underscore and is
           defined in target's description. By this option it is possible to
           disable/enable the default underscore symbol-prefix.

       ----eexxppoorrtt--aallll--ssyymmbboollss
           If given, all global symbols in the objects used to build a DLL
           will be exported by the DLL.  Note that this is the default if
           there otherwise wouldn't be any exported symbols.  When symbols are
           explicitly exported via DEF files or implicitly exported via
           function attributes, the default is to not export anything else
           unless this option is given.  Note that the symbols "DllMain@12",
           "DllEntryPoint@0", "DllMainCRTStartup@12", and "impure_ptr" will
           not be automatically exported.  Also, symbols imported from other
           DLLs will not be re-exported, nor will symbols specifying the DLL's
           internal layout such as those beginning with "_head_" or ending
           with "_iname".  In addition, no symbols from "libgcc", "libstd++",
           "libmingw32", or "crtX.o" will be exported.  Symbols whose names
           begin with "__rtti_" or "__builtin_" will not be exported, to help
           with C++ DLLs.  Finally, there is an extensive list of cygwin-
           private symbols that are not exported (obviously, this applies on
           when building DLLs for cygwin targets).  These cygwin-excludes are:
           "_cygwin_dll_entry@12", "_cygwin_crt0_common@8",
           "_cygwin_noncygwin_dll_entry@12", "_fmode", "_impure_ptr",
           "cygwin_attach_dll", "cygwin_premain0", "cygwin_premain1",
           "cygwin_premain2", "cygwin_premain3", and "environ".  [This option
           is specific to the i386 PE targeted port of the linker]

       ----eexxcclluuddee--ssyymmbboollss _s_y_m_b_o_l,,_s_y_m_b_o_l,,......
           Specifies a list of symbols which should not be automatically
           exported.  The symbol names may be delimited by commas or colons.
           [This option is specific to the i386 PE targeted port of the
           linker]

       ----eexxcclluuddee--aallll--ssyymmbboollss
           Specifies no symbols should be automatically exported.  [This
           option is specific to the i386 PE targeted port of the linker]

       ----ffiillee--aalliiggnnmmeenntt
           Specify the file alignment.  Sections in the file will always begin
           at file offsets which are multiples of this number.  This defaults
           to 512.  [This option is specific to the i386 PE targeted port of
           the linker]

       ----hheeaapp _r_e_s_e_r_v_e
       ----hheeaapp _r_e_s_e_r_v_e,,_c_o_m_m_i_t
           Specify the number of bytes of memory to reserve (and optionally
           commit) to be used as heap for this program.  The default is 1MB
           reserved, 4K committed.  [This option is specific to the i386 PE
           targeted port of the linker]

       ----iimmaaggee--bbaassee _v_a_l_u_e
           Use _v_a_l_u_e as the base address of your program or dll.  This is the
           lowest memory location that will be used when your program or dll
           is loaded.  To reduce the need to relocate and improve performance
           of your dlls, each should have a unique base address and not
           overlap any other dlls.  The default is 0x400000 for executables,
           and 0x10000000 for dlls.  [This option is specific to the i386 PE
           targeted port of the linker]

       ----kkiillll--aatt
           If given, the stdcall suffixes (@_n_n) will be stripped from symbols
           before they are exported.  [This option is specific to the i386 PE
           targeted port of the linker]

       ----llaarrggee--aaddddrreessss--aawwaarree
           If given, the appropriate bit in the "Characteristics" field of the
           COFF header is set to indicate that this executable supports
           virtual addresses greater than 2 gigabytes.  This should be used in
           conjunction with the /3GB or /USERVA=_v_a_l_u_e megabytes switch in the
           "[operating systems]" section of the BOOT.INI.  Otherwise, this bit
           has no effect.  [This option is specific to PE targeted ports of
           the linker]

       ----ddiissaabbllee--llaarrggee--aaddddrreessss--aawwaarree
           Reverts the effect of a previous ----llaarrggee--aaddddrreessss--aawwaarree option.
           This is useful if ----llaarrggee--aaddddrreessss--aawwaarree is always set by the
           compiler driver (e.g. Cygwin gcc) and the executable does not
           support virtual addresses greater than 2 gigabytes.  [This option
           is specific to PE targeted ports of the linker]

       ----mmaajjoorr--iimmaaggee--vveerrssiioonn _v_a_l_u_e
           Sets the major number of the "image version".  Defaults to 1.
           [This option is specific to the i386 PE targeted port of the
           linker]

       ----mmaajjoorr--ooss--vveerrssiioonn _v_a_l_u_e
           Sets the major number of the "os version".  Defaults to 4.  [This
           option is specific to the i386 PE targeted port of the linker]

       ----mmaajjoorr--ssuubbssyysstteemm--vveerrssiioonn _v_a_l_u_e
           Sets the major number of the "subsystem version".  Defaults to 4.
           [This option is specific to the i386 PE targeted port of the
           linker]

       ----mmiinnoorr--iimmaaggee--vveerrssiioonn _v_a_l_u_e
           Sets the minor number of the "image version".  Defaults to 0.
           [This option is specific to the i386 PE targeted port of the
           linker]

       ----mmiinnoorr--ooss--vveerrssiioonn _v_a_l_u_e
           Sets the minor number of the "os version".  Defaults to 0.  [This
           option is specific to the i386 PE targeted port of the linker]

       ----mmiinnoorr--ssuubbssyysstteemm--vveerrssiioonn _v_a_l_u_e
           Sets the minor number of the "subsystem version".  Defaults to 0.
           [This option is specific to the i386 PE targeted port of the
           linker]

       ----oouuttppuutt--ddeeff _f_i_l_e
           The linker will create the file _f_i_l_e which will contain a DEF file
           corresponding to the DLL the linker is generating.  This DEF file
           (which should be called "*.def") may be used to create an import
           library with "dlltool" or may be used as a reference to
           automatically or implicitly exported symbols.  [This option is
           specific to the i386 PE targeted port of the linker]

       ----eennaabbllee--aauuttoo--iimmaaggee--bbaassee
       ----eennaabbllee--aauuttoo--iimmaaggee--bbaassee==_v_a_l_u_e
           Automatically choose the image base for DLLs, optionally starting
           with base _v_a_l_u_e, unless one is specified using the "--image-base"
           argument.  By using a hash generated from the dllname to create
           unique image bases for each DLL, in-memory collisions and
           relocations which can delay program execution are avoided.  [This
           option is specific to the i386 PE targeted port of the linker]

       ----ddiissaabbllee--aauuttoo--iimmaaggee--bbaassee
           Do not automatically generate a unique image base.  If there is no
           user-specified image base ("--image-base") then use the platform
           default.  [This option is specific to the i386 PE targeted port of
           the linker]

       ----ddllll--sseeaarrcchh--pprreeffiixx _s_t_r_i_n_g
           When linking dynamically to a dll without an import library, search
           for "<string><basename>.dll" in preference to "lib<basename>.dll".
           This behaviour allows easy distinction between DLLs built for the
           various "subplatforms": native, cygwin, uwin, pw, etc.  For
           instance, cygwin DLLs typically use "--dll-search-prefix=cyg".
           [This option is specific to the i386 PE targeted port of the
           linker]

       ----eennaabbllee--aauuttoo--iimmppoorrtt
           Do sophisticated linking of "_symbol" to "__imp__symbol" for DATA
           imports from DLLs, thus making it possible to bypass the dllimport
           mechanism on the user side and to reference unmangled symbol names.
           [This option is specific to the i386 PE targeted port of the
           linker]

           The following remarks pertain to the original implementation of the
           feature and are obsolete nowadays for Cygwin and MinGW targets.

           Note: Use of the 'auto-import' extension will cause the text
           section of the image file to be made writable. This does not
           conform to the PE-COFF format specification published by Microsoft.

           Note - use of the 'auto-import' extension will also cause read only
           data which would normally be placed into the .rdata section to be
           placed into the .data section instead.  This is in order to work
           around a problem with consts that is described here:
           http://www.cygwin.com/ml/cygwin/2004-09/msg01101.html

           Using 'auto-import' generally will 'just work' -- but sometimes you
           may see this message:

           "variable '<var>' can't be auto-imported. Please read the
           documentation for ld's "--enable-auto-import" for details."

           This message occurs when some (sub)expression accesses an address
           ultimately given by the sum of two constants (Win32 import tables
           only allow one).  Instances where this may occur include accesses
           to member fields of struct variables imported from a DLL, as well
           as using a constant index into an array variable imported from a
           DLL.  Any multiword variable (arrays, structs, long long, etc) may
           trigger this error condition.  However, regardless of the exact
           data type of the offending exported variable, ld will always detect
           it, issue the warning, and exit.

           There are several ways to address this difficulty, regardless of
           the data type of the exported variable:

           One way is to use --enable-runtime-pseudo-reloc switch. This leaves
           the task of adjusting references in your client code for runtime
           environment, so this method works only when runtime environment
           supports this feature.

           A second solution is to force one of the 'constants' to be a
           variable -- that is, unknown and un-optimizable at compile time.
           For arrays, there are two possibilities: a) make the indexee (the
           array's address) a variable, or b) make the 'constant' index a
           variable.  Thus:

                   extern type extern_array[];
                   extern_array[1] -->
                      { volatile type *t=extern_array; t[1] }

           or

                   extern type extern_array[];
                   extern_array[1] -->
                      { volatile int t=1; extern_array[t] }

           For structs (and most other multiword data types) the only option
           is to make the struct itself (or the long long, or the ...)
           variable:

                   extern struct s extern_struct;
                   extern_struct.field -->
                      { volatile struct s *t=&extern_struct; t->field }

           or

                   extern long long extern_ll;
                   extern_ll -->
                     { volatile long long * local_ll=&extern_ll; *local_ll }

           A third method of dealing with this difficulty is to abandon
           'auto-import' for the offending symbol and mark it with
           "__declspec(dllimport)".  However, in practice that requires using
           compile-time #defines to indicate whether you are building a DLL,
           building client code that will link to the DLL, or merely
           building/linking to a static library.   In making the choice
           between the various methods of resolving the 'direct address with
           constant offset' problem, you should consider typical real-world
           usage:

           Original:

                   --foo.h
                   extern int arr[];
                   --foo.c
                   #include "foo.h"
                   void main(int argc, char **argv){
                     printf("%d\n",arr[1]);
                   }

           Solution 1:

                   --foo.h
                   extern int arr[];
                   --foo.c
                   #include "foo.h"
                   void main(int argc, char **argv){
                     /* This workaround is for win32 and cygwin; do not "optimize" */
                     volatile int *parr = arr;
                     printf("%d\n",parr[1]);
                   }

           Solution 2:

                   --foo.h
                   /* Note: auto-export is assumed (no __declspec(dllexport)) */
                   #if (defined(_WIN32) || defined(__CYGWIN__)) && \
                     !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
                   #define FOO_IMPORT __declspec(dllimport)
                   #else
                   #define FOO_IMPORT
                   #endif
                   extern FOO_IMPORT int arr[];
                   --foo.c
                   #include "foo.h"
                   void main(int argc, char **argv){
                     printf("%d\n",arr[1]);
                   }

           A fourth way to avoid this problem is to re-code your library to
           use a functional interface rather than a data interface for the
           offending variables (e.g. sseett__ffoooo(()) and ggeett__ffoooo(()) accessor
           functions).

       ----ddiissaabbllee--aauuttoo--iimmppoorrtt
           Do not attempt to do sophisticated linking of "_symbol" to
           "__imp__symbol" for DATA imports from DLLs.  [This option is
           specific to the i386 PE targeted port of the linker]

       ----eennaabbllee--rruunnttiimmee--ppsseeuuddoo--rreelloocc
           If your code contains expressions described in --enable-auto-import
           section, that is, DATA imports from DLL with non-zero offset, this
           switch will create a vector of 'runtime pseudo relocations' which
           can be used by runtime environment to adjust references to such
           data in your client code.  [This option is specific to the i386 PE
           targeted port of the linker]

       ----ddiissaabbllee--rruunnttiimmee--ppsseeuuddoo--rreelloocc
           Do not create pseudo relocations for non-zero offset DATA imports
           from DLLs.  [This option is specific to the i386 PE targeted port
           of the linker]

       ----eennaabbllee--eexxttrraa--ppee--ddeebbuugg
           Show additional debug info related to auto-import symbol thunking.
           [This option is specific to the i386 PE targeted port of the
           linker]

       ----sseeccttiioonn--aalliiggnnmmeenntt
           Sets the section alignment.  Sections in memory will always begin
           at addresses which are a multiple of this number.  Defaults to
           0x1000.  [This option is specific to the i386 PE targeted port of
           the linker]

       ----ssttaacckk _r_e_s_e_r_v_e
       ----ssttaacckk _r_e_s_e_r_v_e,,_c_o_m_m_i_t
           Specify the number of bytes of memory to reserve (and optionally
           commit) to be used as stack for this program.  The default is 2MB
           reserved, 4K committed.  [This option is specific to the i386 PE
           targeted port of the linker]

       ----ssuubbssyysstteemm _w_h_i_c_h
       ----ssuubbssyysstteemm _w_h_i_c_h::_m_a_j_o_r
       ----ssuubbssyysstteemm _w_h_i_c_h::_m_a_j_o_r.._m_i_n_o_r
           Specifies the subsystem under which your program will execute.  The
           legal values for _w_h_i_c_h are "native", "windows", "console", "posix",
           and "xbox".  You may optionally set the subsystem version also.
           Numeric values are also accepted for _w_h_i_c_h.  [This option is
           specific to the i386 PE targeted port of the linker]

           The following options set flags in the "DllCharacteristics" field
           of the PE file header: [These options are specific to PE targeted
           ports of the linker]

       ----hhiigghh--eennttrrooppyy--vvaa
           Image is compatible with 64-bit address space layout randomization
           (ASLR).  This option also implies ----ddyynnaammiiccbbaassee and
           ----eennaabbllee--rreelloocc--sseeccttiioonn.

       ----ddyynnaammiiccbbaassee
           The image base address may be relocated using address space layout
           randomization (ASLR).  This feature was introduced with MS Windows
           Vista for i386 PE targets.  This option also implies
           ----eennaabbllee--rreelloocc--sseeccttiioonn.

       ----ffoorrcceeiinntteegg
           Code integrity checks are enforced.

       ----nnxxccoommppaatt
           The image is compatible with the Data Execution Prevention.  This
           feature was introduced with MS Windows XP SP2 for i386 PE targets.

       ----nnoo--iissoollaattiioonn
           Although the image understands isolation, do not isolate the image.

       ----nnoo--sseehh
           The image does not use SEH. No SE handler may be called from this
           image.

       ----nnoo--bbiinndd
           Do not bind this image.

       ----wwddmmddrriivveerr
           The driver uses the MS Windows Driver Model.

       ----ttssaawwaarree
           The image is Terminal Server aware.

       ----iinnsseerrtt--ttiimmeessttaammpp
       ----nnoo--iinnsseerrtt--ttiimmeessttaammpp
           Insert a real timestamp into the image.  This is the default
           behaviour as it matches legacy code and it means that the image
           will work with other, proprietary tools.  The problem with this
           default is that it will result in slightly different images being
           produced each time the same sources are linked.  The option
           ----nnoo--iinnsseerrtt--ttiimmeessttaammpp can be used to insert a zero value for the
           timestamp, this ensuring that binaries produced from identical
           sources will compare identically.

       ----eennaabbllee--rreelloocc--sseeccttiioonn
           Create the base relocation table, which is necessary if the image
           is loaded at a different image base than specified in the PE
           header.

       The C6X uClinux target uses a binary format called DSBT to support
       shared libraries.  Each shared library in the system needs to have a
       unique index; all executables use an index of 0.

       ----ddssbbtt--ssiizzee _s_i_z_e
           This option sets the number of entries in the DSBT of the current
           executable or shared library to _s_i_z_e.  The default is to create a
           table with 64 entries.

       ----ddssbbtt--iinnddeexx _i_n_d_e_x
           This option sets the DSBT index of the current executable or shared
           library to _i_n_d_e_x.  The default is 0, which is appropriate for
           generating executables.  If a shared library is generated with a
           DSBT index of 0, the "R_C6000_DSBT_INDEX" relocs are copied into
           the output file.

           The ----nnoo--mmeerrggee--eexxiiddxx--eennttrriieess switch disables the merging of
           adjacent exidx entries in frame unwind info.

       ----bbrraanncchh--ssttuubb
           This option enables linker branch relaxation by inserting branch
           stub sections when needed to extend the range of branches.  This
           option is usually not required since C-SKY supports branch and call
           instructions that can access the full memory range and branch
           relaxation is normally handled by the compiler or assembler.

       ----ssttuubb--ggrroouupp--ssiizzee==_N
           This option allows finer control of linker branch stub creation.
           It sets the maximum size of a group of input sections that can be
           handled by one stub section.  A negative value of _N locates stub
           sections after their branches, while a positive value allows stub
           sections to appear either before or after the branches.  Values of
           11 or --11 indicate that the linker should choose suitable defaults.

       The 68HC11 and 68HC12 linkers support specific options to control the
       memory bank switching mapping and trampoline code generation.

       ----nnoo--ttrraammppoolliinnee
           This option disables the generation of trampoline. By default a
           trampoline is generated for each far function which is called using
           a "jsr" instruction (this happens when a pointer to a far function
           is taken).

       ----bbaannkk--wwiinnddooww _n_a_m_e
           This option indicates to the linker the name of the memory region
           in the MMEEMMOORRYY specification that describes the memory bank window.
           The definition of such region is then used by the linker to compute
           paging and addresses within the memory window.

       The following options are supported to control handling of GOT
       generation when linking for 68K targets.

       ----ggoott==_t_y_p_e
           This option tells the linker which GOT generation scheme to use.
           _t_y_p_e should be one of ssiinnggllee, nneeggaattiivvee, mmuullttiiggoott or ttaarrggeett.  For
           more information refer to the Info entry for _l_d.

       The following options are supported to control microMIPS instruction
       generation and branch relocation checks for ISA mode transitions when
       linking for MIPS targets.

       ----iinnssnn3322
       ----nnoo--iinnssnn3322
           These options control the choice of microMIPS instructions used in
           code generated by the linker, such as that in the PLT or lazy
           binding stubs, or in relaxation.  If ----iinnssnn3322 is used, then the
           linker only uses 32-bit instruction encodings.  By default or if
           ----nnoo--iinnssnn3322 is used, all instruction encodings are used, including
           16-bit ones where possible.

       ----iiggnnoorree--bbrraanncchh--iissaa
       ----nnoo--iiggnnoorree--bbrraanncchh--iissaa
           These options control branch relocation checks for invalid ISA mode
           transitions.  If ----iiggnnoorree--bbrraanncchh--iissaa is used, then the linker
           accepts any branch relocations and any ISA mode transition required
           is lost in relocation calculation, except for some cases of "BAL"
           instructions which meet relaxation conditions and are converted to
           equivalent "JALX" instructions as the associated relocation is
           calculated.  By default or if ----nnoo--iiggnnoorree--bbrraanncchh--iissaa is used a
           check is made causing the loss of an ISA mode transition to produce
           an error.

       ----ccoommppaacctt--bbrraanncchheess
       ----nnoo--ccoommppaacctt--bbrraanncchheess
           These options control the generation of compact instructions by the
           linker in the PLT entries for MIPS R6.

       For the pdp11-aout target, three variants of the output format can be
       produced as selected by the following options.  The default variant for
       pdp11-aout is the ----oommaaggiicc option, whereas for other targets ----nnmmaaggiicc
       is the default.  The ----iimmaaggiicc option is defined only for the pdp11-aout
       target, while the others are described here as they apply to the
       pdp11-aout target.

       --NN
       ----oommaaggiicc
           Mark the output as "OMAGIC" (0407) in the _a_._o_u_t header to indicate
           that the text segment is not to be write-protected and shared.
           Since the text and data sections are both readable and writable,
           the data section is allocated immediately contiguous after the text
           segment.  This is the oldest format for PDP11 executable programs
           and is the default for lldd on PDP11 Unix systems from the beginning
           through 2.11BSD.

       --nn
       ----nnmmaaggiicc
           Mark the output as "NMAGIC" (0410) in the _a_._o_u_t header to indicate
           that when the output file is executed, the text portion will be
           read-only and shareable among all processes executing the same
           file.  This involves moving the data areas up to the first possible
           8K byte page boundary following the end of the text.  This option
           creates a _p_u_r_e _e_x_e_c_u_t_a_b_l_e format.

       --zz
       ----iimmaaggiicc
           Mark the output as "IMAGIC" (0411) in the _a_._o_u_t header to indicate
           that when the output file is executed, the program text and data
           areas will be loaded into separate address spaces using the split
           instruction and data space feature of the memory management unit in
           larger models of the PDP11.  This doubles the address space
           available to the program.  The text segment is again pure, write-
           protected, and shareable.  The only difference in the output format
           between this option and the others, besides the magic number, is
           that both the text and data sections start at location 0.  The --zz
           option selected this format in 2.11BSD.  This option creates a
           _s_e_p_a_r_a_t_e _e_x_e_c_u_t_a_b_l_e format.

       ----nnoo--oommaaggiicc
           Equivalent to ----nnmmaaggiicc for pdp11-aout.

EENNVVIIRROONNMMEENNTT
       You can change the behaviour of lldd with the environment variables
       "GNUTARGET", "LDEMULATION" and "COLLECT_NO_DEMANGLE".

       "GNUTARGET" determines the input-file object format if you don't use --bb
       (or its synonym ----ffoorrmmaatt).  Its value should be one of the BFD names
       for an input format.  If there is no "GNUTARGET" in the environment, lldd
       uses the natural format of the target. If "GNUTARGET" is set to
       "default" then BFD attempts to discover the input format by examining
       binary input files; this method often succeeds, but there are potential
       ambiguities, since there is no method of ensuring that the magic number
       used to specify object-file formats is unique.  However, the
       configuration procedure for BFD on each system places the conventional
       format for that system first in the search-list, so ambiguities are
       resolved in favor of convention.

       "LDEMULATION" determines the default emulation if you don't use the --mm
       option.  The emulation can affect various aspects of linker behaviour,
       particularly the default linker script.  You can list the available
       emulations with the ----vveerrbboossee or --VV options.  If the --mm option is not
       used, and the "LDEMULATION" environment variable is not defined, the
       default emulation depends upon how the linker was configured.

       Normally, the linker will default to demangling symbols.  However, if
       "COLLECT_NO_DEMANGLE" is set in the environment, then it will default
       to not demangling symbols.  This environment variable is used in a
       similar fashion by the "gcc" linker wrapper program.  The default may
       be overridden by the ----ddeemmaannggllee and ----nnoo--ddeemmaannggllee options.

SSEEEE AALLSSOO
       aarr(1), nnmm(1), oobbjjccooppyy(1), oobbjjdduummpp(1), rreeaaddeellff(1) and the Info entries
       for _b_i_n_u_t_i_l_s and _l_d.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1991-2020 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3 or
       any later version published by the Free Software Foundation; with no
       Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
       Texts.  A copy of the license is included in the section entitled "GNU
       Free Documentation License".



binutils-2.35.1                   2020-09-19                             LD(1)
